***Raw Terminals***
import
using
namespace
extern
const
operator
own
bor
var
class
void
bool
int
long
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITLONG
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
***Raw Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
tmodf
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
***Raw Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> tmodf type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> tmodf type ID ( params ) { statements }
declstmt -> type operator ID ( params ) { statements }
declstmt -> tmodf type operator ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
declstmt -> class own ID inherit { declstatements }
tmodf -> own
tmodf -> bor
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
type -> var
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> long
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITLONG
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> tmodf type ID
params -> params , type ID
params -> params , tmodf type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε



***Data***
***Terminals***
import
using
namespace
extern
const
operator
own
bor
var
class
void
bool
int
long
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITLONG
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
$
***Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
tmodf
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
S'
***Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> tmodf type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> tmodf type ID ( params ) { statements }
declstmt -> type operator ID ( params ) { statements }
declstmt -> tmodf type operator ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
declstmt -> class own ID inherit { declstatements }
tmodf -> own
tmodf -> bor
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
type -> var
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> long
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITLONG
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> tmodf type ID
params -> params , type ID
params -> params , tmodf type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε
S' -> S
***States***
***State***
0
I_0
***Set***
S' -> · S, $
S -> · importations namespaceusings statements, $
importations -> · importations importation, using
importations -> · importations importation, namespace
importations -> · importations importation, {
importations -> · importations importation, ID
importations -> · importations importation, void
importations -> · importations importation, bool
importations -> · importations importation, int
importations -> · importations importation, long
importations -> · importations importation, float
importations -> · importations importation, double
importations -> · importations importation, char
importations -> · importations importation, string
importations -> · importations importation, var
importations -> · importations importation, own
importations -> · importations importation, bor
importations -> · importations importation, const
importations -> · importations importation, extern
importations -> · importations importation, class
importations -> · importations importation, (
importations -> · importations importation, this
importations -> · importations importation, new
importations -> · importations importation, LITBOOL
importations -> · importations importation, LITINT
importations -> · importations importation, LITLONG
importations -> · importations importation, LITFLOAT
importations -> · importations importation, LITDOUBLE
importations -> · importations importation, LITCHAR
importations -> · importations importation, LITSTRING
importations -> · importations importation, null
importations -> · importations importation, ++
importations -> · importations importation, --
importations -> · importations importation, break
importations -> · importations importation, return
importations -> · importations importation, delete
importations -> · importations importation, while
importations -> · importations importation, for
importations -> · importations importation, if
importations -> · importations importation, $
importations -> · importation, using
importations -> · importation, namespace
importations -> · importation, {
importations -> · importation, ID
importations -> · importation, void
importations -> · importation, bool
importations -> · importation, int
importations -> · importation, long
importations -> · importation, float
importations -> · importation, double
importations -> · importation, char
importations -> · importation, string
importations -> · importation, var
importations -> · importation, own
importations -> · importation, bor
importations -> · importation, const
importations -> · importation, extern
importations -> · importation, class
importations -> · importation, (
importations -> · importation, this
importations -> · importation, new
importations -> · importation, LITBOOL
importations -> · importation, LITINT
importations -> · importation, LITLONG
importations -> · importation, LITFLOAT
importations -> · importation, LITDOUBLE
importations -> · importation, LITCHAR
importations -> · importation, LITSTRING
importations -> · importation, null
importations -> · importation, ++
importations -> · importation, --
importations -> · importation, break
importations -> · importation, return
importations -> · importation, delete
importations -> · importation, while
importations -> · importation, for
importations -> · importation, if
importations -> · importation, $
importations -> ·, using
importations -> ·, namespace
importations -> ·, {
importations -> ·, ID
importations -> ·, void
importations -> ·, bool
importations -> ·, int
importations -> ·, long
importations -> ·, float
importations -> ·, double
importations -> ·, char
importations -> ·, string
importations -> ·, var
importations -> ·, own
importations -> ·, bor
importations -> ·, const
importations -> ·, extern
importations -> ·, class
importations -> ·, (
importations -> ·, this
importations -> ·, new
importations -> ·, LITBOOL
importations -> ·, LITINT
importations -> ·, LITLONG
importations -> ·, LITFLOAT
importations -> ·, LITDOUBLE
importations -> ·, LITCHAR
importations -> ·, LITSTRING
importations -> ·, null
importations -> ·, ++
importations -> ·, --
importations -> ·, break
importations -> ·, return
importations -> ·, delete
importations -> ·, while
importations -> ·, for
importations -> ·, if
importations -> ·, $
importations -> · importations importation, import
importations -> · importation, import
importations -> ·, import
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, long
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, var
importation -> · import < LITSTRING >, own
importation -> · import < LITSTRING >, bor
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITLONG
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
***EndSet***
***EndState***
***State***
1
I_1
***Set***
importation -> import · < LITSTRING >, using
importation -> import · < LITSTRING >, namespace
importation -> import · < LITSTRING >, {
importation -> import · < LITSTRING >, ID
importation -> import · < LITSTRING >, void
importation -> import · < LITSTRING >, bool
importation -> import · < LITSTRING >, int
importation -> import · < LITSTRING >, long
importation -> import · < LITSTRING >, float
importation -> import · < LITSTRING >, double
importation -> import · < LITSTRING >, char
importation -> import · < LITSTRING >, string
importation -> import · < LITSTRING >, var
importation -> import · < LITSTRING >, own
importation -> import · < LITSTRING >, bor
importation -> import · < LITSTRING >, const
importation -> import · < LITSTRING >, extern
importation -> import · < LITSTRING >, class
importation -> import · < LITSTRING >, (
importation -> import · < LITSTRING >, this
importation -> import · < LITSTRING >, new
importation -> import · < LITSTRING >, LITBOOL
importation -> import · < LITSTRING >, LITINT
importation -> import · < LITSTRING >, LITLONG
importation -> import · < LITSTRING >, LITFLOAT
importation -> import · < LITSTRING >, LITDOUBLE
importation -> import · < LITSTRING >, LITCHAR
importation -> import · < LITSTRING >, LITSTRING
importation -> import · < LITSTRING >, null
importation -> import · < LITSTRING >, ++
importation -> import · < LITSTRING >, --
importation -> import · < LITSTRING >, break
importation -> import · < LITSTRING >, return
importation -> import · < LITSTRING >, delete
importation -> import · < LITSTRING >, while
importation -> import · < LITSTRING >, for
importation -> import · < LITSTRING >, if
importation -> import · < LITSTRING >, $
importation -> import · < LITSTRING >, import
***EndSet***
***EndState***
***State***
2
I_2
***Set***
S' -> S ·, $
***EndSet***
***EndState***
***State***
3
I_3
***Set***
S -> importations · namespaceusings statements, $
importations -> importations · importation, using
importations -> importations · importation, namespace
importations -> importations · importation, {
importations -> importations · importation, ID
importations -> importations · importation, void
importations -> importations · importation, bool
importations -> importations · importation, int
importations -> importations · importation, long
importations -> importations · importation, float
importations -> importations · importation, double
importations -> importations · importation, char
importations -> importations · importation, string
importations -> importations · importation, var
importations -> importations · importation, own
importations -> importations · importation, bor
importations -> importations · importation, const
importations -> importations · importation, extern
importations -> importations · importation, class
importations -> importations · importation, (
importations -> importations · importation, this
importations -> importations · importation, new
importations -> importations · importation, LITBOOL
importations -> importations · importation, LITINT
importations -> importations · importation, LITLONG
importations -> importations · importation, LITFLOAT
importations -> importations · importation, LITDOUBLE
importations -> importations · importation, LITCHAR
importations -> importations · importation, LITSTRING
importations -> importations · importation, null
importations -> importations · importation, ++
importations -> importations · importation, --
importations -> importations · importation, break
importations -> importations · importation, return
importations -> importations · importation, delete
importations -> importations · importation, while
importations -> importations · importation, for
importations -> importations · importation, if
importations -> importations · importation, $
importations -> importations · importation, import
namespaceusings -> · namespaceusings namespaceusing, namespace
namespaceusings -> · namespaceusings namespaceusing, {
namespaceusings -> · namespaceusings namespaceusing, ID
namespaceusings -> · namespaceusings namespaceusing, void
namespaceusings -> · namespaceusings namespaceusing, bool
namespaceusings -> · namespaceusings namespaceusing, int
namespaceusings -> · namespaceusings namespaceusing, long
namespaceusings -> · namespaceusings namespaceusing, float
namespaceusings -> · namespaceusings namespaceusing, double
namespaceusings -> · namespaceusings namespaceusing, char
namespaceusings -> · namespaceusings namespaceusing, string
namespaceusings -> · namespaceusings namespaceusing, var
namespaceusings -> · namespaceusings namespaceusing, own
namespaceusings -> · namespaceusings namespaceusing, bor
namespaceusings -> · namespaceusings namespaceusing, const
namespaceusings -> · namespaceusings namespaceusing, extern
namespaceusings -> · namespaceusings namespaceusing, class
namespaceusings -> · namespaceusings namespaceusing, (
namespaceusings -> · namespaceusings namespaceusing, this
namespaceusings -> · namespaceusings namespaceusing, new
namespaceusings -> · namespaceusings namespaceusing, LITBOOL
namespaceusings -> · namespaceusings namespaceusing, LITINT
namespaceusings -> · namespaceusings namespaceusing, LITLONG
namespaceusings -> · namespaceusings namespaceusing, LITFLOAT
namespaceusings -> · namespaceusings namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusings namespaceusing, LITCHAR
namespaceusings -> · namespaceusings namespaceusing, LITSTRING
namespaceusings -> · namespaceusings namespaceusing, null
namespaceusings -> · namespaceusings namespaceusing, ++
namespaceusings -> · namespaceusings namespaceusing, --
namespaceusings -> · namespaceusings namespaceusing, break
namespaceusings -> · namespaceusings namespaceusing, return
namespaceusings -> · namespaceusings namespaceusing, delete
namespaceusings -> · namespaceusings namespaceusing, while
namespaceusings -> · namespaceusings namespaceusing, for
namespaceusings -> · namespaceusings namespaceusing, if
namespaceusings -> · namespaceusings namespaceusing, $
namespaceusings -> · namespaceusing, namespace
namespaceusings -> · namespaceusing, {
namespaceusings -> · namespaceusing, ID
namespaceusings -> · namespaceusing, void
namespaceusings -> · namespaceusing, bool
namespaceusings -> · namespaceusing, int
namespaceusings -> · namespaceusing, long
namespaceusings -> · namespaceusing, float
namespaceusings -> · namespaceusing, double
namespaceusings -> · namespaceusing, char
namespaceusings -> · namespaceusing, string
namespaceusings -> · namespaceusing, var
namespaceusings -> · namespaceusing, own
namespaceusings -> · namespaceusing, bor
namespaceusings -> · namespaceusing, const
namespaceusings -> · namespaceusing, extern
namespaceusings -> · namespaceusing, class
namespaceusings -> · namespaceusing, (
namespaceusings -> · namespaceusing, this
namespaceusings -> · namespaceusing, new
namespaceusings -> · namespaceusing, LITBOOL
namespaceusings -> · namespaceusing, LITINT
namespaceusings -> · namespaceusing, LITLONG
namespaceusings -> · namespaceusing, LITFLOAT
namespaceusings -> · namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusing, LITCHAR
namespaceusings -> · namespaceusing, LITSTRING
namespaceusings -> · namespaceusing, null
namespaceusings -> · namespaceusing, ++
namespaceusings -> · namespaceusing, --
namespaceusings -> · namespaceusing, break
namespaceusings -> · namespaceusing, return
namespaceusings -> · namespaceusing, delete
namespaceusings -> · namespaceusing, while
namespaceusings -> · namespaceusing, for
namespaceusings -> · namespaceusing, if
namespaceusings -> · namespaceusing, $
namespaceusings -> ·, namespace
namespaceusings -> ·, {
namespaceusings -> ·, ID
namespaceusings -> ·, void
namespaceusings -> ·, bool
namespaceusings -> ·, int
namespaceusings -> ·, long
namespaceusings -> ·, float
namespaceusings -> ·, double
namespaceusings -> ·, char
namespaceusings -> ·, string
namespaceusings -> ·, var
namespaceusings -> ·, own
namespaceusings -> ·, bor
namespaceusings -> ·, const
namespaceusings -> ·, extern
namespaceusings -> ·, class
namespaceusings -> ·, (
namespaceusings -> ·, this
namespaceusings -> ·, new
namespaceusings -> ·, LITBOOL
namespaceusings -> ·, LITINT
namespaceusings -> ·, LITLONG
namespaceusings -> ·, LITFLOAT
namespaceusings -> ·, LITDOUBLE
namespaceusings -> ·, LITCHAR
namespaceusings -> ·, LITSTRING
namespaceusings -> ·, null
namespaceusings -> ·, ++
namespaceusings -> ·, --
namespaceusings -> ·, break
namespaceusings -> ·, return
namespaceusings -> ·, delete
namespaceusings -> ·, while
namespaceusings -> ·, for
namespaceusings -> ·, if
namespaceusings -> ·, $
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, long
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, var
importation -> · import < LITSTRING >, own
importation -> · import < LITSTRING >, bor
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITLONG
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
namespaceusings -> · namespaceusings namespaceusing, using
namespaceusings -> · namespaceusing, using
namespaceusings -> ·, using
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, long
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, var
namespaceusing -> · using ID ;, own
namespaceusing -> · using ID ;, bor
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITLONG
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
***EndSet***
***EndState***
***State***
4
I_4
***Set***
importations -> importation ·, using
importations -> importation ·, namespace
importations -> importation ·, {
importations -> importation ·, ID
importations -> importation ·, void
importations -> importation ·, bool
importations -> importation ·, int
importations -> importation ·, long
importations -> importation ·, float
importations -> importation ·, double
importations -> importation ·, char
importations -> importation ·, string
importations -> importation ·, var
importations -> importation ·, own
importations -> importation ·, bor
importations -> importation ·, const
importations -> importation ·, extern
importations -> importation ·, class
importations -> importation ·, (
importations -> importation ·, this
importations -> importation ·, new
importations -> importation ·, LITBOOL
importations -> importation ·, LITINT
importations -> importation ·, LITLONG
importations -> importation ·, LITFLOAT
importations -> importation ·, LITDOUBLE
importations -> importation ·, LITCHAR
importations -> importation ·, LITSTRING
importations -> importation ·, null
importations -> importation ·, ++
importations -> importation ·, --
importations -> importation ·, break
importations -> importation ·, return
importations -> importation ·, delete
importations -> importation ·, while
importations -> importation ·, for
importations -> importation ·, if
importations -> importation ·, $
importations -> importation ·, import
***EndSet***
***EndState***
***State***
5
I_5
***Set***
importation -> import < · LITSTRING >, using
importation -> import < · LITSTRING >, namespace
importation -> import < · LITSTRING >, {
importation -> import < · LITSTRING >, ID
importation -> import < · LITSTRING >, void
importation -> import < · LITSTRING >, bool
importation -> import < · LITSTRING >, int
importation -> import < · LITSTRING >, long
importation -> import < · LITSTRING >, float
importation -> import < · LITSTRING >, double
importation -> import < · LITSTRING >, char
importation -> import < · LITSTRING >, string
importation -> import < · LITSTRING >, var
importation -> import < · LITSTRING >, own
importation -> import < · LITSTRING >, bor
importation -> import < · LITSTRING >, const
importation -> import < · LITSTRING >, extern
importation -> import < · LITSTRING >, class
importation -> import < · LITSTRING >, (
importation -> import < · LITSTRING >, this
importation -> import < · LITSTRING >, new
importation -> import < · LITSTRING >, LITBOOL
importation -> import < · LITSTRING >, LITINT
importation -> import < · LITSTRING >, LITLONG
importation -> import < · LITSTRING >, LITFLOAT
importation -> import < · LITSTRING >, LITDOUBLE
importation -> import < · LITSTRING >, LITCHAR
importation -> import < · LITSTRING >, LITSTRING
importation -> import < · LITSTRING >, null
importation -> import < · LITSTRING >, ++
importation -> import < · LITSTRING >, --
importation -> import < · LITSTRING >, break
importation -> import < · LITSTRING >, return
importation -> import < · LITSTRING >, delete
importation -> import < · LITSTRING >, while
importation -> import < · LITSTRING >, for
importation -> import < · LITSTRING >, if
importation -> import < · LITSTRING >, $
importation -> import < · LITSTRING >, import
***EndSet***
***EndState***
***State***
6
I_6
***Set***
namespaceusing -> using · ID ;, namespace
namespaceusing -> using · ID ;, {
namespaceusing -> using · ID ;, ID
namespaceusing -> using · ID ;, void
namespaceusing -> using · ID ;, bool
namespaceusing -> using · ID ;, int
namespaceusing -> using · ID ;, long
namespaceusing -> using · ID ;, float
namespaceusing -> using · ID ;, double
namespaceusing -> using · ID ;, char
namespaceusing -> using · ID ;, string
namespaceusing -> using · ID ;, var
namespaceusing -> using · ID ;, own
namespaceusing -> using · ID ;, bor
namespaceusing -> using · ID ;, const
namespaceusing -> using · ID ;, extern
namespaceusing -> using · ID ;, class
namespaceusing -> using · ID ;, (
namespaceusing -> using · ID ;, this
namespaceusing -> using · ID ;, new
namespaceusing -> using · ID ;, LITBOOL
namespaceusing -> using · ID ;, LITINT
namespaceusing -> using · ID ;, LITLONG
namespaceusing -> using · ID ;, LITFLOAT
namespaceusing -> using · ID ;, LITDOUBLE
namespaceusing -> using · ID ;, LITCHAR
namespaceusing -> using · ID ;, LITSTRING
namespaceusing -> using · ID ;, null
namespaceusing -> using · ID ;, ++
namespaceusing -> using · ID ;, --
namespaceusing -> using · ID ;, break
namespaceusing -> using · ID ;, return
namespaceusing -> using · ID ;, delete
namespaceusing -> using · ID ;, while
namespaceusing -> using · ID ;, for
namespaceusing -> using · ID ;, if
namespaceusing -> using · ID ;, $
namespaceusing -> using · ID ;, using
***EndSet***
***EndState***
***State***
7
I_7
***Set***
importations -> importations importation ·, using
importations -> importations importation ·, namespace
importations -> importations importation ·, {
importations -> importations importation ·, ID
importations -> importations importation ·, void
importations -> importations importation ·, bool
importations -> importations importation ·, int
importations -> importations importation ·, long
importations -> importations importation ·, float
importations -> importations importation ·, double
importations -> importations importation ·, char
importations -> importations importation ·, string
importations -> importations importation ·, var
importations -> importations importation ·, own
importations -> importations importation ·, bor
importations -> importations importation ·, const
importations -> importations importation ·, extern
importations -> importations importation ·, class
importations -> importations importation ·, (
importations -> importations importation ·, this
importations -> importations importation ·, new
importations -> importations importation ·, LITBOOL
importations -> importations importation ·, LITINT
importations -> importations importation ·, LITLONG
importations -> importations importation ·, LITFLOAT
importations -> importations importation ·, LITDOUBLE
importations -> importations importation ·, LITCHAR
importations -> importations importation ·, LITSTRING
importations -> importations importation ·, null
importations -> importations importation ·, ++
importations -> importations importation ·, --
importations -> importations importation ·, break
importations -> importations importation ·, return
importations -> importations importation ·, delete
importations -> importations importation ·, while
importations -> importations importation ·, for
importations -> importations importation ·, if
importations -> importations importation ·, $
importations -> importations importation ·, import
***EndSet***
***EndState***
***State***
8
I_8
***Set***
S -> importations namespaceusings · statements, $
namespaceusings -> namespaceusings · namespaceusing, namespace
namespaceusings -> namespaceusings · namespaceusing, {
namespaceusings -> namespaceusings · namespaceusing, ID
namespaceusings -> namespaceusings · namespaceusing, void
namespaceusings -> namespaceusings · namespaceusing, bool
namespaceusings -> namespaceusings · namespaceusing, int
namespaceusings -> namespaceusings · namespaceusing, long
namespaceusings -> namespaceusings · namespaceusing, float
namespaceusings -> namespaceusings · namespaceusing, double
namespaceusings -> namespaceusings · namespaceusing, char
namespaceusings -> namespaceusings · namespaceusing, string
namespaceusings -> namespaceusings · namespaceusing, var
namespaceusings -> namespaceusings · namespaceusing, own
namespaceusings -> namespaceusings · namespaceusing, bor
namespaceusings -> namespaceusings · namespaceusing, const
namespaceusings -> namespaceusings · namespaceusing, extern
namespaceusings -> namespaceusings · namespaceusing, class
namespaceusings -> namespaceusings · namespaceusing, (
namespaceusings -> namespaceusings · namespaceusing, this
namespaceusings -> namespaceusings · namespaceusing, new
namespaceusings -> namespaceusings · namespaceusing, LITBOOL
namespaceusings -> namespaceusings · namespaceusing, LITINT
namespaceusings -> namespaceusings · namespaceusing, LITLONG
namespaceusings -> namespaceusings · namespaceusing, LITFLOAT
namespaceusings -> namespaceusings · namespaceusing, LITDOUBLE
namespaceusings -> namespaceusings · namespaceusing, LITCHAR
namespaceusings -> namespaceusings · namespaceusing, LITSTRING
namespaceusings -> namespaceusings · namespaceusing, null
namespaceusings -> namespaceusings · namespaceusing, ++
namespaceusings -> namespaceusings · namespaceusing, --
namespaceusings -> namespaceusings · namespaceusing, break
namespaceusings -> namespaceusings · namespaceusing, return
namespaceusings -> namespaceusings · namespaceusing, delete
namespaceusings -> namespaceusings · namespaceusing, while
namespaceusings -> namespaceusings · namespaceusing, for
namespaceusings -> namespaceusings · namespaceusing, if
namespaceusings -> namespaceusings · namespaceusing, $
namespaceusings -> namespaceusings · namespaceusing, using
statements -> · statements stmt, $
statements -> · stmt, $
statements -> ·, $
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, long
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, var
namespaceusing -> · using ID ;, own
namespaceusing -> · using ID ;, bor
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITLONG
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
9
I_9
***Set***
namespaceusings -> namespaceusing ·, namespace
namespaceusings -> namespaceusing ·, {
namespaceusings -> namespaceusing ·, ID
namespaceusings -> namespaceusing ·, void
namespaceusings -> namespaceusing ·, bool
namespaceusings -> namespaceusing ·, int
namespaceusings -> namespaceusing ·, long
namespaceusings -> namespaceusing ·, float
namespaceusings -> namespaceusing ·, double
namespaceusings -> namespaceusing ·, char
namespaceusings -> namespaceusing ·, string
namespaceusings -> namespaceusing ·, var
namespaceusings -> namespaceusing ·, own
namespaceusings -> namespaceusing ·, bor
namespaceusings -> namespaceusing ·, const
namespaceusings -> namespaceusing ·, extern
namespaceusings -> namespaceusing ·, class
namespaceusings -> namespaceusing ·, (
namespaceusings -> namespaceusing ·, this
namespaceusings -> namespaceusing ·, new
namespaceusings -> namespaceusing ·, LITBOOL
namespaceusings -> namespaceusing ·, LITINT
namespaceusings -> namespaceusing ·, LITLONG
namespaceusings -> namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusing ·, LITCHAR
namespaceusings -> namespaceusing ·, LITSTRING
namespaceusings -> namespaceusing ·, null
namespaceusings -> namespaceusing ·, ++
namespaceusings -> namespaceusing ·, --
namespaceusings -> namespaceusing ·, break
namespaceusings -> namespaceusing ·, return
namespaceusings -> namespaceusing ·, delete
namespaceusings -> namespaceusing ·, while
namespaceusings -> namespaceusing ·, for
namespaceusings -> namespaceusing ·, if
namespaceusings -> namespaceusing ·, $
namespaceusings -> namespaceusing ·, using
***EndSet***
***EndState***
***State***
10
I_10
***Set***
importation -> import < LITSTRING · >, using
importation -> import < LITSTRING · >, namespace
importation -> import < LITSTRING · >, {
importation -> import < LITSTRING · >, ID
importation -> import < LITSTRING · >, void
importation -> import < LITSTRING · >, bool
importation -> import < LITSTRING · >, int
importation -> import < LITSTRING · >, long
importation -> import < LITSTRING · >, float
importation -> import < LITSTRING · >, double
importation -> import < LITSTRING · >, char
importation -> import < LITSTRING · >, string
importation -> import < LITSTRING · >, var
importation -> import < LITSTRING · >, own
importation -> import < LITSTRING · >, bor
importation -> import < LITSTRING · >, const
importation -> import < LITSTRING · >, extern
importation -> import < LITSTRING · >, class
importation -> import < LITSTRING · >, (
importation -> import < LITSTRING · >, this
importation -> import < LITSTRING · >, new
importation -> import < LITSTRING · >, LITBOOL
importation -> import < LITSTRING · >, LITINT
importation -> import < LITSTRING · >, LITLONG
importation -> import < LITSTRING · >, LITFLOAT
importation -> import < LITSTRING · >, LITDOUBLE
importation -> import < LITSTRING · >, LITCHAR
importation -> import < LITSTRING · >, LITSTRING
importation -> import < LITSTRING · >, null
importation -> import < LITSTRING · >, ++
importation -> import < LITSTRING · >, --
importation -> import < LITSTRING · >, break
importation -> import < LITSTRING · >, return
importation -> import < LITSTRING · >, delete
importation -> import < LITSTRING · >, while
importation -> import < LITSTRING · >, for
importation -> import < LITSTRING · >, if
importation -> import < LITSTRING · >, $
importation -> import < LITSTRING · >, import
***EndSet***
***EndState***
***State***
11
I_11
***Set***
namespaceusing -> using ID · ;, namespace
namespaceusing -> using ID · ;, {
namespaceusing -> using ID · ;, ID
namespaceusing -> using ID · ;, void
namespaceusing -> using ID · ;, bool
namespaceusing -> using ID · ;, int
namespaceusing -> using ID · ;, long
namespaceusing -> using ID · ;, float
namespaceusing -> using ID · ;, double
namespaceusing -> using ID · ;, char
namespaceusing -> using ID · ;, string
namespaceusing -> using ID · ;, var
namespaceusing -> using ID · ;, own
namespaceusing -> using ID · ;, bor
namespaceusing -> using ID · ;, const
namespaceusing -> using ID · ;, extern
namespaceusing -> using ID · ;, class
namespaceusing -> using ID · ;, (
namespaceusing -> using ID · ;, this
namespaceusing -> using ID · ;, new
namespaceusing -> using ID · ;, LITBOOL
namespaceusing -> using ID · ;, LITINT
namespaceusing -> using ID · ;, LITLONG
namespaceusing -> using ID · ;, LITFLOAT
namespaceusing -> using ID · ;, LITDOUBLE
namespaceusing -> using ID · ;, LITCHAR
namespaceusing -> using ID · ;, LITSTRING
namespaceusing -> using ID · ;, null
namespaceusing -> using ID · ;, ++
namespaceusing -> using ID · ;, --
namespaceusing -> using ID · ;, break
namespaceusing -> using ID · ;, return
namespaceusing -> using ID · ;, delete
namespaceusing -> using ID · ;, while
namespaceusing -> using ID · ;, for
namespaceusing -> using ID · ;, if
namespaceusing -> using ID · ;, $
namespaceusing -> using ID · ;, using
***EndSet***
***EndState***
***State***
12
I_12_182_289_849_1192_1332
***Set***
namespaceblock -> namespace · ID { statements }, $
namespaceblock -> namespace · ID { statements }, namespace
namespaceblock -> namespace · ID { statements }, {
namespaceblock -> namespace · ID { statements }, ID
namespaceblock -> namespace · ID { statements }, void
namespaceblock -> namespace · ID { statements }, bool
namespaceblock -> namespace · ID { statements }, int
namespaceblock -> namespace · ID { statements }, long
namespaceblock -> namespace · ID { statements }, float
namespaceblock -> namespace · ID { statements }, double
namespaceblock -> namespace · ID { statements }, char
namespaceblock -> namespace · ID { statements }, string
namespaceblock -> namespace · ID { statements }, var
namespaceblock -> namespace · ID { statements }, own
namespaceblock -> namespace · ID { statements }, bor
namespaceblock -> namespace · ID { statements }, const
namespaceblock -> namespace · ID { statements }, extern
namespaceblock -> namespace · ID { statements }, class
namespaceblock -> namespace · ID { statements }, (
namespaceblock -> namespace · ID { statements }, this
namespaceblock -> namespace · ID { statements }, new
namespaceblock -> namespace · ID { statements }, LITBOOL
namespaceblock -> namespace · ID { statements }, LITINT
namespaceblock -> namespace · ID { statements }, LITLONG
namespaceblock -> namespace · ID { statements }, LITFLOAT
namespaceblock -> namespace · ID { statements }, LITDOUBLE
namespaceblock -> namespace · ID { statements }, LITCHAR
namespaceblock -> namespace · ID { statements }, LITSTRING
namespaceblock -> namespace · ID { statements }, null
namespaceblock -> namespace · ID { statements }, ++
namespaceblock -> namespace · ID { statements }, --
namespaceblock -> namespace · ID { statements }, break
namespaceblock -> namespace · ID { statements }, return
namespaceblock -> namespace · ID { statements }, delete
namespaceblock -> namespace · ID { statements }, while
namespaceblock -> namespace · ID { statements }, for
namespaceblock -> namespace · ID { statements }, if
namespaceblock -> namespace · ID { statements }, }
namespaceblock -> namespace · ID { statements }, &&
namespaceblock -> namespace · ID { statements }, ||
namespaceblock -> namespace · ID { statements }, +
namespaceblock -> namespace · ID { statements }, -
namespaceblock -> namespace · ID { statements }, *
namespaceblock -> namespace · ID { statements }, /
namespaceblock -> namespace · ID { statements }, %
namespaceblock -> namespace · ID { statements }, !
namespaceblock -> namespace · ID { statements }, else
***EndSet***
***EndState***
***State***
13
I_13_183_290_765_850_1193_1333
***Set***
declstmt -> extern · type ID ( params ) ;, $
declstmt -> extern · type ID ( params ) ;, namespace
declstmt -> extern · type ID ( params ) ;, {
declstmt -> extern · type ID ( params ) ;, ID
declstmt -> extern · type ID ( params ) ;, void
declstmt -> extern · type ID ( params ) ;, bool
declstmt -> extern · type ID ( params ) ;, int
declstmt -> extern · type ID ( params ) ;, long
declstmt -> extern · type ID ( params ) ;, float
declstmt -> extern · type ID ( params ) ;, double
declstmt -> extern · type ID ( params ) ;, char
declstmt -> extern · type ID ( params ) ;, string
declstmt -> extern · type ID ( params ) ;, var
declstmt -> extern · type ID ( params ) ;, own
declstmt -> extern · type ID ( params ) ;, bor
declstmt -> extern · type ID ( params ) ;, const
declstmt -> extern · type ID ( params ) ;, extern
declstmt -> extern · type ID ( params ) ;, class
declstmt -> extern · type ID ( params ) ;, (
declstmt -> extern · type ID ( params ) ;, this
declstmt -> extern · type ID ( params ) ;, new
declstmt -> extern · type ID ( params ) ;, LITBOOL
declstmt -> extern · type ID ( params ) ;, LITINT
declstmt -> extern · type ID ( params ) ;, LITLONG
declstmt -> extern · type ID ( params ) ;, LITFLOAT
declstmt -> extern · type ID ( params ) ;, LITDOUBLE
declstmt -> extern · type ID ( params ) ;, LITCHAR
declstmt -> extern · type ID ( params ) ;, LITSTRING
declstmt -> extern · type ID ( params ) ;, null
declstmt -> extern · type ID ( params ) ;, ++
declstmt -> extern · type ID ( params ) ;, --
declstmt -> extern · type ID ( params ) ;, break
declstmt -> extern · type ID ( params ) ;, return
declstmt -> extern · type ID ( params ) ;, delete
declstmt -> extern · type ID ( params ) ;, while
declstmt -> extern · type ID ( params ) ;, for
declstmt -> extern · type ID ( params ) ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern · type ID ( params ) ;, }
declstmt -> extern · type ID ( params ) ;, &&
declstmt -> extern · type ID ( params ) ;, ||
declstmt -> extern · type ID ( params ) ;, +
declstmt -> extern · type ID ( params ) ;, -
declstmt -> extern · type ID ( params ) ;, *
declstmt -> extern · type ID ( params ) ;, /
declstmt -> extern · type ID ( params ) ;, %
declstmt -> extern · type ID ( params ) ;, !
declstmt -> extern · type ID ( params ) ;, else
***EndSet***
***EndState***
***State***
14
I_14_184_291_766_851_1194_1334
***Set***
declstmt -> const · type ID = lit ;, $
declstmt -> const · type ID = lit ;, namespace
declstmt -> const · type ID = lit ;, {
declstmt -> const · type ID = lit ;, ID
declstmt -> const · type ID = lit ;, void
declstmt -> const · type ID = lit ;, bool
declstmt -> const · type ID = lit ;, int
declstmt -> const · type ID = lit ;, long
declstmt -> const · type ID = lit ;, float
declstmt -> const · type ID = lit ;, double
declstmt -> const · type ID = lit ;, char
declstmt -> const · type ID = lit ;, string
declstmt -> const · type ID = lit ;, var
declstmt -> const · type ID = lit ;, own
declstmt -> const · type ID = lit ;, bor
declstmt -> const · type ID = lit ;, const
declstmt -> const · type ID = lit ;, extern
declstmt -> const · type ID = lit ;, class
declstmt -> const · type ID = lit ;, (
declstmt -> const · type ID = lit ;, this
declstmt -> const · type ID = lit ;, new
declstmt -> const · type ID = lit ;, LITBOOL
declstmt -> const · type ID = lit ;, LITINT
declstmt -> const · type ID = lit ;, LITLONG
declstmt -> const · type ID = lit ;, LITFLOAT
declstmt -> const · type ID = lit ;, LITDOUBLE
declstmt -> const · type ID = lit ;, LITCHAR
declstmt -> const · type ID = lit ;, LITSTRING
declstmt -> const · type ID = lit ;, null
declstmt -> const · type ID = lit ;, ++
declstmt -> const · type ID = lit ;, --
declstmt -> const · type ID = lit ;, break
declstmt -> const · type ID = lit ;, return
declstmt -> const · type ID = lit ;, delete
declstmt -> const · type ID = lit ;, while
declstmt -> const · type ID = lit ;, for
declstmt -> const · type ID = lit ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> const · type ID = lit ;, }
declstmt -> const · type ID = lit ;, &&
declstmt -> const · type ID = lit ;, ||
declstmt -> const · type ID = lit ;, +
declstmt -> const · type ID = lit ;, -
declstmt -> const · type ID = lit ;, *
declstmt -> const · type ID = lit ;, /
declstmt -> const · type ID = lit ;, %
declstmt -> const · type ID = lit ;, !
declstmt -> const · type ID = lit ;, else
***EndSet***
***EndState***
***State***
15
I_15
***Set***
tmodf -> own ·, ID
tmodf -> own ·, void
tmodf -> own ·, bool
tmodf -> own ·, int
tmodf -> own ·, long
tmodf -> own ·, float
tmodf -> own ·, double
tmodf -> own ·, char
tmodf -> own ·, string
tmodf -> own ·, var
***EndSet***
***EndState***
***State***
16
I_16
***Set***
tmodf -> bor ·, ID
tmodf -> bor ·, void
tmodf -> bor ·, bool
tmodf -> bor ·, int
tmodf -> bor ·, long
tmodf -> bor ·, float
tmodf -> bor ·, double
tmodf -> bor ·, char
tmodf -> bor ·, string
tmodf -> bor ·, var
***EndSet***
***EndState***
***State***
17
I_17_76_240
***Set***
type -> var ·, ID
type -> var ·, operator
type -> var ·, )
***EndSet***
***EndState***
***State***
18
I_18_185_292_767_852_1195_1335
***Set***
declstmt -> class · ID inherit { declstatements }, $
declstmt -> class · own ID inherit { declstatements }, $
declstmt -> class · ID inherit { declstatements }, namespace
declstmt -> class · own ID inherit { declstatements }, namespace
declstmt -> class · ID inherit { declstatements }, {
declstmt -> class · own ID inherit { declstatements }, {
declstmt -> class · ID inherit { declstatements }, ID
declstmt -> class · own ID inherit { declstatements }, ID
declstmt -> class · ID inherit { declstatements }, void
declstmt -> class · own ID inherit { declstatements }, void
declstmt -> class · ID inherit { declstatements }, bool
declstmt -> class · own ID inherit { declstatements }, bool
declstmt -> class · ID inherit { declstatements }, int
declstmt -> class · own ID inherit { declstatements }, int
declstmt -> class · ID inherit { declstatements }, long
declstmt -> class · own ID inherit { declstatements }, long
declstmt -> class · ID inherit { declstatements }, float
declstmt -> class · own ID inherit { declstatements }, float
declstmt -> class · ID inherit { declstatements }, double
declstmt -> class · own ID inherit { declstatements }, double
declstmt -> class · ID inherit { declstatements }, char
declstmt -> class · own ID inherit { declstatements }, char
declstmt -> class · ID inherit { declstatements }, string
declstmt -> class · own ID inherit { declstatements }, string
declstmt -> class · ID inherit { declstatements }, var
declstmt -> class · own ID inherit { declstatements }, var
declstmt -> class · ID inherit { declstatements }, own
declstmt -> class · own ID inherit { declstatements }, own
declstmt -> class · ID inherit { declstatements }, bor
declstmt -> class · own ID inherit { declstatements }, bor
declstmt -> class · ID inherit { declstatements }, const
declstmt -> class · own ID inherit { declstatements }, const
declstmt -> class · ID inherit { declstatements }, extern
declstmt -> class · own ID inherit { declstatements }, extern
declstmt -> class · ID inherit { declstatements }, class
declstmt -> class · own ID inherit { declstatements }, class
declstmt -> class · ID inherit { declstatements }, (
declstmt -> class · own ID inherit { declstatements }, (
declstmt -> class · ID inherit { declstatements }, this
declstmt -> class · own ID inherit { declstatements }, this
declstmt -> class · ID inherit { declstatements }, new
declstmt -> class · own ID inherit { declstatements }, new
declstmt -> class · ID inherit { declstatements }, LITBOOL
declstmt -> class · own ID inherit { declstatements }, LITBOOL
declstmt -> class · ID inherit { declstatements }, LITINT
declstmt -> class · own ID inherit { declstatements }, LITINT
declstmt -> class · ID inherit { declstatements }, LITLONG
declstmt -> class · own ID inherit { declstatements }, LITLONG
declstmt -> class · ID inherit { declstatements }, LITFLOAT
declstmt -> class · own ID inherit { declstatements }, LITFLOAT
declstmt -> class · ID inherit { declstatements }, LITDOUBLE
declstmt -> class · own ID inherit { declstatements }, LITDOUBLE
declstmt -> class · ID inherit { declstatements }, LITCHAR
declstmt -> class · own ID inherit { declstatements }, LITCHAR
declstmt -> class · ID inherit { declstatements }, LITSTRING
declstmt -> class · own ID inherit { declstatements }, LITSTRING
declstmt -> class · ID inherit { declstatements }, null
declstmt -> class · own ID inherit { declstatements }, null
declstmt -> class · ID inherit { declstatements }, ++
declstmt -> class · own ID inherit { declstatements }, ++
declstmt -> class · ID inherit { declstatements }, --
declstmt -> class · own ID inherit { declstatements }, --
declstmt -> class · ID inherit { declstatements }, break
declstmt -> class · own ID inherit { declstatements }, break
declstmt -> class · ID inherit { declstatements }, return
declstmt -> class · own ID inherit { declstatements }, return
declstmt -> class · ID inherit { declstatements }, delete
declstmt -> class · own ID inherit { declstatements }, delete
declstmt -> class · ID inherit { declstatements }, while
declstmt -> class · own ID inherit { declstatements }, while
declstmt -> class · ID inherit { declstatements }, for
declstmt -> class · own ID inherit { declstatements }, for
declstmt -> class · ID inherit { declstatements }, if
declstmt -> class · own ID inherit { declstatements }, if
declstmt -> class · ID inherit { declstatements }, }
declstmt -> class · own ID inherit { declstatements }, }
declstmt -> class · ID inherit { declstatements }, &&
declstmt -> class · own ID inherit { declstatements }, &&
declstmt -> class · ID inherit { declstatements }, ||
declstmt -> class · own ID inherit { declstatements }, ||
declstmt -> class · ID inherit { declstatements }, +
declstmt -> class · own ID inherit { declstatements }, +
declstmt -> class · ID inherit { declstatements }, -
declstmt -> class · own ID inherit { declstatements }, -
declstmt -> class · ID inherit { declstatements }, *
declstmt -> class · own ID inherit { declstatements }, *
declstmt -> class · ID inherit { declstatements }, /
declstmt -> class · own ID inherit { declstatements }, /
declstmt -> class · ID inherit { declstatements }, %
declstmt -> class · own ID inherit { declstatements }, %
declstmt -> class · ID inherit { declstatements }, !
declstmt -> class · own ID inherit { declstatements }, !
declstmt -> class · ID inherit { declstatements }, else
declstmt -> class · own ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
19
I_19_77_96_241
***Set***
primitive -> void ·, ID
primitive -> void ·, operator
primitive -> void ·, [
primitive -> void ·, )
***EndSet***
***EndState***
***State***
20
I_20_78_97_242
***Set***
primitive -> bool ·, ID
primitive -> bool ·, operator
primitive -> bool ·, [
primitive -> bool ·, )
***EndSet***
***EndState***
***State***
21
I_21_79_98_243
***Set***
primitive -> int ·, ID
primitive -> int ·, operator
primitive -> int ·, [
primitive -> int ·, )
***EndSet***
***EndState***
***State***
22
I_22_80_99_244
***Set***
primitive -> long ·, ID
primitive -> long ·, operator
primitive -> long ·, [
primitive -> long ·, )
***EndSet***
***EndState***
***State***
23
I_23_81_100_245
***Set***
primitive -> float ·, ID
primitive -> float ·, operator
primitive -> float ·, [
primitive -> float ·, )
***EndSet***
***EndState***
***State***
24
I_24_82_101_246
***Set***
primitive -> double ·, ID
primitive -> double ·, operator
primitive -> double ·, [
primitive -> double ·, )
***EndSet***
***EndState***
***State***
25
I_25_83_102_247
***Set***
primitive -> char ·, ID
primitive -> char ·, operator
primitive -> char ·, [
primitive -> char ·, )
***EndSet***
***EndState***
***State***
26
I_26_84_103_248
***Set***
primitive -> string ·, ID
primitive -> string ·, operator
primitive -> string ·, [
primitive -> string ·, )
***EndSet***
***EndState***
***State***
27
I_27_109_148_371_406_478_512_580_614_755_945_979_1061
***Set***
lit -> null ·, .
lit -> null ·, ;
lit -> null ·, &&
lit -> null ·, ||
lit -> null ·, >
lit -> null ·, <
lit -> null ·, >=
lit -> null ·, <=
lit -> null ·, ==
lit -> null ·, !=
lit -> null ·, +
lit -> null ·, -
lit -> null ·, *
lit -> null ·, /
lit -> null ·, %
lit -> null ·, )
lit -> null ·, ,
lit -> null ·, ]
***EndSet***
***EndState***
***State***
28
I_28_110_149_372_407_479_513_581_615_946_980_1062_1124
***Set***
newobj -> new · ID ( ), ;
newobj -> new · ID ( ), .
newarr -> new · stypeBracket, .
stypeBracket -> · idBracket, .
stypeBracket -> · primitiveBracket, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> · primitive [ optidx ], .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
newarr -> new · stypeBracket, ;
newobj -> new · ID ( ), &&
newarr -> new · stypeBracket, &&
newobj -> new · ID ( ), ||
newarr -> new · stypeBracket, ||
newobj -> new · ID ( ), >
newarr -> new · stypeBracket, >
newobj -> new · ID ( ), <
newarr -> new · stypeBracket, <
newobj -> new · ID ( ), >=
newarr -> new · stypeBracket, >=
newobj -> new · ID ( ), <=
newarr -> new · stypeBracket, <=
newobj -> new · ID ( ), ==
newarr -> new · stypeBracket, ==
newobj -> new · ID ( ), !=
newarr -> new · stypeBracket, !=
newobj -> new · ID ( ), +
newarr -> new · stypeBracket, +
newobj -> new · ID ( ), -
newarr -> new · stypeBracket, -
newobj -> new · ID ( ), *
newarr -> new · stypeBracket, *
newobj -> new · ID ( ), /
newarr -> new · stypeBracket, /
newobj -> new · ID ( ), %
newarr -> new · stypeBracket, %
stypeBracket -> · idBracket, ;
stypeBracket -> · primitiveBracket, ;
stypeBracket -> · idBracket, &&
stypeBracket -> · primitiveBracket, &&
stypeBracket -> · idBracket, ||
stypeBracket -> · primitiveBracket, ||
stypeBracket -> · idBracket, >
stypeBracket -> · primitiveBracket, >
stypeBracket -> · idBracket, <
stypeBracket -> · primitiveBracket, <
stypeBracket -> · idBracket, >=
stypeBracket -> · primitiveBracket, >=
stypeBracket -> · idBracket, <=
stypeBracket -> · primitiveBracket, <=
stypeBracket -> · idBracket, ==
stypeBracket -> · primitiveBracket, ==
stypeBracket -> · idBracket, !=
stypeBracket -> · primitiveBracket, !=
stypeBracket -> · idBracket, +
stypeBracket -> · primitiveBracket, +
stypeBracket -> · idBracket, -
stypeBracket -> · primitiveBracket, -
stypeBracket -> · idBracket, *
stypeBracket -> · primitiveBracket, *
stypeBracket -> · idBracket, /
stypeBracket -> · primitiveBracket, /
stypeBracket -> · idBracket, %
stypeBracket -> · primitiveBracket, %
idBracket -> · ID [ optidx ], ;
primitiveBracket -> · primitive [ optidx ], ;
idBracket -> · ID [ optidx ], &&
primitiveBracket -> · primitive [ optidx ], &&
idBracket -> · ID [ optidx ], ||
primitiveBracket -> · primitive [ optidx ], ||
idBracket -> · ID [ optidx ], >
primitiveBracket -> · primitive [ optidx ], >
idBracket -> · ID [ optidx ], <
primitiveBracket -> · primitive [ optidx ], <
idBracket -> · ID [ optidx ], >=
primitiveBracket -> · primitive [ optidx ], >=
idBracket -> · ID [ optidx ], <=
primitiveBracket -> · primitive [ optidx ], <=
idBracket -> · ID [ optidx ], ==
primitiveBracket -> · primitive [ optidx ], ==
idBracket -> · ID [ optidx ], !=
primitiveBracket -> · primitive [ optidx ], !=
idBracket -> · ID [ optidx ], +
primitiveBracket -> · primitive [ optidx ], +
idBracket -> · ID [ optidx ], -
primitiveBracket -> · primitive [ optidx ], -
idBracket -> · ID [ optidx ], *
primitiveBracket -> · primitive [ optidx ], *
idBracket -> · ID [ optidx ], /
primitiveBracket -> · primitive [ optidx ], /
idBracket -> · ID [ optidx ], %
primitiveBracket -> · primitive [ optidx ], %
newobj -> new · ID ( ), )
newarr -> new · stypeBracket, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
newobj -> new · ID ( ), ,
newarr -> new · stypeBracket, ,
stypeBracket -> · idBracket, ,
stypeBracket -> · primitiveBracket, ,
idBracket -> · ID [ optidx ], ,
primitiveBracket -> · primitive [ optidx ], ,
newobj -> new · ID ( ), ]
newarr -> new · stypeBracket, ]
stypeBracket -> · idBracket, ]
stypeBracket -> · primitiveBracket, ]
idBracket -> · ID [ optidx ], ]
primitiveBracket -> · primitive [ optidx ], ]
***EndSet***
***EndState***
***State***
29
I_29_186_293_853_1196_1336
***Set***
stmt -> delete · expr ;, $
stmt -> delete · expr ;, namespace
stmt -> delete · expr ;, {
stmt -> delete · expr ;, ID
stmt -> delete · expr ;, void
stmt -> delete · expr ;, bool
stmt -> delete · expr ;, int
stmt -> delete · expr ;, long
stmt -> delete · expr ;, float
stmt -> delete · expr ;, double
stmt -> delete · expr ;, char
stmt -> delete · expr ;, string
stmt -> delete · expr ;, var
stmt -> delete · expr ;, own
stmt -> delete · expr ;, bor
stmt -> delete · expr ;, const
stmt -> delete · expr ;, extern
stmt -> delete · expr ;, class
stmt -> delete · expr ;, (
stmt -> delete · expr ;, this
stmt -> delete · expr ;, new
stmt -> delete · expr ;, LITBOOL
stmt -> delete · expr ;, LITINT
stmt -> delete · expr ;, LITLONG
stmt -> delete · expr ;, LITFLOAT
stmt -> delete · expr ;, LITDOUBLE
stmt -> delete · expr ;, LITCHAR
stmt -> delete · expr ;, LITSTRING
stmt -> delete · expr ;, null
stmt -> delete · expr ;, ++
stmt -> delete · expr ;, --
stmt -> delete · expr ;, break
stmt -> delete · expr ;, return
stmt -> delete · expr ;, delete
stmt -> delete · expr ;, while
stmt -> delete · expr ;, for
stmt -> delete · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> delete · expr ;, }
stmt -> delete · expr ;, &&
stmt -> delete · expr ;, ||
stmt -> delete · expr ;, +
stmt -> delete · expr ;, -
stmt -> delete · expr ;, *
stmt -> delete · expr ;, /
stmt -> delete · expr ;, %
stmt -> delete · expr ;, !
stmt -> delete · expr ;, else
***EndSet***
***EndState***
***State***
30
I_30_187_294_854_1197_1337
***Set***
stmt -> while · ( expr ) stmt, $
stmt -> while · ( expr ) stmt, namespace
stmt -> while · ( expr ) stmt, {
stmt -> while · ( expr ) stmt, ID
stmt -> while · ( expr ) stmt, void
stmt -> while · ( expr ) stmt, bool
stmt -> while · ( expr ) stmt, int
stmt -> while · ( expr ) stmt, long
stmt -> while · ( expr ) stmt, float
stmt -> while · ( expr ) stmt, double
stmt -> while · ( expr ) stmt, char
stmt -> while · ( expr ) stmt, string
stmt -> while · ( expr ) stmt, var
stmt -> while · ( expr ) stmt, own
stmt -> while · ( expr ) stmt, bor
stmt -> while · ( expr ) stmt, const
stmt -> while · ( expr ) stmt, extern
stmt -> while · ( expr ) stmt, class
stmt -> while · ( expr ) stmt, (
stmt -> while · ( expr ) stmt, this
stmt -> while · ( expr ) stmt, new
stmt -> while · ( expr ) stmt, LITBOOL
stmt -> while · ( expr ) stmt, LITINT
stmt -> while · ( expr ) stmt, LITLONG
stmt -> while · ( expr ) stmt, LITFLOAT
stmt -> while · ( expr ) stmt, LITDOUBLE
stmt -> while · ( expr ) stmt, LITCHAR
stmt -> while · ( expr ) stmt, LITSTRING
stmt -> while · ( expr ) stmt, null
stmt -> while · ( expr ) stmt, ++
stmt -> while · ( expr ) stmt, --
stmt -> while · ( expr ) stmt, break
stmt -> while · ( expr ) stmt, return
stmt -> while · ( expr ) stmt, delete
stmt -> while · ( expr ) stmt, while
stmt -> while · ( expr ) stmt, for
stmt -> while · ( expr ) stmt, if
stmt -> while · ( expr ) stmt, }
stmt -> while · ( expr ) stmt, &&
stmt -> while · ( expr ) stmt, ||
stmt -> while · ( expr ) stmt, +
stmt -> while · ( expr ) stmt, -
stmt -> while · ( expr ) stmt, *
stmt -> while · ( expr ) stmt, /
stmt -> while · ( expr ) stmt, %
stmt -> while · ( expr ) stmt, !
stmt -> while · ( expr ) stmt, else
***EndSet***
***EndState***
***State***
31
I_31_188_295_855_1198_1338
***Set***
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
32
I_32_189_296_856_1199_1339
***Set***
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, long
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, var
stmt -> if · ( expr ) stmt elifclauselist elseclause, own
stmt -> if · ( expr ) stmt elifclauselist elseclause, bor
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
33
I_33_190_297_857_1200_1340
***Set***
stmt -> break · ;, $
stmt -> break · ;, namespace
stmt -> break · ;, {
stmt -> break · ;, ID
stmt -> break · ;, void
stmt -> break · ;, bool
stmt -> break · ;, int
stmt -> break · ;, long
stmt -> break · ;, float
stmt -> break · ;, double
stmt -> break · ;, char
stmt -> break · ;, string
stmt -> break · ;, var
stmt -> break · ;, own
stmt -> break · ;, bor
stmt -> break · ;, const
stmt -> break · ;, extern
stmt -> break · ;, class
stmt -> break · ;, (
stmt -> break · ;, this
stmt -> break · ;, new
stmt -> break · ;, LITBOOL
stmt -> break · ;, LITINT
stmt -> break · ;, LITLONG
stmt -> break · ;, LITFLOAT
stmt -> break · ;, LITDOUBLE
stmt -> break · ;, LITCHAR
stmt -> break · ;, LITSTRING
stmt -> break · ;, null
stmt -> break · ;, ++
stmt -> break · ;, --
stmt -> break · ;, break
stmt -> break · ;, return
stmt -> break · ;, delete
stmt -> break · ;, while
stmt -> break · ;, for
stmt -> break · ;, if
stmt -> break · ;, }
stmt -> break · ;, &&
stmt -> break · ;, ||
stmt -> break · ;, +
stmt -> break · ;, -
stmt -> break · ;, *
stmt -> break · ;, /
stmt -> break · ;, %
stmt -> break · ;, !
stmt -> break · ;, else
***EndSet***
***EndState***
***State***
34
I_34_191_298_858_1201_1341
***Set***
stmt -> return · expr ;, $
stmt -> return · ;, $
stmt -> return · expr ;, namespace
stmt -> return · ;, namespace
stmt -> return · expr ;, {
stmt -> return · ;, {
stmt -> return · expr ;, ID
stmt -> return · ;, ID
stmt -> return · expr ;, void
stmt -> return · ;, void
stmt -> return · expr ;, bool
stmt -> return · ;, bool
stmt -> return · expr ;, int
stmt -> return · ;, int
stmt -> return · expr ;, long
stmt -> return · ;, long
stmt -> return · expr ;, float
stmt -> return · ;, float
stmt -> return · expr ;, double
stmt -> return · ;, double
stmt -> return · expr ;, char
stmt -> return · ;, char
stmt -> return · expr ;, string
stmt -> return · ;, string
stmt -> return · expr ;, var
stmt -> return · ;, var
stmt -> return · expr ;, own
stmt -> return · ;, own
stmt -> return · expr ;, bor
stmt -> return · ;, bor
stmt -> return · expr ;, const
stmt -> return · ;, const
stmt -> return · expr ;, extern
stmt -> return · ;, extern
stmt -> return · expr ;, class
stmt -> return · ;, class
stmt -> return · expr ;, (
stmt -> return · ;, (
stmt -> return · expr ;, this
stmt -> return · ;, this
stmt -> return · expr ;, new
stmt -> return · ;, new
stmt -> return · expr ;, LITBOOL
stmt -> return · ;, LITBOOL
stmt -> return · expr ;, LITINT
stmt -> return · ;, LITINT
stmt -> return · expr ;, LITLONG
stmt -> return · ;, LITLONG
stmt -> return · expr ;, LITFLOAT
stmt -> return · ;, LITFLOAT
stmt -> return · expr ;, LITDOUBLE
stmt -> return · ;, LITDOUBLE
stmt -> return · expr ;, LITCHAR
stmt -> return · ;, LITCHAR
stmt -> return · expr ;, LITSTRING
stmt -> return · ;, LITSTRING
stmt -> return · expr ;, null
stmt -> return · ;, null
stmt -> return · expr ;, ++
stmt -> return · ;, ++
stmt -> return · expr ;, --
stmt -> return · ;, --
stmt -> return · expr ;, break
stmt -> return · ;, break
stmt -> return · expr ;, return
stmt -> return · ;, return
stmt -> return · expr ;, delete
stmt -> return · ;, delete
stmt -> return · expr ;, while
stmt -> return · ;, while
stmt -> return · expr ;, for
stmt -> return · ;, for
stmt -> return · expr ;, if
stmt -> return · ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> return · expr ;, }
stmt -> return · ;, }
stmt -> return · expr ;, &&
stmt -> return · expr ;, ||
stmt -> return · expr ;, +
stmt -> return · expr ;, -
stmt -> return · expr ;, *
stmt -> return · expr ;, /
stmt -> return · expr ;, %
stmt -> return · expr ;, !
stmt -> return · ;, &&
stmt -> return · ;, ||
stmt -> return · ;, +
stmt -> return · ;, -
stmt -> return · ;, *
stmt -> return · ;, /
stmt -> return · ;, %
stmt -> return · ;, !
stmt -> return · expr ;, else
stmt -> return · ;, else
***EndSet***
***EndState***
***State***
35
I_35_111_150_373_408_480_514_582_616_947_981_1063
***Set***
primary -> this ·, .
primary -> this ·, ;
primary -> this ·, &&
primary -> this ·, ||
primary -> this ·, >
primary -> this ·, <
primary -> this ·, >=
primary -> this ·, <=
primary -> this ·, ==
primary -> this ·, !=
primary -> this ·, +
primary -> this ·, -
primary -> this ·, *
primary -> this ·, /
primary -> this ·, %
primary -> this ·, )
primary -> this ·, ,
primary -> this ·, ]
***EndSet***
***EndState***
***State***
36
I_36
***Set***
primary -> ( · expr ), .
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
37
I_37_192_299_859_1202_1342
***Set***
statementblock -> { · statements }, $
statementblock -> { · statements }, namespace
statementblock -> { · statements }, {
statementblock -> { · statements }, ID
statementblock -> { · statements }, void
statementblock -> { · statements }, bool
statementblock -> { · statements }, int
statementblock -> { · statements }, long
statementblock -> { · statements }, float
statementblock -> { · statements }, double
statementblock -> { · statements }, char
statementblock -> { · statements }, string
statementblock -> { · statements }, var
statementblock -> { · statements }, own
statementblock -> { · statements }, bor
statementblock -> { · statements }, const
statementblock -> { · statements }, extern
statementblock -> { · statements }, class
statementblock -> { · statements }, (
statementblock -> { · statements }, this
statementblock -> { · statements }, new
statementblock -> { · statements }, LITBOOL
statementblock -> { · statements }, LITINT
statementblock -> { · statements }, LITLONG
statementblock -> { · statements }, LITFLOAT
statementblock -> { · statements }, LITDOUBLE
statementblock -> { · statements }, LITCHAR
statementblock -> { · statements }, LITSTRING
statementblock -> { · statements }, null
statementblock -> { · statements }, ++
statementblock -> { · statements }, --
statementblock -> { · statements }, break
statementblock -> { · statements }, return
statementblock -> { · statements }, delete
statementblock -> { · statements }, while
statementblock -> { · statements }, for
statementblock -> { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { · statements }, }
statementblock -> { · statements }, &&
statementblock -> { · statements }, ||
statementblock -> { · statements }, +
statementblock -> { · statements }, -
statementblock -> { · statements }, *
statementblock -> { · statements }, /
statementblock -> { · statements }, %
statementblock -> { · statements }, !
statementblock -> { · statements }, else
***EndSet***
***EndState***
***State***
38
I_38_113_152_375_410_482_516_584_618_949_983_1065_1125
***Set***
incdec -> -- · ID, ;
incdec -> -- · ID, &&
incdec -> -- · ID, ||
incdec -> -- · ID, >
incdec -> -- · ID, <
incdec -> -- · ID, >=
incdec -> -- · ID, <=
incdec -> -- · ID, ==
incdec -> -- · ID, !=
incdec -> -- · ID, +
incdec -> -- · ID, -
incdec -> -- · ID, *
incdec -> -- · ID, /
incdec -> -- · ID, %
incdec -> -- · ID, )
incdec -> -- · ID, ,
incdec -> -- · ID, ]
***EndSet***
***EndState***
***State***
39
I_39_114_153_376_411_483_517_585_619_950_984_1066_1126
***Set***
incdec -> ++ · ID, ;
incdec -> ++ · ID, &&
incdec -> ++ · ID, ||
incdec -> ++ · ID, >
incdec -> ++ · ID, <
incdec -> ++ · ID, >=
incdec -> ++ · ID, <=
incdec -> ++ · ID, ==
incdec -> ++ · ID, !=
incdec -> ++ · ID, +
incdec -> ++ · ID, -
incdec -> ++ · ID, *
incdec -> ++ · ID, /
incdec -> ++ · ID, %
incdec -> ++ · ID, )
incdec -> ++ · ID, ,
incdec -> ++ · ID, ]
***EndSet***
***EndState***
***State***
40
I_40_117_156_379_414_486_520_588_622_756_953_987_1069
***Set***
lit -> LITBOOL ·, .
lit -> LITBOOL ·, ;
lit -> LITBOOL ·, &&
lit -> LITBOOL ·, ||
lit -> LITBOOL ·, >
lit -> LITBOOL ·, <
lit -> LITBOOL ·, >=
lit -> LITBOOL ·, <=
lit -> LITBOOL ·, ==
lit -> LITBOOL ·, !=
lit -> LITBOOL ·, +
lit -> LITBOOL ·, -
lit -> LITBOOL ·, *
lit -> LITBOOL ·, /
lit -> LITBOOL ·, %
lit -> LITBOOL ·, )
lit -> LITBOOL ·, ,
lit -> LITBOOL ·, ]
***EndSet***
***EndState***
***State***
41
I_41_118_157_380_415_487_521_589_623_757_954_988_1070
***Set***
lit -> LITINT ·, .
lit -> LITINT ·, ;
lit -> LITINT ·, &&
lit -> LITINT ·, ||
lit -> LITINT ·, >
lit -> LITINT ·, <
lit -> LITINT ·, >=
lit -> LITINT ·, <=
lit -> LITINT ·, ==
lit -> LITINT ·, !=
lit -> LITINT ·, +
lit -> LITINT ·, -
lit -> LITINT ·, *
lit -> LITINT ·, /
lit -> LITINT ·, %
lit -> LITINT ·, )
lit -> LITINT ·, ,
lit -> LITINT ·, ]
***EndSet***
***EndState***
***State***
42
I_42_119_158_381_416_488_522_590_624_758_955_989_1071
***Set***
lit -> LITLONG ·, .
lit -> LITLONG ·, ;
lit -> LITLONG ·, &&
lit -> LITLONG ·, ||
lit -> LITLONG ·, >
lit -> LITLONG ·, <
lit -> LITLONG ·, >=
lit -> LITLONG ·, <=
lit -> LITLONG ·, ==
lit -> LITLONG ·, !=
lit -> LITLONG ·, +
lit -> LITLONG ·, -
lit -> LITLONG ·, *
lit -> LITLONG ·, /
lit -> LITLONG ·, %
lit -> LITLONG ·, )
lit -> LITLONG ·, ,
lit -> LITLONG ·, ]
***EndSet***
***EndState***
***State***
43
I_43_120_159_382_417_489_523_591_625_759_956_990_1072
***Set***
lit -> LITFLOAT ·, .
lit -> LITFLOAT ·, ;
lit -> LITFLOAT ·, &&
lit -> LITFLOAT ·, ||
lit -> LITFLOAT ·, >
lit -> LITFLOAT ·, <
lit -> LITFLOAT ·, >=
lit -> LITFLOAT ·, <=
lit -> LITFLOAT ·, ==
lit -> LITFLOAT ·, !=
lit -> LITFLOAT ·, +
lit -> LITFLOAT ·, -
lit -> LITFLOAT ·, *
lit -> LITFLOAT ·, /
lit -> LITFLOAT ·, %
lit -> LITFLOAT ·, )
lit -> LITFLOAT ·, ,
lit -> LITFLOAT ·, ]
***EndSet***
***EndState***
***State***
44
I_44_121_160_383_418_490_524_592_626_760_957_991_1073
***Set***
lit -> LITDOUBLE ·, .
lit -> LITDOUBLE ·, ;
lit -> LITDOUBLE ·, &&
lit -> LITDOUBLE ·, ||
lit -> LITDOUBLE ·, >
lit -> LITDOUBLE ·, <
lit -> LITDOUBLE ·, >=
lit -> LITDOUBLE ·, <=
lit -> LITDOUBLE ·, ==
lit -> LITDOUBLE ·, !=
lit -> LITDOUBLE ·, +
lit -> LITDOUBLE ·, -
lit -> LITDOUBLE ·, *
lit -> LITDOUBLE ·, /
lit -> LITDOUBLE ·, %
lit -> LITDOUBLE ·, )
lit -> LITDOUBLE ·, ,
lit -> LITDOUBLE ·, ]
***EndSet***
***EndState***
***State***
45
I_45_122_161_384_419_491_525_593_627_761_958_992_1074
***Set***
lit -> LITCHAR ·, .
lit -> LITCHAR ·, ;
lit -> LITCHAR ·, &&
lit -> LITCHAR ·, ||
lit -> LITCHAR ·, >
lit -> LITCHAR ·, <
lit -> LITCHAR ·, >=
lit -> LITCHAR ·, <=
lit -> LITCHAR ·, ==
lit -> LITCHAR ·, !=
lit -> LITCHAR ·, +
lit -> LITCHAR ·, -
lit -> LITCHAR ·, *
lit -> LITCHAR ·, /
lit -> LITCHAR ·, %
lit -> LITCHAR ·, )
lit -> LITCHAR ·, ,
lit -> LITCHAR ·, ]
***EndSet***
***EndState***
***State***
46
I_46_123_162_385_420_492_526_594_628_762_959_993_1075
***Set***
lit -> LITSTRING ·, .
lit -> LITSTRING ·, ;
lit -> LITSTRING ·, &&
lit -> LITSTRING ·, ||
lit -> LITSTRING ·, >
lit -> LITSTRING ·, <
lit -> LITSTRING ·, >=
lit -> LITSTRING ·, <=
lit -> LITSTRING ·, ==
lit -> LITSTRING ·, !=
lit -> LITSTRING ·, +
lit -> LITSTRING ·, -
lit -> LITSTRING ·, *
lit -> LITSTRING ·, /
lit -> LITSTRING ·, %
lit -> LITSTRING ·, )
lit -> LITSTRING ·, ,
lit -> LITSTRING ·, ]
***EndSet***
***EndState***
***State***
47
I_47_249
***Set***
call -> ID · ( args ), ;
incdec -> ID · ++, ;
incdec -> ID · --, ;
stype -> ID ·, ID
stype -> ID ·, operator
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], ID
idBracket -> ID · [ optidx ], operator
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
stype -> ID ·, )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), )
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
***EndSet***
***EndState***
***State***
48
I_48
***Set***
namespaceusings -> namespaceusings namespaceusing ·, namespace
namespaceusings -> namespaceusings namespaceusing ·, {
namespaceusings -> namespaceusings namespaceusing ·, ID
namespaceusings -> namespaceusings namespaceusing ·, void
namespaceusings -> namespaceusings namespaceusing ·, bool
namespaceusings -> namespaceusings namespaceusing ·, int
namespaceusings -> namespaceusings namespaceusing ·, long
namespaceusings -> namespaceusings namespaceusing ·, float
namespaceusings -> namespaceusings namespaceusing ·, double
namespaceusings -> namespaceusings namespaceusing ·, char
namespaceusings -> namespaceusings namespaceusing ·, string
namespaceusings -> namespaceusings namespaceusing ·, var
namespaceusings -> namespaceusings namespaceusing ·, own
namespaceusings -> namespaceusings namespaceusing ·, bor
namespaceusings -> namespaceusings namespaceusing ·, const
namespaceusings -> namespaceusings namespaceusing ·, extern
namespaceusings -> namespaceusings namespaceusing ·, class
namespaceusings -> namespaceusings namespaceusing ·, (
namespaceusings -> namespaceusings namespaceusing ·, this
namespaceusings -> namespaceusings namespaceusing ·, new
namespaceusings -> namespaceusings namespaceusing ·, LITBOOL
namespaceusings -> namespaceusings namespaceusing ·, LITINT
namespaceusings -> namespaceusings namespaceusing ·, LITLONG
namespaceusings -> namespaceusings namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusings namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusings namespaceusing ·, LITCHAR
namespaceusings -> namespaceusings namespaceusing ·, LITSTRING
namespaceusings -> namespaceusings namespaceusing ·, null
namespaceusings -> namespaceusings namespaceusing ·, ++
namespaceusings -> namespaceusings namespaceusing ·, --
namespaceusings -> namespaceusings namespaceusing ·, break
namespaceusings -> namespaceusings namespaceusing ·, return
namespaceusings -> namespaceusings namespaceusing ·, delete
namespaceusings -> namespaceusings namespaceusing ·, while
namespaceusings -> namespaceusings namespaceusing ·, for
namespaceusings -> namespaceusings namespaceusing ·, if
namespaceusings -> namespaceusings namespaceusing ·, $
namespaceusings -> namespaceusings namespaceusing ·, using
***EndSet***
***EndState***
***State***
49
I_49
***Set***
S -> importations namespaceusings statements ·, $
statements -> statements · stmt, $
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
50
I_50_194_300_860_1203_1343
***Set***
stmt -> namespaceblock ·, $
stmt -> namespaceblock ·, namespace
stmt -> namespaceblock ·, {
stmt -> namespaceblock ·, ID
stmt -> namespaceblock ·, void
stmt -> namespaceblock ·, bool
stmt -> namespaceblock ·, int
stmt -> namespaceblock ·, long
stmt -> namespaceblock ·, float
stmt -> namespaceblock ·, double
stmt -> namespaceblock ·, char
stmt -> namespaceblock ·, string
stmt -> namespaceblock ·, var
stmt -> namespaceblock ·, own
stmt -> namespaceblock ·, bor
stmt -> namespaceblock ·, const
stmt -> namespaceblock ·, extern
stmt -> namespaceblock ·, class
stmt -> namespaceblock ·, (
stmt -> namespaceblock ·, this
stmt -> namespaceblock ·, new
stmt -> namespaceblock ·, LITBOOL
stmt -> namespaceblock ·, LITINT
stmt -> namespaceblock ·, LITLONG
stmt -> namespaceblock ·, LITFLOAT
stmt -> namespaceblock ·, LITDOUBLE
stmt -> namespaceblock ·, LITCHAR
stmt -> namespaceblock ·, LITSTRING
stmt -> namespaceblock ·, null
stmt -> namespaceblock ·, ++
stmt -> namespaceblock ·, --
stmt -> namespaceblock ·, break
stmt -> namespaceblock ·, return
stmt -> namespaceblock ·, delete
stmt -> namespaceblock ·, while
stmt -> namespaceblock ·, for
stmt -> namespaceblock ·, if
stmt -> namespaceblock ·, }
stmt -> namespaceblock ·, &&
stmt -> namespaceblock ·, ||
stmt -> namespaceblock ·, +
stmt -> namespaceblock ·, -
stmt -> namespaceblock ·, *
stmt -> namespaceblock ·, /
stmt -> namespaceblock ·, %
stmt -> namespaceblock ·, !
stmt -> namespaceblock ·, else
***EndSet***
***EndState***
***State***
51
I_51_195_301_861_1204_1344
***Set***
stmt -> statementblock ·, $
stmt -> statementblock ·, namespace
stmt -> statementblock ·, {
stmt -> statementblock ·, ID
stmt -> statementblock ·, void
stmt -> statementblock ·, bool
stmt -> statementblock ·, int
stmt -> statementblock ·, long
stmt -> statementblock ·, float
stmt -> statementblock ·, double
stmt -> statementblock ·, char
stmt -> statementblock ·, string
stmt -> statementblock ·, var
stmt -> statementblock ·, own
stmt -> statementblock ·, bor
stmt -> statementblock ·, const
stmt -> statementblock ·, extern
stmt -> statementblock ·, class
stmt -> statementblock ·, (
stmt -> statementblock ·, this
stmt -> statementblock ·, new
stmt -> statementblock ·, LITBOOL
stmt -> statementblock ·, LITINT
stmt -> statementblock ·, LITLONG
stmt -> statementblock ·, LITFLOAT
stmt -> statementblock ·, LITDOUBLE
stmt -> statementblock ·, LITCHAR
stmt -> statementblock ·, LITSTRING
stmt -> statementblock ·, null
stmt -> statementblock ·, ++
stmt -> statementblock ·, --
stmt -> statementblock ·, break
stmt -> statementblock ·, return
stmt -> statementblock ·, delete
stmt -> statementblock ·, while
stmt -> statementblock ·, for
stmt -> statementblock ·, if
stmt -> statementblock ·, }
stmt -> statementblock ·, &&
stmt -> statementblock ·, ||
stmt -> statementblock ·, +
stmt -> statementblock ·, -
stmt -> statementblock ·, *
stmt -> statementblock ·, /
stmt -> statementblock ·, %
stmt -> statementblock ·, !
stmt -> statementblock ·, else
***EndSet***
***EndState***
***State***
52
I_52_196
***Set***
statements -> stmt ·, $
statements -> stmt ·, namespace
statements -> stmt ·, {
statements -> stmt ·, ID
statements -> stmt ·, void
statements -> stmt ·, bool
statements -> stmt ·, int
statements -> stmt ·, long
statements -> stmt ·, float
statements -> stmt ·, double
statements -> stmt ·, char
statements -> stmt ·, string
statements -> stmt ·, var
statements -> stmt ·, own
statements -> stmt ·, bor
statements -> stmt ·, const
statements -> stmt ·, extern
statements -> stmt ·, class
statements -> stmt ·, (
statements -> stmt ·, this
statements -> stmt ·, new
statements -> stmt ·, LITBOOL
statements -> stmt ·, LITINT
statements -> stmt ·, LITLONG
statements -> stmt ·, LITFLOAT
statements -> stmt ·, LITDOUBLE
statements -> stmt ·, LITCHAR
statements -> stmt ·, LITSTRING
statements -> stmt ·, null
statements -> stmt ·, ++
statements -> stmt ·, --
statements -> stmt ·, break
statements -> stmt ·, return
statements -> stmt ·, delete
statements -> stmt ·, while
statements -> stmt ·, for
statements -> stmt ·, if
statements -> stmt ·, }
***EndSet***
***EndState***
***State***
53
I_53_197_303_863_1206_1346
***Set***
stmt -> declstmt ·, $
stmt -> declstmt ·, namespace
stmt -> declstmt ·, {
stmt -> declstmt ·, ID
stmt -> declstmt ·, void
stmt -> declstmt ·, bool
stmt -> declstmt ·, int
stmt -> declstmt ·, long
stmt -> declstmt ·, float
stmt -> declstmt ·, double
stmt -> declstmt ·, char
stmt -> declstmt ·, string
stmt -> declstmt ·, var
stmt -> declstmt ·, own
stmt -> declstmt ·, bor
stmt -> declstmt ·, const
stmt -> declstmt ·, extern
stmt -> declstmt ·, class
stmt -> declstmt ·, (
stmt -> declstmt ·, this
stmt -> declstmt ·, new
stmt -> declstmt ·, LITBOOL
stmt -> declstmt ·, LITINT
stmt -> declstmt ·, LITLONG
stmt -> declstmt ·, LITFLOAT
stmt -> declstmt ·, LITDOUBLE
stmt -> declstmt ·, LITCHAR
stmt -> declstmt ·, LITSTRING
stmt -> declstmt ·, null
stmt -> declstmt ·, ++
stmt -> declstmt ·, --
stmt -> declstmt ·, break
stmt -> declstmt ·, return
stmt -> declstmt ·, delete
stmt -> declstmt ·, while
stmt -> declstmt ·, for
stmt -> declstmt ·, if
stmt -> declstmt ·, }
stmt -> declstmt ·, &&
stmt -> declstmt ·, ||
stmt -> declstmt ·, +
stmt -> declstmt ·, -
stmt -> declstmt ·, *
stmt -> declstmt ·, /
stmt -> declstmt ·, %
stmt -> declstmt ·, !
stmt -> declstmt ·, else
***EndSet***
***EndState***
***State***
54
I_54_198_304_770_864_1207_1347
***Set***
declstmt -> tmodf · type ID = expr ;, $
declstmt -> tmodf · type ID ( params ) { statements }, $
declstmt -> tmodf · type operator ID ( params ) { statements }, $
declstmt -> tmodf · type ID = expr ;, namespace
declstmt -> tmodf · type ID ( params ) { statements }, namespace
declstmt -> tmodf · type operator ID ( params ) { statements }, namespace
declstmt -> tmodf · type ID = expr ;, {
declstmt -> tmodf · type ID ( params ) { statements }, {
declstmt -> tmodf · type operator ID ( params ) { statements }, {
declstmt -> tmodf · type ID = expr ;, ID
declstmt -> tmodf · type ID ( params ) { statements }, ID
declstmt -> tmodf · type operator ID ( params ) { statements }, ID
declstmt -> tmodf · type ID = expr ;, void
declstmt -> tmodf · type ID ( params ) { statements }, void
declstmt -> tmodf · type operator ID ( params ) { statements }, void
declstmt -> tmodf · type ID = expr ;, bool
declstmt -> tmodf · type ID ( params ) { statements }, bool
declstmt -> tmodf · type operator ID ( params ) { statements }, bool
declstmt -> tmodf · type ID = expr ;, int
declstmt -> tmodf · type ID ( params ) { statements }, int
declstmt -> tmodf · type operator ID ( params ) { statements }, int
declstmt -> tmodf · type ID = expr ;, long
declstmt -> tmodf · type ID ( params ) { statements }, long
declstmt -> tmodf · type operator ID ( params ) { statements }, long
declstmt -> tmodf · type ID = expr ;, float
declstmt -> tmodf · type ID ( params ) { statements }, float
declstmt -> tmodf · type operator ID ( params ) { statements }, float
declstmt -> tmodf · type ID = expr ;, double
declstmt -> tmodf · type ID ( params ) { statements }, double
declstmt -> tmodf · type operator ID ( params ) { statements }, double
declstmt -> tmodf · type ID = expr ;, char
declstmt -> tmodf · type ID ( params ) { statements }, char
declstmt -> tmodf · type operator ID ( params ) { statements }, char
declstmt -> tmodf · type ID = expr ;, string
declstmt -> tmodf · type ID ( params ) { statements }, string
declstmt -> tmodf · type operator ID ( params ) { statements }, string
declstmt -> tmodf · type ID = expr ;, var
declstmt -> tmodf · type ID ( params ) { statements }, var
declstmt -> tmodf · type operator ID ( params ) { statements }, var
declstmt -> tmodf · type ID = expr ;, own
declstmt -> tmodf · type ID ( params ) { statements }, own
declstmt -> tmodf · type operator ID ( params ) { statements }, own
declstmt -> tmodf · type ID = expr ;, bor
declstmt -> tmodf · type ID ( params ) { statements }, bor
declstmt -> tmodf · type operator ID ( params ) { statements }, bor
declstmt -> tmodf · type ID = expr ;, const
declstmt -> tmodf · type ID ( params ) { statements }, const
declstmt -> tmodf · type operator ID ( params ) { statements }, const
declstmt -> tmodf · type ID = expr ;, extern
declstmt -> tmodf · type ID ( params ) { statements }, extern
declstmt -> tmodf · type operator ID ( params ) { statements }, extern
declstmt -> tmodf · type ID = expr ;, class
declstmt -> tmodf · type ID ( params ) { statements }, class
declstmt -> tmodf · type operator ID ( params ) { statements }, class
declstmt -> tmodf · type ID = expr ;, (
declstmt -> tmodf · type ID ( params ) { statements }, (
declstmt -> tmodf · type operator ID ( params ) { statements }, (
declstmt -> tmodf · type ID = expr ;, this
declstmt -> tmodf · type ID ( params ) { statements }, this
declstmt -> tmodf · type operator ID ( params ) { statements }, this
declstmt -> tmodf · type ID = expr ;, new
declstmt -> tmodf · type ID ( params ) { statements }, new
declstmt -> tmodf · type operator ID ( params ) { statements }, new
declstmt -> tmodf · type ID = expr ;, LITBOOL
declstmt -> tmodf · type ID ( params ) { statements }, LITBOOL
declstmt -> tmodf · type operator ID ( params ) { statements }, LITBOOL
declstmt -> tmodf · type ID = expr ;, LITINT
declstmt -> tmodf · type ID ( params ) { statements }, LITINT
declstmt -> tmodf · type operator ID ( params ) { statements }, LITINT
declstmt -> tmodf · type ID = expr ;, LITLONG
declstmt -> tmodf · type ID ( params ) { statements }, LITLONG
declstmt -> tmodf · type operator ID ( params ) { statements }, LITLONG
declstmt -> tmodf · type ID = expr ;, LITFLOAT
declstmt -> tmodf · type ID ( params ) { statements }, LITFLOAT
declstmt -> tmodf · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> tmodf · type ID = expr ;, LITDOUBLE
declstmt -> tmodf · type ID ( params ) { statements }, LITDOUBLE
declstmt -> tmodf · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> tmodf · type ID = expr ;, LITCHAR
declstmt -> tmodf · type ID ( params ) { statements }, LITCHAR
declstmt -> tmodf · type operator ID ( params ) { statements }, LITCHAR
declstmt -> tmodf · type ID = expr ;, LITSTRING
declstmt -> tmodf · type ID ( params ) { statements }, LITSTRING
declstmt -> tmodf · type operator ID ( params ) { statements }, LITSTRING
declstmt -> tmodf · type ID = expr ;, null
declstmt -> tmodf · type ID ( params ) { statements }, null
declstmt -> tmodf · type operator ID ( params ) { statements }, null
declstmt -> tmodf · type ID = expr ;, ++
declstmt -> tmodf · type ID ( params ) { statements }, ++
declstmt -> tmodf · type operator ID ( params ) { statements }, ++
declstmt -> tmodf · type ID = expr ;, --
declstmt -> tmodf · type ID ( params ) { statements }, --
declstmt -> tmodf · type operator ID ( params ) { statements }, --
declstmt -> tmodf · type ID = expr ;, break
declstmt -> tmodf · type ID ( params ) { statements }, break
declstmt -> tmodf · type operator ID ( params ) { statements }, break
declstmt -> tmodf · type ID = expr ;, return
declstmt -> tmodf · type ID ( params ) { statements }, return
declstmt -> tmodf · type operator ID ( params ) { statements }, return
declstmt -> tmodf · type ID = expr ;, delete
declstmt -> tmodf · type ID ( params ) { statements }, delete
declstmt -> tmodf · type operator ID ( params ) { statements }, delete
declstmt -> tmodf · type ID = expr ;, while
declstmt -> tmodf · type ID ( params ) { statements }, while
declstmt -> tmodf · type operator ID ( params ) { statements }, while
declstmt -> tmodf · type ID = expr ;, for
declstmt -> tmodf · type ID ( params ) { statements }, for
declstmt -> tmodf · type operator ID ( params ) { statements }, for
declstmt -> tmodf · type ID = expr ;, if
declstmt -> tmodf · type ID ( params ) { statements }, if
declstmt -> tmodf · type operator ID ( params ) { statements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> tmodf · type ID = expr ;, }
declstmt -> tmodf · type ID ( params ) { statements }, }
declstmt -> tmodf · type operator ID ( params ) { statements }, }
declstmt -> tmodf · type ID = expr ;, &&
declstmt -> tmodf · type ID ( params ) { statements }, &&
declstmt -> tmodf · type operator ID ( params ) { statements }, &&
declstmt -> tmodf · type ID = expr ;, ||
declstmt -> tmodf · type ID ( params ) { statements }, ||
declstmt -> tmodf · type operator ID ( params ) { statements }, ||
declstmt -> tmodf · type ID = expr ;, +
declstmt -> tmodf · type ID ( params ) { statements }, +
declstmt -> tmodf · type operator ID ( params ) { statements }, +
declstmt -> tmodf · type ID = expr ;, -
declstmt -> tmodf · type ID ( params ) { statements }, -
declstmt -> tmodf · type operator ID ( params ) { statements }, -
declstmt -> tmodf · type ID = expr ;, *
declstmt -> tmodf · type ID ( params ) { statements }, *
declstmt -> tmodf · type operator ID ( params ) { statements }, *
declstmt -> tmodf · type ID = expr ;, /
declstmt -> tmodf · type ID ( params ) { statements }, /
declstmt -> tmodf · type operator ID ( params ) { statements }, /
declstmt -> tmodf · type ID = expr ;, %
declstmt -> tmodf · type ID ( params ) { statements }, %
declstmt -> tmodf · type operator ID ( params ) { statements }, %
declstmt -> tmodf · type ID = expr ;, !
declstmt -> tmodf · type ID ( params ) { statements }, !
declstmt -> tmodf · type operator ID ( params ) { statements }, !
declstmt -> tmodf · type ID = expr ;, else
declstmt -> tmodf · type ID ( params ) { statements }, else
declstmt -> tmodf · type operator ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
55
I_55_199_305_865_1208_1348
***Set***
stmt -> stmtexpr · ;, $
stmt -> stmtexpr · ;, namespace
stmt -> stmtexpr · ;, {
stmt -> stmtexpr · ;, ID
stmt -> stmtexpr · ;, void
stmt -> stmtexpr · ;, bool
stmt -> stmtexpr · ;, int
stmt -> stmtexpr · ;, long
stmt -> stmtexpr · ;, float
stmt -> stmtexpr · ;, double
stmt -> stmtexpr · ;, char
stmt -> stmtexpr · ;, string
stmt -> stmtexpr · ;, var
stmt -> stmtexpr · ;, own
stmt -> stmtexpr · ;, bor
stmt -> stmtexpr · ;, const
stmt -> stmtexpr · ;, extern
stmt -> stmtexpr · ;, class
stmt -> stmtexpr · ;, (
stmt -> stmtexpr · ;, this
stmt -> stmtexpr · ;, new
stmt -> stmtexpr · ;, LITBOOL
stmt -> stmtexpr · ;, LITINT
stmt -> stmtexpr · ;, LITLONG
stmt -> stmtexpr · ;, LITFLOAT
stmt -> stmtexpr · ;, LITDOUBLE
stmt -> stmtexpr · ;, LITCHAR
stmt -> stmtexpr · ;, LITSTRING
stmt -> stmtexpr · ;, null
stmt -> stmtexpr · ;, ++
stmt -> stmtexpr · ;, --
stmt -> stmtexpr · ;, break
stmt -> stmtexpr · ;, return
stmt -> stmtexpr · ;, delete
stmt -> stmtexpr · ;, while
stmt -> stmtexpr · ;, for
stmt -> stmtexpr · ;, if
stmt -> stmtexpr · ;, }
stmt -> stmtexpr · ;, &&
stmt -> stmtexpr · ;, ||
stmt -> stmtexpr · ;, +
stmt -> stmtexpr · ;, -
stmt -> stmtexpr · ;, *
stmt -> stmtexpr · ;, /
stmt -> stmtexpr · ;, %
stmt -> stmtexpr · ;, !
stmt -> stmtexpr · ;, else
***EndSet***
***EndState***
***State***
56
I_56_1129
***Set***
stmtexpr -> assign ·, ;
stmtexpr -> assign ·, )
***EndSet***
***EndState***
***State***
57
I_57_1130
***Set***
stmtexpr -> call ·, ;
primary -> call ·, .
stmtexpr -> call ·, )
***EndSet***
***EndState***
***State***
58
I_58_127_166_389
***Set***
lvalue -> indexaccess ·, =
lvalue -> indexaccess ·, +=
lvalue -> indexaccess ·, -=
lvalue -> indexaccess ·, *=
lvalue -> indexaccess ·, /=
lvalue -> indexaccess ·, %=
primary -> indexaccess ·, .
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, )
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
59
I_59_1131
***Set***
stmtexpr -> newobj ·, ;
primary -> newobj ·, .
stmtexpr -> newobj ·, )
***EndSet***
***EndState***
***State***
60
I_60_129_168_391_425_497_531_599_633_964_998_1080
***Set***
primary -> newarr ·, .
primary -> newarr ·, ;
primary -> newarr ·, &&
primary -> newarr ·, ||
primary -> newarr ·, >
primary -> newarr ·, <
primary -> newarr ·, >=
primary -> newarr ·, <=
primary -> newarr ·, ==
primary -> newarr ·, !=
primary -> newarr ·, +
primary -> newarr ·, -
primary -> newarr ·, *
primary -> newarr ·, /
primary -> newarr ·, %
primary -> newarr ·, )
primary -> newarr ·, ,
primary -> newarr ·, ]
***EndSet***
***EndState***
***State***
61
I_61_1132
***Set***
stmtexpr -> incdec ·, ;
stmtexpr -> incdec ·, )
***EndSet***
***EndState***
***State***
62
I_62_200_306_771_866_1209_1349
***Set***
declstmt -> type · ID = expr ;, $
declstmt -> type · ID ( params ) { statements }, $
declstmt -> type · operator ID ( params ) { statements }, $
declstmt -> type · ID = expr ;, namespace
declstmt -> type · ID ( params ) { statements }, namespace
declstmt -> type · operator ID ( params ) { statements }, namespace
declstmt -> type · ID = expr ;, {
declstmt -> type · ID ( params ) { statements }, {
declstmt -> type · operator ID ( params ) { statements }, {
declstmt -> type · ID = expr ;, ID
declstmt -> type · ID ( params ) { statements }, ID
declstmt -> type · operator ID ( params ) { statements }, ID
declstmt -> type · ID = expr ;, void
declstmt -> type · ID ( params ) { statements }, void
declstmt -> type · operator ID ( params ) { statements }, void
declstmt -> type · ID = expr ;, bool
declstmt -> type · ID ( params ) { statements }, bool
declstmt -> type · operator ID ( params ) { statements }, bool
declstmt -> type · ID = expr ;, int
declstmt -> type · ID ( params ) { statements }, int
declstmt -> type · operator ID ( params ) { statements }, int
declstmt -> type · ID = expr ;, long
declstmt -> type · ID ( params ) { statements }, long
declstmt -> type · operator ID ( params ) { statements }, long
declstmt -> type · ID = expr ;, float
declstmt -> type · ID ( params ) { statements }, float
declstmt -> type · operator ID ( params ) { statements }, float
declstmt -> type · ID = expr ;, double
declstmt -> type · ID ( params ) { statements }, double
declstmt -> type · operator ID ( params ) { statements }, double
declstmt -> type · ID = expr ;, char
declstmt -> type · ID ( params ) { statements }, char
declstmt -> type · operator ID ( params ) { statements }, char
declstmt -> type · ID = expr ;, string
declstmt -> type · ID ( params ) { statements }, string
declstmt -> type · operator ID ( params ) { statements }, string
declstmt -> type · ID = expr ;, var
declstmt -> type · ID ( params ) { statements }, var
declstmt -> type · operator ID ( params ) { statements }, var
declstmt -> type · ID = expr ;, own
declstmt -> type · ID ( params ) { statements }, own
declstmt -> type · operator ID ( params ) { statements }, own
declstmt -> type · ID = expr ;, bor
declstmt -> type · ID ( params ) { statements }, bor
declstmt -> type · operator ID ( params ) { statements }, bor
declstmt -> type · ID = expr ;, const
declstmt -> type · ID ( params ) { statements }, const
declstmt -> type · operator ID ( params ) { statements }, const
declstmt -> type · ID = expr ;, extern
declstmt -> type · ID ( params ) { statements }, extern
declstmt -> type · operator ID ( params ) { statements }, extern
declstmt -> type · ID = expr ;, class
declstmt -> type · ID ( params ) { statements }, class
declstmt -> type · operator ID ( params ) { statements }, class
declstmt -> type · ID = expr ;, (
declstmt -> type · ID ( params ) { statements }, (
declstmt -> type · operator ID ( params ) { statements }, (
declstmt -> type · ID = expr ;, this
declstmt -> type · ID ( params ) { statements }, this
declstmt -> type · operator ID ( params ) { statements }, this
declstmt -> type · ID = expr ;, new
declstmt -> type · ID ( params ) { statements }, new
declstmt -> type · operator ID ( params ) { statements }, new
declstmt -> type · ID = expr ;, LITBOOL
declstmt -> type · ID ( params ) { statements }, LITBOOL
declstmt -> type · operator ID ( params ) { statements }, LITBOOL
declstmt -> type · ID = expr ;, LITINT
declstmt -> type · ID ( params ) { statements }, LITINT
declstmt -> type · operator ID ( params ) { statements }, LITINT
declstmt -> type · ID = expr ;, LITLONG
declstmt -> type · ID ( params ) { statements }, LITLONG
declstmt -> type · operator ID ( params ) { statements }, LITLONG
declstmt -> type · ID = expr ;, LITFLOAT
declstmt -> type · ID ( params ) { statements }, LITFLOAT
declstmt -> type · operator ID ( params ) { statements }, LITFLOAT
declstmt -> type · ID = expr ;, LITDOUBLE
declstmt -> type · ID ( params ) { statements }, LITDOUBLE
declstmt -> type · operator ID ( params ) { statements }, LITDOUBLE
declstmt -> type · ID = expr ;, LITCHAR
declstmt -> type · ID ( params ) { statements }, LITCHAR
declstmt -> type · operator ID ( params ) { statements }, LITCHAR
declstmt -> type · ID = expr ;, LITSTRING
declstmt -> type · ID ( params ) { statements }, LITSTRING
declstmt -> type · operator ID ( params ) { statements }, LITSTRING
declstmt -> type · ID = expr ;, null
declstmt -> type · ID ( params ) { statements }, null
declstmt -> type · operator ID ( params ) { statements }, null
declstmt -> type · ID = expr ;, ++
declstmt -> type · ID ( params ) { statements }, ++
declstmt -> type · operator ID ( params ) { statements }, ++
declstmt -> type · ID = expr ;, --
declstmt -> type · ID ( params ) { statements }, --
declstmt -> type · operator ID ( params ) { statements }, --
declstmt -> type · ID = expr ;, break
declstmt -> type · ID ( params ) { statements }, break
declstmt -> type · operator ID ( params ) { statements }, break
declstmt -> type · ID = expr ;, return
declstmt -> type · ID ( params ) { statements }, return
declstmt -> type · operator ID ( params ) { statements }, return
declstmt -> type · ID = expr ;, delete
declstmt -> type · ID ( params ) { statements }, delete
declstmt -> type · operator ID ( params ) { statements }, delete
declstmt -> type · ID = expr ;, while
declstmt -> type · ID ( params ) { statements }, while
declstmt -> type · operator ID ( params ) { statements }, while
declstmt -> type · ID = expr ;, for
declstmt -> type · ID ( params ) { statements }, for
declstmt -> type · operator ID ( params ) { statements }, for
declstmt -> type · ID = expr ;, if
declstmt -> type · ID ( params ) { statements }, if
declstmt -> type · operator ID ( params ) { statements }, if
declstmt -> type · ID = expr ;, }
declstmt -> type · ID ( params ) { statements }, }
declstmt -> type · operator ID ( params ) { statements }, }
declstmt -> type · ID = expr ;, &&
declstmt -> type · ID ( params ) { statements }, &&
declstmt -> type · operator ID ( params ) { statements }, &&
declstmt -> type · ID = expr ;, ||
declstmt -> type · ID ( params ) { statements }, ||
declstmt -> type · operator ID ( params ) { statements }, ||
declstmt -> type · ID = expr ;, +
declstmt -> type · ID ( params ) { statements }, +
declstmt -> type · operator ID ( params ) { statements }, +
declstmt -> type · ID = expr ;, -
declstmt -> type · ID ( params ) { statements }, -
declstmt -> type · operator ID ( params ) { statements }, -
declstmt -> type · ID = expr ;, *
declstmt -> type · ID ( params ) { statements }, *
declstmt -> type · operator ID ( params ) { statements }, *
declstmt -> type · ID = expr ;, /
declstmt -> type · ID ( params ) { statements }, /
declstmt -> type · operator ID ( params ) { statements }, /
declstmt -> type · ID = expr ;, %
declstmt -> type · ID ( params ) { statements }, %
declstmt -> type · operator ID ( params ) { statements }, %
declstmt -> type · ID = expr ;, !
declstmt -> type · ID ( params ) { statements }, !
declstmt -> type · operator ID ( params ) { statements }, !
declstmt -> type · ID = expr ;, else
declstmt -> type · ID ( params ) { statements }, else
declstmt -> type · operator ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
63
I_63_87_251
***Set***
type -> stype ·, ID
type -> stype ·, operator
type -> stype ·, )
***EndSet***
***EndState***
***State***
64
I_64_88_252
***Set***
type -> arrtype ·, ID
type -> arrtype ·, operator
type -> arrtype ·, )
***EndSet***
***EndState***
***State***
65
I_65_89_253
***Set***
stype -> primitive ·, ID
stype -> primitive ·, operator
primitiveBracket -> primitive · [ optidx ], ID
primitiveBracket -> primitive · [ optidx ], operator
stype -> primitive ·, )
primitiveBracket -> primitive · [ optidx ], )
***EndSet***
***EndState***
***State***
66
I_66
***Set***
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
memberaccess -> primary · . ID, [
memberaccess -> primary · . ID, .
***EndSet***
***EndState***
***State***
67
I_67_138_177_400_431_503_536_605_638_970_1003_1085
***Set***
primary -> lit ·, .
primary -> lit ·, ;
primary -> lit ·, &&
primary -> lit ·, ||
primary -> lit ·, >
primary -> lit ·, <
primary -> lit ·, >=
primary -> lit ·, <=
primary -> lit ·, ==
primary -> lit ·, !=
primary -> lit ·, +
primary -> lit ·, -
primary -> lit ·, *
primary -> lit ·, /
primary -> lit ·, %
primary -> lit ·, )
primary -> lit ·, ,
primary -> lit ·, ]
***EndSet***
***EndState***
***State***
68
I_68_179_402
***Set***
assign -> lvalue · = expr, ;
assign -> lvalue · += expr, ;
assign -> lvalue · -= expr, ;
assign -> lvalue · *= expr, ;
assign -> lvalue · /= expr, ;
assign -> lvalue · %= expr, ;
assign -> lvalue · = expr, )
assign -> lvalue · += expr, )
assign -> lvalue · -= expr, )
assign -> lvalue · *= expr, )
assign -> lvalue · /= expr, )
assign -> lvalue · %= expr, )
assign -> lvalue · = expr, ,
assign -> lvalue · += expr, ,
assign -> lvalue · -= expr, ,
assign -> lvalue · *= expr, ,
assign -> lvalue · /= expr, ,
assign -> lvalue · %= expr, ,
***EndSet***
***EndState***
***State***
69
I_69_140_180_403_1133
***Set***
call -> memberaccess · ( args ), ;
lvalue -> memberaccess ·, =
lvalue -> memberaccess ·, +=
lvalue -> memberaccess ·, -=
lvalue -> memberaccess ·, *=
lvalue -> memberaccess ·, /=
lvalue -> memberaccess ·, %=
indexaccess -> memberaccess · [ aexpr ], =
indexaccess -> memberaccess · [ aexpr ], +=
indexaccess -> memberaccess · [ aexpr ], -=
indexaccess -> memberaccess · [ aexpr ], *=
indexaccess -> memberaccess · [ aexpr ], /=
indexaccess -> memberaccess · [ aexpr ], %=
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
indexaccess -> memberaccess · [ aexpr ], ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
70
I_70_90_255
***Set***
arrtype -> stypeBracket ·, ID
arrtype -> stypeBracket ·, operator
arrtype -> stypeBracket ·, )
***EndSet***
***EndState***
***State***
71
I_71_256
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, operator
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
stypeBracket -> idBracket ·, )
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
***EndSet***
***EndState***
***State***
72
I_72_92_108_239_257_313_675_719_792_815_879_902_1228_1251_1297
***Set***
stypeBracket -> primitiveBracket ·, ID
stypeBracket -> primitiveBracket ·, operator
stypeBracket -> primitiveBracket ·, .
stypeBracket -> primitiveBracket ·, ;
stypeBracket -> primitiveBracket ·, &&
stypeBracket -> primitiveBracket ·, ||
stypeBracket -> primitiveBracket ·, >
stypeBracket -> primitiveBracket ·, <
stypeBracket -> primitiveBracket ·, >=
stypeBracket -> primitiveBracket ·, <=
stypeBracket -> primitiveBracket ·, ==
stypeBracket -> primitiveBracket ·, !=
stypeBracket -> primitiveBracket ·, +
stypeBracket -> primitiveBracket ·, -
stypeBracket -> primitiveBracket ·, *
stypeBracket -> primitiveBracket ·, /
stypeBracket -> primitiveBracket ·, %
stypeBracket -> primitiveBracket ·, )
stypeBracket -> primitiveBracket ·, ,
stypeBracket -> primitiveBracket ·, ]
***EndSet***
***EndState***
***State***
73
I_73
***Set***
importation -> import < LITSTRING > ·, using
importation -> import < LITSTRING > ·, namespace
importation -> import < LITSTRING > ·, {
importation -> import < LITSTRING > ·, ID
importation -> import < LITSTRING > ·, void
importation -> import < LITSTRING > ·, bool
importation -> import < LITSTRING > ·, int
importation -> import < LITSTRING > ·, long
importation -> import < LITSTRING > ·, float
importation -> import < LITSTRING > ·, double
importation -> import < LITSTRING > ·, char
importation -> import < LITSTRING > ·, string
importation -> import < LITSTRING > ·, var
importation -> import < LITSTRING > ·, own
importation -> import < LITSTRING > ·, bor
importation -> import < LITSTRING > ·, const
importation -> import < LITSTRING > ·, extern
importation -> import < LITSTRING > ·, class
importation -> import < LITSTRING > ·, (
importation -> import < LITSTRING > ·, this
importation -> import < LITSTRING > ·, new
importation -> import < LITSTRING > ·, LITBOOL
importation -> import < LITSTRING > ·, LITINT
importation -> import < LITSTRING > ·, LITLONG
importation -> import < LITSTRING > ·, LITFLOAT
importation -> import < LITSTRING > ·, LITDOUBLE
importation -> import < LITSTRING > ·, LITCHAR
importation -> import < LITSTRING > ·, LITSTRING
importation -> import < LITSTRING > ·, null
importation -> import < LITSTRING > ·, ++
importation -> import < LITSTRING > ·, --
importation -> import < LITSTRING > ·, break
importation -> import < LITSTRING > ·, return
importation -> import < LITSTRING > ·, delete
importation -> import < LITSTRING > ·, while
importation -> import < LITSTRING > ·, for
importation -> import < LITSTRING > ·, if
importation -> import < LITSTRING > ·, $
importation -> import < LITSTRING > ·, import
***EndSet***
***EndState***
***State***
74
I_74
***Set***
namespaceusing -> using ID ; ·, namespace
namespaceusing -> using ID ; ·, {
namespaceusing -> using ID ; ·, ID
namespaceusing -> using ID ; ·, void
namespaceusing -> using ID ; ·, bool
namespaceusing -> using ID ; ·, int
namespaceusing -> using ID ; ·, long
namespaceusing -> using ID ; ·, float
namespaceusing -> using ID ; ·, double
namespaceusing -> using ID ; ·, char
namespaceusing -> using ID ; ·, string
namespaceusing -> using ID ; ·, var
namespaceusing -> using ID ; ·, own
namespaceusing -> using ID ; ·, bor
namespaceusing -> using ID ; ·, const
namespaceusing -> using ID ; ·, extern
namespaceusing -> using ID ; ·, class
namespaceusing -> using ID ; ·, (
namespaceusing -> using ID ; ·, this
namespaceusing -> using ID ; ·, new
namespaceusing -> using ID ; ·, LITBOOL
namespaceusing -> using ID ; ·, LITINT
namespaceusing -> using ID ; ·, LITLONG
namespaceusing -> using ID ; ·, LITFLOAT
namespaceusing -> using ID ; ·, LITDOUBLE
namespaceusing -> using ID ; ·, LITCHAR
namespaceusing -> using ID ; ·, LITSTRING
namespaceusing -> using ID ; ·, null
namespaceusing -> using ID ; ·, ++
namespaceusing -> using ID ; ·, --
namespaceusing -> using ID ; ·, break
namespaceusing -> using ID ; ·, return
namespaceusing -> using ID ; ·, delete
namespaceusing -> using ID ; ·, while
namespaceusing -> using ID ; ·, for
namespaceusing -> using ID ; ·, if
namespaceusing -> using ID ; ·, $
namespaceusing -> using ID ; ·, using
***EndSet***
***EndState***
***State***
75
I_75_352_548_1141_1403_1485
***Set***
namespaceblock -> namespace ID · { statements }, $
namespaceblock -> namespace ID · { statements }, namespace
namespaceblock -> namespace ID · { statements }, {
namespaceblock -> namespace ID · { statements }, ID
namespaceblock -> namespace ID · { statements }, void
namespaceblock -> namespace ID · { statements }, bool
namespaceblock -> namespace ID · { statements }, int
namespaceblock -> namespace ID · { statements }, long
namespaceblock -> namespace ID · { statements }, float
namespaceblock -> namespace ID · { statements }, double
namespaceblock -> namespace ID · { statements }, char
namespaceblock -> namespace ID · { statements }, string
namespaceblock -> namespace ID · { statements }, var
namespaceblock -> namespace ID · { statements }, own
namespaceblock -> namespace ID · { statements }, bor
namespaceblock -> namespace ID · { statements }, const
namespaceblock -> namespace ID · { statements }, extern
namespaceblock -> namespace ID · { statements }, class
namespaceblock -> namespace ID · { statements }, (
namespaceblock -> namespace ID · { statements }, this
namespaceblock -> namespace ID · { statements }, new
namespaceblock -> namespace ID · { statements }, LITBOOL
namespaceblock -> namespace ID · { statements }, LITINT
namespaceblock -> namespace ID · { statements }, LITLONG
namespaceblock -> namespace ID · { statements }, LITFLOAT
namespaceblock -> namespace ID · { statements }, LITDOUBLE
namespaceblock -> namespace ID · { statements }, LITCHAR
namespaceblock -> namespace ID · { statements }, LITSTRING
namespaceblock -> namespace ID · { statements }, null
namespaceblock -> namespace ID · { statements }, ++
namespaceblock -> namespace ID · { statements }, --
namespaceblock -> namespace ID · { statements }, break
namespaceblock -> namespace ID · { statements }, return
namespaceblock -> namespace ID · { statements }, delete
namespaceblock -> namespace ID · { statements }, while
namespaceblock -> namespace ID · { statements }, for
namespaceblock -> namespace ID · { statements }, if
namespaceblock -> namespace ID · { statements }, }
namespaceblock -> namespace ID · { statements }, &&
namespaceblock -> namespace ID · { statements }, ||
namespaceblock -> namespace ID · { statements }, +
namespaceblock -> namespace ID · { statements }, -
namespaceblock -> namespace ID · { statements }, *
namespaceblock -> namespace ID · { statements }, /
namespaceblock -> namespace ID · { statements }, %
namespaceblock -> namespace ID · { statements }, !
namespaceblock -> namespace ID · { statements }, else
***EndSet***
***EndState***
***State***
76
I_85_208
***Set***
stype -> ID ·, ID
idBracket -> ID · [ optidx ], ID
stype -> ID ·, operator
idBracket -> ID · [ optidx ], operator
***EndSet***
***EndState***
***State***
77
I_86_353_549_1048_1142_1404_1486
***Set***
declstmt -> extern type · ID ( params ) ;, $
declstmt -> extern type · ID ( params ) ;, namespace
declstmt -> extern type · ID ( params ) ;, {
declstmt -> extern type · ID ( params ) ;, ID
declstmt -> extern type · ID ( params ) ;, void
declstmt -> extern type · ID ( params ) ;, bool
declstmt -> extern type · ID ( params ) ;, int
declstmt -> extern type · ID ( params ) ;, long
declstmt -> extern type · ID ( params ) ;, float
declstmt -> extern type · ID ( params ) ;, double
declstmt -> extern type · ID ( params ) ;, char
declstmt -> extern type · ID ( params ) ;, string
declstmt -> extern type · ID ( params ) ;, var
declstmt -> extern type · ID ( params ) ;, own
declstmt -> extern type · ID ( params ) ;, bor
declstmt -> extern type · ID ( params ) ;, const
declstmt -> extern type · ID ( params ) ;, extern
declstmt -> extern type · ID ( params ) ;, class
declstmt -> extern type · ID ( params ) ;, (
declstmt -> extern type · ID ( params ) ;, this
declstmt -> extern type · ID ( params ) ;, new
declstmt -> extern type · ID ( params ) ;, LITBOOL
declstmt -> extern type · ID ( params ) ;, LITINT
declstmt -> extern type · ID ( params ) ;, LITLONG
declstmt -> extern type · ID ( params ) ;, LITFLOAT
declstmt -> extern type · ID ( params ) ;, LITDOUBLE
declstmt -> extern type · ID ( params ) ;, LITCHAR
declstmt -> extern type · ID ( params ) ;, LITSTRING
declstmt -> extern type · ID ( params ) ;, null
declstmt -> extern type · ID ( params ) ;, ++
declstmt -> extern type · ID ( params ) ;, --
declstmt -> extern type · ID ( params ) ;, break
declstmt -> extern type · ID ( params ) ;, return
declstmt -> extern type · ID ( params ) ;, delete
declstmt -> extern type · ID ( params ) ;, while
declstmt -> extern type · ID ( params ) ;, for
declstmt -> extern type · ID ( params ) ;, if
declstmt -> extern type · ID ( params ) ;, }
declstmt -> extern type · ID ( params ) ;, &&
declstmt -> extern type · ID ( params ) ;, ||
declstmt -> extern type · ID ( params ) ;, +
declstmt -> extern type · ID ( params ) ;, -
declstmt -> extern type · ID ( params ) ;, *
declstmt -> extern type · ID ( params ) ;, /
declstmt -> extern type · ID ( params ) ;, %
declstmt -> extern type · ID ( params ) ;, !
declstmt -> extern type · ID ( params ) ;, else
***EndSet***
***EndState***
***State***
78
I_91_107_210_238_312_674_718_791_814_878_901_1227_1250_1296
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, .
stypeBracket -> idBracket ·, operator
stypeBracket -> idBracket ·, ;
stypeBracket -> idBracket ·, &&
stypeBracket -> idBracket ·, ||
stypeBracket -> idBracket ·, >
stypeBracket -> idBracket ·, <
stypeBracket -> idBracket ·, >=
stypeBracket -> idBracket ·, <=
stypeBracket -> idBracket ·, ==
stypeBracket -> idBracket ·, !=
stypeBracket -> idBracket ·, +
stypeBracket -> idBracket ·, -
stypeBracket -> idBracket ·, *
stypeBracket -> idBracket ·, /
stypeBracket -> idBracket ·, %
stypeBracket -> idBracket ·, )
stypeBracket -> idBracket ·, ,
stypeBracket -> idBracket ·, ]
***EndSet***
***EndState***
***State***
79
I_93_354_550_1049_1143_1405_1487
***Set***
declstmt -> const type · ID = lit ;, $
declstmt -> const type · ID = lit ;, namespace
declstmt -> const type · ID = lit ;, {
declstmt -> const type · ID = lit ;, ID
declstmt -> const type · ID = lit ;, void
declstmt -> const type · ID = lit ;, bool
declstmt -> const type · ID = lit ;, int
declstmt -> const type · ID = lit ;, long
declstmt -> const type · ID = lit ;, float
declstmt -> const type · ID = lit ;, double
declstmt -> const type · ID = lit ;, char
declstmt -> const type · ID = lit ;, string
declstmt -> const type · ID = lit ;, var
declstmt -> const type · ID = lit ;, own
declstmt -> const type · ID = lit ;, bor
declstmt -> const type · ID = lit ;, const
declstmt -> const type · ID = lit ;, extern
declstmt -> const type · ID = lit ;, class
declstmt -> const type · ID = lit ;, (
declstmt -> const type · ID = lit ;, this
declstmt -> const type · ID = lit ;, new
declstmt -> const type · ID = lit ;, LITBOOL
declstmt -> const type · ID = lit ;, LITINT
declstmt -> const type · ID = lit ;, LITLONG
declstmt -> const type · ID = lit ;, LITFLOAT
declstmt -> const type · ID = lit ;, LITDOUBLE
declstmt -> const type · ID = lit ;, LITCHAR
declstmt -> const type · ID = lit ;, LITSTRING
declstmt -> const type · ID = lit ;, null
declstmt -> const type · ID = lit ;, ++
declstmt -> const type · ID = lit ;, --
declstmt -> const type · ID = lit ;, break
declstmt -> const type · ID = lit ;, return
declstmt -> const type · ID = lit ;, delete
declstmt -> const type · ID = lit ;, while
declstmt -> const type · ID = lit ;, for
declstmt -> const type · ID = lit ;, if
declstmt -> const type · ID = lit ;, }
declstmt -> const type · ID = lit ;, &&
declstmt -> const type · ID = lit ;, ||
declstmt -> const type · ID = lit ;, +
declstmt -> const type · ID = lit ;, -
declstmt -> const type · ID = lit ;, *
declstmt -> const type · ID = lit ;, /
declstmt -> const type · ID = lit ;, %
declstmt -> const type · ID = lit ;, !
declstmt -> const type · ID = lit ;, else
***EndSet***
***EndState***
***State***
80
I_94_355_551_1050_1144_1406_1488
***Set***
declstmt -> class own · ID inherit { declstatements }, $
declstmt -> class own · ID inherit { declstatements }, namespace
declstmt -> class own · ID inherit { declstatements }, {
declstmt -> class own · ID inherit { declstatements }, ID
declstmt -> class own · ID inherit { declstatements }, void
declstmt -> class own · ID inherit { declstatements }, bool
declstmt -> class own · ID inherit { declstatements }, int
declstmt -> class own · ID inherit { declstatements }, long
declstmt -> class own · ID inherit { declstatements }, float
declstmt -> class own · ID inherit { declstatements }, double
declstmt -> class own · ID inherit { declstatements }, char
declstmt -> class own · ID inherit { declstatements }, string
declstmt -> class own · ID inherit { declstatements }, var
declstmt -> class own · ID inherit { declstatements }, own
declstmt -> class own · ID inherit { declstatements }, bor
declstmt -> class own · ID inherit { declstatements }, const
declstmt -> class own · ID inherit { declstatements }, extern
declstmt -> class own · ID inherit { declstatements }, class
declstmt -> class own · ID inherit { declstatements }, (
declstmt -> class own · ID inherit { declstatements }, this
declstmt -> class own · ID inherit { declstatements }, new
declstmt -> class own · ID inherit { declstatements }, LITBOOL
declstmt -> class own · ID inherit { declstatements }, LITINT
declstmt -> class own · ID inherit { declstatements }, LITLONG
declstmt -> class own · ID inherit { declstatements }, LITFLOAT
declstmt -> class own · ID inherit { declstatements }, LITDOUBLE
declstmt -> class own · ID inherit { declstatements }, LITCHAR
declstmt -> class own · ID inherit { declstatements }, LITSTRING
declstmt -> class own · ID inherit { declstatements }, null
declstmt -> class own · ID inherit { declstatements }, ++
declstmt -> class own · ID inherit { declstatements }, --
declstmt -> class own · ID inherit { declstatements }, break
declstmt -> class own · ID inherit { declstatements }, return
declstmt -> class own · ID inherit { declstatements }, delete
declstmt -> class own · ID inherit { declstatements }, while
declstmt -> class own · ID inherit { declstatements }, for
declstmt -> class own · ID inherit { declstatements }, if
declstmt -> class own · ID inherit { declstatements }, }
declstmt -> class own · ID inherit { declstatements }, &&
declstmt -> class own · ID inherit { declstatements }, ||
declstmt -> class own · ID inherit { declstatements }, +
declstmt -> class own · ID inherit { declstatements }, -
declstmt -> class own · ID inherit { declstatements }, *
declstmt -> class own · ID inherit { declstatements }, /
declstmt -> class own · ID inherit { declstatements }, %
declstmt -> class own · ID inherit { declstatements }, !
declstmt -> class own · ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
81
I_95_356_552_1051_1145_1407_1489
***Set***
declstmt -> class ID · inherit { declstatements }, $
declstmt -> class ID · inherit { declstatements }, namespace
declstmt -> class ID · inherit { declstatements }, {
declstmt -> class ID · inherit { declstatements }, ID
declstmt -> class ID · inherit { declstatements }, void
declstmt -> class ID · inherit { declstatements }, bool
declstmt -> class ID · inherit { declstatements }, int
declstmt -> class ID · inherit { declstatements }, long
declstmt -> class ID · inherit { declstatements }, float
declstmt -> class ID · inherit { declstatements }, double
declstmt -> class ID · inherit { declstatements }, char
declstmt -> class ID · inherit { declstatements }, string
declstmt -> class ID · inherit { declstatements }, var
declstmt -> class ID · inherit { declstatements }, own
declstmt -> class ID · inherit { declstatements }, bor
declstmt -> class ID · inherit { declstatements }, const
declstmt -> class ID · inherit { declstatements }, extern
declstmt -> class ID · inherit { declstatements }, class
declstmt -> class ID · inherit { declstatements }, (
declstmt -> class ID · inherit { declstatements }, this
declstmt -> class ID · inherit { declstatements }, new
declstmt -> class ID · inherit { declstatements }, LITBOOL
declstmt -> class ID · inherit { declstatements }, LITINT
declstmt -> class ID · inherit { declstatements }, LITLONG
declstmt -> class ID · inherit { declstatements }, LITFLOAT
declstmt -> class ID · inherit { declstatements }, LITDOUBLE
declstmt -> class ID · inherit { declstatements }, LITCHAR
declstmt -> class ID · inherit { declstatements }, LITSTRING
declstmt -> class ID · inherit { declstatements }, null
declstmt -> class ID · inherit { declstatements }, ++
declstmt -> class ID · inherit { declstatements }, --
declstmt -> class ID · inherit { declstatements }, break
declstmt -> class ID · inherit { declstatements }, return
declstmt -> class ID · inherit { declstatements }, delete
declstmt -> class ID · inherit { declstatements }, while
declstmt -> class ID · inherit { declstatements }, for
declstmt -> class ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class ID · inherit { declstatements }, }
declstmt -> class ID · inherit { declstatements }, &&
declstmt -> class ID · inherit { declstatements }, ||
declstmt -> class ID · inherit { declstatements }, +
declstmt -> class ID · inherit { declstatements }, -
declstmt -> class ID · inherit { declstatements }, *
declstmt -> class ID · inherit { declstatements }, /
declstmt -> class ID · inherit { declstatements }, %
declstmt -> class ID · inherit { declstatements }, !
declstmt -> class ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
82
I_104_235_309_671_715_788_811_875_898_1224_1247_1293_1350
***Set***
newobj -> new ID · ( ), ;
newobj -> new ID · ( ), .
idBracket -> ID · [ optidx ], .
newobj -> new ID · ( ), &&
newobj -> new ID · ( ), ||
newobj -> new ID · ( ), >
newobj -> new ID · ( ), <
newobj -> new ID · ( ), >=
newobj -> new ID · ( ), <=
newobj -> new ID · ( ), ==
newobj -> new ID · ( ), !=
newobj -> new ID · ( ), +
newobj -> new ID · ( ), -
newobj -> new ID · ( ), *
newobj -> new ID · ( ), /
newobj -> new ID · ( ), %
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
newobj -> new ID · ( ), )
idBracket -> ID · [ optidx ], )
newobj -> new ID · ( ), ,
idBracket -> ID · [ optidx ], ,
newobj -> new ID · ( ), ]
idBracket -> ID · [ optidx ], ]
***EndSet***
***EndState***
***State***
83
I_105_236_310_672_716_789_812_876_899_1225_1248_1294
***Set***
primitiveBracket -> primitive · [ optidx ], .
primitiveBracket -> primitive · [ optidx ], ;
primitiveBracket -> primitive · [ optidx ], &&
primitiveBracket -> primitive · [ optidx ], ||
primitiveBracket -> primitive · [ optidx ], >
primitiveBracket -> primitive · [ optidx ], <
primitiveBracket -> primitive · [ optidx ], >=
primitiveBracket -> primitive · [ optidx ], <=
primitiveBracket -> primitive · [ optidx ], ==
primitiveBracket -> primitive · [ optidx ], !=
primitiveBracket -> primitive · [ optidx ], +
primitiveBracket -> primitive · [ optidx ], -
primitiveBracket -> primitive · [ optidx ], *
primitiveBracket -> primitive · [ optidx ], /
primitiveBracket -> primitive · [ optidx ], %
primitiveBracket -> primitive · [ optidx ], )
primitiveBracket -> primitive · [ optidx ], ,
primitiveBracket -> primitive · [ optidx ], ]
***EndSet***
***EndState***
***State***
84
I_106_237_311_673_717_790_813_877_900_1226_1249_1295
***Set***
newarr -> new stypeBracket ·, .
newarr -> new stypeBracket ·, ;
newarr -> new stypeBracket ·, &&
newarr -> new stypeBracket ·, ||
newarr -> new stypeBracket ·, >
newarr -> new stypeBracket ·, <
newarr -> new stypeBracket ·, >=
newarr -> new stypeBracket ·, <=
newarr -> new stypeBracket ·, ==
newarr -> new stypeBracket ·, !=
newarr -> new stypeBracket ·, +
newarr -> new stypeBracket ·, -
newarr -> new stypeBracket ·, *
newarr -> new stypeBracket ·, /
newarr -> new stypeBracket ·, %
newarr -> new stypeBracket ·, )
newarr -> new stypeBracket ·, ,
newarr -> new stypeBracket ·, ]
***EndSet***
***EndState***
***State***
85
I_112_151_374_409_481_515_583_617_948_982_1064
***Set***
primary -> ( · expr ), .
cast -> ( · type ) factor, ;
primary -> ( · expr ), ;
cast -> ( · type ) factor, &&
primary -> ( · expr ), &&
cast -> ( · type ) factor, ||
primary -> ( · expr ), ||
cast -> ( · type ) factor, >
primary -> ( · expr ), >
cast -> ( · type ) factor, <
primary -> ( · expr ), <
cast -> ( · type ) factor, >=
primary -> ( · expr ), >=
cast -> ( · type ) factor, <=
primary -> ( · expr ), <=
cast -> ( · type ) factor, ==
primary -> ( · expr ), ==
cast -> ( · type ) factor, !=
primary -> ( · expr ), !=
cast -> ( · type ) factor, +
primary -> ( · expr ), +
cast -> ( · type ) factor, -
primary -> ( · expr ), -
cast -> ( · type ) factor, *
primary -> ( · expr ), *
cast -> ( · type ) factor, /
primary -> ( · expr ), /
cast -> ( · type ) factor, %
primary -> ( · expr ), %
expr -> · assign, )
expr -> · nexpr, )
type -> · arrtype, )
type -> · stype, )
type -> · var, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
arrtype -> · stypeBracket, )
stype -> · primitive, )
stype -> · ID, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
primitive -> · void, )
primitive -> · bool, )
primitive -> · int, )
primitive -> · long, )
primitive -> · float, )
primitive -> · double, )
primitive -> · char, )
primitive -> · string, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
cast -> ( · type ) factor, )
primary -> ( · expr ), )
cast -> ( · type ) factor, ,
primary -> ( · expr ), ,
cast -> ( · type ) factor, ]
primary -> ( · expr ), ]
***EndSet***
***EndState***
***State***
86
I_115_154_377_412_484_518_586_620_951_985_1067
***Set***
factor -> - · factor, ;
factor -> - · factor, &&
factor -> - · factor, ||
factor -> - · factor, >
factor -> - · factor, <
factor -> - · factor, >=
factor -> - · factor, <=
factor -> - · factor, ==
factor -> - · factor, !=
factor -> - · factor, +
factor -> - · factor, -
factor -> - · factor, *
factor -> - · factor, /
factor -> - · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> - · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> - · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> - · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
87
I_116_155_378_413_485_519_587_621_952_986_1068
***Set***
factor -> ! · factor, ;
factor -> ! · factor, &&
factor -> ! · factor, ||
factor -> ! · factor, >
factor -> ! · factor, <
factor -> ! · factor, >=
factor -> ! · factor, <=
factor -> ! · factor, ==
factor -> ! · factor, !=
factor -> ! · factor, +
factor -> ! · factor, -
factor -> ! · factor, *
factor -> ! · factor, /
factor -> ! · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> ! · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> ! · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> ! · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
88
I_124_163_386_1127
***Set***
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
call -> ID · ( args ), .
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), ;
idBracket -> ID · [ optidx ], .
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
idBracket -> ID · [ optidx ], ;
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
89
I_125_164_387
***Set***
expr -> assign ·, ;
expr -> assign ·, )
expr -> assign ·, ,
***EndSet***
***EndState***
***State***
90
I_126_165_388_422_494_528_596_630_961_995_1077
***Set***
primary -> call ·, .
primary -> call ·, ;
primary -> call ·, &&
primary -> call ·, ||
primary -> call ·, >
primary -> call ·, <
primary -> call ·, >=
primary -> call ·, <=
primary -> call ·, ==
primary -> call ·, !=
primary -> call ·, +
primary -> call ·, -
primary -> call ·, *
primary -> call ·, /
primary -> call ·, %
primary -> call ·, )
primary -> call ·, ,
primary -> call ·, ]
***EndSet***
***EndState***
***State***
91
I_128_167_390_424_496_530_598_632_963_997_1079
***Set***
primary -> newobj ·, .
primary -> newobj ·, ;
primary -> newobj ·, &&
primary -> newobj ·, ||
primary -> newobj ·, >
primary -> newobj ·, <
primary -> newobj ·, >=
primary -> newobj ·, <=
primary -> newobj ·, ==
primary -> newobj ·, !=
primary -> newobj ·, +
primary -> newobj ·, -
primary -> newobj ·, *
primary -> newobj ·, /
primary -> newobj ·, %
primary -> newobj ·, )
primary -> newobj ·, ,
primary -> newobj ·, ]
***EndSet***
***EndState***
***State***
92
I_130_169_392_426_498_532_600_634_965_999_1081
***Set***
factor -> incdec ·, ;
factor -> incdec ·, &&
factor -> incdec ·, ||
factor -> incdec ·, >
factor -> incdec ·, <
factor -> incdec ·, >=
factor -> incdec ·, <=
factor -> incdec ·, ==
factor -> incdec ·, !=
factor -> incdec ·, +
factor -> incdec ·, -
factor -> incdec ·, *
factor -> incdec ·, /
factor -> incdec ·, %
factor -> incdec ·, )
factor -> incdec ·, ,
factor -> incdec ·, ]
***EndSet***
***EndState***
***State***
93
I_131_357_553_1146_1408_1490
***Set***
stmt -> delete expr · ;, $
stmt -> delete expr · ;, namespace
stmt -> delete expr · ;, {
stmt -> delete expr · ;, ID
stmt -> delete expr · ;, void
stmt -> delete expr · ;, bool
stmt -> delete expr · ;, int
stmt -> delete expr · ;, long
stmt -> delete expr · ;, float
stmt -> delete expr · ;, double
stmt -> delete expr · ;, char
stmt -> delete expr · ;, string
stmt -> delete expr · ;, var
stmt -> delete expr · ;, own
stmt -> delete expr · ;, bor
stmt -> delete expr · ;, const
stmt -> delete expr · ;, extern
stmt -> delete expr · ;, class
stmt -> delete expr · ;, (
stmt -> delete expr · ;, this
stmt -> delete expr · ;, new
stmt -> delete expr · ;, LITBOOL
stmt -> delete expr · ;, LITINT
stmt -> delete expr · ;, LITLONG
stmt -> delete expr · ;, LITFLOAT
stmt -> delete expr · ;, LITDOUBLE
stmt -> delete expr · ;, LITCHAR
stmt -> delete expr · ;, LITSTRING
stmt -> delete expr · ;, null
stmt -> delete expr · ;, ++
stmt -> delete expr · ;, --
stmt -> delete expr · ;, break
stmt -> delete expr · ;, return
stmt -> delete expr · ;, delete
stmt -> delete expr · ;, while
stmt -> delete expr · ;, for
stmt -> delete expr · ;, if
stmt -> delete expr · ;, }
stmt -> delete expr · ;, &&
stmt -> delete expr · ;, ||
stmt -> delete expr · ;, +
stmt -> delete expr · ;, -
stmt -> delete expr · ;, *
stmt -> delete expr · ;, /
stmt -> delete expr · ;, %
stmt -> delete expr · ;, !
stmt -> delete expr · ;, else
***EndSet***
***EndState***
***State***
94
I_132_171_394
***Set***
expr -> nexpr ·, ;
expr -> nexpr ·, )
expr -> nexpr ·, ,
***EndSet***
***EndState***
***State***
95
I_133_172_395
***Set***
nexpr -> bexpr ·, ;
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
nexpr -> bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
nexpr -> bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
96
I_134_173_396
***Set***
nexpr -> aexpr ·, ;
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
nexpr -> aexpr ·, )
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
nexpr -> aexpr ·, ,
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
97
I_135_174_397_428_475_500_602_967
***Set***
aexpr -> term ·, ;
aexpr -> term ·, >
aexpr -> term ·, <
aexpr -> term ·, >=
aexpr -> term ·, <=
aexpr -> term ·, ==
aexpr -> term ·, !=
aexpr -> term ·, +
aexpr -> term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> term ·, &&
aexpr -> term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
98
I_136_175_398_476_578_943
***Set***
bexpr -> factor ·, ;
bexpr -> factor ·, &&
bexpr -> factor ·, ||
term -> factor ·, ;
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
bexpr -> factor ·, )
term -> factor ·, )
bexpr -> factor ·, ,
term -> factor ·, ,
***EndSet***
***EndState***
***State***
99
I_137_176_263_321_399_430_502_535_604_637_683_969_1002_1084
***Set***
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
factor -> primary ·, ;
memberaccess -> primary · . ID, [
factor -> primary ·, &&
factor -> primary ·, ||
memberaccess -> primary · . ID, .
factor -> primary ·, >
factor -> primary ·, <
factor -> primary ·, >=
factor -> primary ·, <=
factor -> primary ·, ==
factor -> primary ·, !=
memberaccess -> primary · . ID, ;
factor -> primary ·, +
factor -> primary ·, -
factor -> primary ·, *
factor -> primary ·, /
factor -> primary ·, %
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, &&
memberaccess -> primary · . ID, ||
memberaccess -> primary · . ID, >
memberaccess -> primary · . ID, <
memberaccess -> primary · . ID, >=
memberaccess -> primary · . ID, <=
memberaccess -> primary · . ID, ==
memberaccess -> primary · . ID, !=
memberaccess -> primary · . ID, +
memberaccess -> primary · . ID, -
memberaccess -> primary · . ID, *
memberaccess -> primary · . ID, /
memberaccess -> primary · . ID, %
factor -> primary ·, )
memberaccess -> primary · . ID, )
factor -> primary ·, ,
memberaccess -> primary · . ID, ,
factor -> primary ·, ]
memberaccess -> primary · . ID, ]
***EndSet***
***EndState***
***State***
100
I_139_178_401_432_504_537_606_639_971_1004_1086
***Set***
factor -> cast ·, ;
factor -> cast ·, &&
factor -> cast ·, ||
factor -> cast ·, >
factor -> cast ·, <
factor -> cast ·, >=
factor -> cast ·, <=
factor -> cast ·, ==
factor -> cast ·, !=
factor -> cast ·, +
factor -> cast ·, -
factor -> cast ·, *
factor -> cast ·, /
factor -> cast ·, %
factor -> cast ·, )
factor -> cast ·, ,
factor -> cast ·, ]
***EndSet***
***EndState***
***State***
101
I_141_181_265_323_405_434_506_539_608_641_685_973_1006_1088_1134
***Set***
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
indexaccess -> idBracket ·, ;
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, ,
indexaccess -> idBracket ·, ]
***EndSet***
***EndState***
***State***
102
I_142_358_554_1147_1409_1491
***Set***
stmt -> while ( · expr ) stmt, $
stmt -> while ( · expr ) stmt, namespace
stmt -> while ( · expr ) stmt, {
stmt -> while ( · expr ) stmt, ID
stmt -> while ( · expr ) stmt, void
stmt -> while ( · expr ) stmt, bool
stmt -> while ( · expr ) stmt, int
stmt -> while ( · expr ) stmt, long
stmt -> while ( · expr ) stmt, float
stmt -> while ( · expr ) stmt, double
stmt -> while ( · expr ) stmt, char
stmt -> while ( · expr ) stmt, string
stmt -> while ( · expr ) stmt, var
stmt -> while ( · expr ) stmt, own
stmt -> while ( · expr ) stmt, bor
stmt -> while ( · expr ) stmt, const
stmt -> while ( · expr ) stmt, extern
stmt -> while ( · expr ) stmt, class
stmt -> while ( · expr ) stmt, (
stmt -> while ( · expr ) stmt, this
stmt -> while ( · expr ) stmt, new
stmt -> while ( · expr ) stmt, LITBOOL
stmt -> while ( · expr ) stmt, LITINT
stmt -> while ( · expr ) stmt, LITLONG
stmt -> while ( · expr ) stmt, LITFLOAT
stmt -> while ( · expr ) stmt, LITDOUBLE
stmt -> while ( · expr ) stmt, LITCHAR
stmt -> while ( · expr ) stmt, LITSTRING
stmt -> while ( · expr ) stmt, null
stmt -> while ( · expr ) stmt, ++
stmt -> while ( · expr ) stmt, --
stmt -> while ( · expr ) stmt, break
stmt -> while ( · expr ) stmt, return
stmt -> while ( · expr ) stmt, delete
stmt -> while ( · expr ) stmt, while
stmt -> while ( · expr ) stmt, for
stmt -> while ( · expr ) stmt, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> while ( · expr ) stmt, }
stmt -> while ( · expr ) stmt, &&
stmt -> while ( · expr ) stmt, ||
stmt -> while ( · expr ) stmt, +
stmt -> while ( · expr ) stmt, -
stmt -> while ( · expr ) stmt, *
stmt -> while ( · expr ) stmt, /
stmt -> while ( · expr ) stmt, %
stmt -> while ( · expr ) stmt, !
stmt -> while ( · expr ) stmt, else
***EndSet***
***EndState***
***State***
103
I_143_359_555_1148_1410_1492
***Set***
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, $
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, {
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, void
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, int
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, long
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, float
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, double
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, char
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, string
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, var
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, own
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bor
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, const
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, class
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, (
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, this
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, new
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, null
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, --
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, break
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, return
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, while
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, for
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, if
stmt -> · namespaceblock, &&
stmt -> · namespaceblock, ||
stmt -> · namespaceblock, +
stmt -> · namespaceblock, -
stmt -> · namespaceblock, *
stmt -> · namespaceblock, /
stmt -> · namespaceblock, %
stmt -> · namespaceblock, ++
stmt -> · namespaceblock, --
stmt -> · namespaceblock, ID
stmt -> · namespaceblock, !
stmt -> · namespaceblock, (
stmt -> · namespaceblock, this
stmt -> · namespaceblock, new
stmt -> · namespaceblock, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, &&
stmt -> · statementblock, ||
stmt -> · statementblock, +
stmt -> · statementblock, -
stmt -> · statementblock, *
stmt -> · statementblock, /
stmt -> · statementblock, %
stmt -> · statementblock, ++
stmt -> · statementblock, --
stmt -> · statementblock, ID
stmt -> · statementblock, !
stmt -> · statementblock, (
stmt -> · statementblock, this
stmt -> · statementblock, new
stmt -> · statementblock, LITBOOL
stmt -> · statementblock, LITINT
stmt -> · statementblock, LITLONG
stmt -> · statementblock, LITFLOAT
stmt -> · statementblock, LITDOUBLE
stmt -> · statementblock, LITCHAR
stmt -> · statementblock, LITSTRING
stmt -> · statementblock, null
stmt -> · declstmt, &&
stmt -> · declstmt, ||
stmt -> · declstmt, +
stmt -> · declstmt, -
stmt -> · declstmt, *
stmt -> · declstmt, /
stmt -> · declstmt, %
stmt -> · declstmt, ++
stmt -> · declstmt, --
stmt -> · declstmt, ID
stmt -> · declstmt, !
stmt -> · declstmt, (
stmt -> · declstmt, this
stmt -> · declstmt, new
stmt -> · declstmt, LITBOOL
stmt -> · declstmt, LITINT
stmt -> · declstmt, LITLONG
stmt -> · declstmt, LITFLOAT
stmt -> · declstmt, LITDOUBLE
stmt -> · declstmt, LITCHAR
stmt -> · declstmt, LITSTRING
stmt -> · declstmt, null
stmt -> · stmtexpr ;, &&
stmt -> · stmtexpr ;, ||
stmt -> · stmtexpr ;, +
stmt -> · stmtexpr ;, -
stmt -> · stmtexpr ;, *
stmt -> · stmtexpr ;, /
stmt -> · stmtexpr ;, %
stmt -> · stmtexpr ;, ++
stmt -> · stmtexpr ;, --
stmt -> · stmtexpr ;, ID
stmt -> · stmtexpr ;, !
stmt -> · stmtexpr ;, (
stmt -> · stmtexpr ;, this
stmt -> · stmtexpr ;, new
stmt -> · stmtexpr ;, LITBOOL
stmt -> · stmtexpr ;, LITINT
stmt -> · stmtexpr ;, LITLONG
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · stmtexpr ;, LITCHAR
stmt -> · stmtexpr ;, LITSTRING
stmt -> · stmtexpr ;, null
stmt -> · break ;, &&
stmt -> · break ;, ||
stmt -> · break ;, +
stmt -> · break ;, -
stmt -> · break ;, *
stmt -> · break ;, /
stmt -> · break ;, %
stmt -> · break ;, ++
stmt -> · break ;, --
stmt -> · break ;, ID
stmt -> · break ;, !
stmt -> · break ;, (
stmt -> · break ;, this
stmt -> · break ;, new
stmt -> · break ;, LITBOOL
stmt -> · break ;, LITINT
stmt -> · break ;, LITLONG
stmt -> · break ;, LITFLOAT
stmt -> · break ;, LITDOUBLE
stmt -> · break ;, LITCHAR
stmt -> · break ;, LITSTRING
stmt -> · break ;, null
stmt -> · return expr ;, &&
stmt -> · return expr ;, ||
stmt -> · return expr ;, +
stmt -> · return expr ;, -
stmt -> · return expr ;, *
stmt -> · return expr ;, /
stmt -> · return expr ;, %
stmt -> · return expr ;, ++
stmt -> · return expr ;, --
stmt -> · return expr ;, ID
stmt -> · return expr ;, !
stmt -> · return expr ;, (
stmt -> · return expr ;, this
stmt -> · return expr ;, new
stmt -> · return expr ;, LITBOOL
stmt -> · return expr ;, LITINT
stmt -> · return expr ;, LITLONG
stmt -> · return expr ;, LITFLOAT
stmt -> · return expr ;, LITDOUBLE
stmt -> · return expr ;, LITCHAR
stmt -> · return expr ;, LITSTRING
stmt -> · return expr ;, null
stmt -> · return ;, &&
stmt -> · return ;, ||
stmt -> · return ;, +
stmt -> · return ;, -
stmt -> · return ;, *
stmt -> · return ;, /
stmt -> · return ;, %
stmt -> · return ;, ++
stmt -> · return ;, --
stmt -> · return ;, ID
stmt -> · return ;, !
stmt -> · return ;, (
stmt -> · return ;, this
stmt -> · return ;, new
stmt -> · return ;, LITBOOL
stmt -> · return ;, LITINT
stmt -> · return ;, LITLONG
stmt -> · return ;, LITFLOAT
stmt -> · return ;, LITDOUBLE
stmt -> · return ;, LITCHAR
stmt -> · return ;, LITSTRING
stmt -> · return ;, null
stmt -> · delete expr ;, &&
stmt -> · delete expr ;, ||
stmt -> · delete expr ;, +
stmt -> · delete expr ;, -
stmt -> · delete expr ;, *
stmt -> · delete expr ;, /
stmt -> · delete expr ;, %
stmt -> · delete expr ;, ++
stmt -> · delete expr ;, --
stmt -> · delete expr ;, ID
stmt -> · delete expr ;, !
stmt -> · delete expr ;, (
stmt -> · delete expr ;, this
stmt -> · delete expr ;, new
stmt -> · delete expr ;, LITBOOL
stmt -> · delete expr ;, LITINT
stmt -> · delete expr ;, LITLONG
stmt -> · delete expr ;, LITFLOAT
stmt -> · delete expr ;, LITDOUBLE
stmt -> · delete expr ;, LITCHAR
stmt -> · delete expr ;, LITSTRING
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, &&
stmt -> · while ( expr ) stmt, ||
stmt -> · while ( expr ) stmt, +
stmt -> · while ( expr ) stmt, -
stmt -> · while ( expr ) stmt, *
stmt -> · while ( expr ) stmt, /
stmt -> · while ( expr ) stmt, %
stmt -> · while ( expr ) stmt, ++
stmt -> · while ( expr ) stmt, --
stmt -> · while ( expr ) stmt, ID
stmt -> · while ( expr ) stmt, !
stmt -> · while ( expr ) stmt, (
stmt -> · while ( expr ) stmt, this
stmt -> · while ( expr ) stmt, new
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · while ( expr ) stmt, LITINT
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
namespaceblock -> · namespace ID { statements }, &&
namespaceblock -> · namespace ID { statements }, ||
namespaceblock -> · namespace ID { statements }, +
namespaceblock -> · namespace ID { statements }, -
namespaceblock -> · namespace ID { statements }, *
namespaceblock -> · namespace ID { statements }, /
namespaceblock -> · namespace ID { statements }, %
namespaceblock -> · namespace ID { statements }, ++
namespaceblock -> · namespace ID { statements }, --
namespaceblock -> · namespace ID { statements }, ID
namespaceblock -> · namespace ID { statements }, !
namespaceblock -> · namespace ID { statements }, (
namespaceblock -> · namespace ID { statements }, this
namespaceblock -> · namespace ID { statements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, &&
statementblock -> · { statements }, ||
statementblock -> · { statements }, +
statementblock -> · { statements }, -
statementblock -> · { statements }, *
statementblock -> · { statements }, /
statementblock -> · { statements }, %
statementblock -> · { statements }, ++
statementblock -> · { statements }, --
statementblock -> · { statements }, ID
statementblock -> · { statements }, !
statementblock -> · { statements }, (
statementblock -> · { statements }, this
statementblock -> · { statements }, new
statementblock -> · { statements }, LITBOOL
statementblock -> · { statements }, LITINT
statementblock -> · { statements }, LITLONG
statementblock -> · { statements }, LITFLOAT
statementblock -> · { statements }, LITDOUBLE
statementblock -> · { statements }, LITCHAR
statementblock -> · { statements }, LITSTRING
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, }
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, +
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, -
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, *
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, /
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, %
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, !
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
104
I_144_360_556_1149_1411_1493
***Set***
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, long
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, var
stmt -> if ( · expr ) stmt elifclauselist elseclause, own
stmt -> if ( · expr ) stmt elifclauselist elseclause, bor
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
105
I_145_361_557_1150_1412_1494
***Set***
stmt -> break ; ·, $
stmt -> break ; ·, namespace
stmt -> break ; ·, {
stmt -> break ; ·, ID
stmt -> break ; ·, void
stmt -> break ; ·, bool
stmt -> break ; ·, int
stmt -> break ; ·, long
stmt -> break ; ·, float
stmt -> break ; ·, double
stmt -> break ; ·, char
stmt -> break ; ·, string
stmt -> break ; ·, var
stmt -> break ; ·, own
stmt -> break ; ·, bor
stmt -> break ; ·, const
stmt -> break ; ·, extern
stmt -> break ; ·, class
stmt -> break ; ·, (
stmt -> break ; ·, this
stmt -> break ; ·, new
stmt -> break ; ·, LITBOOL
stmt -> break ; ·, LITINT
stmt -> break ; ·, LITLONG
stmt -> break ; ·, LITFLOAT
stmt -> break ; ·, LITDOUBLE
stmt -> break ; ·, LITCHAR
stmt -> break ; ·, LITSTRING
stmt -> break ; ·, null
stmt -> break ; ·, ++
stmt -> break ; ·, --
stmt -> break ; ·, break
stmt -> break ; ·, return
stmt -> break ; ·, delete
stmt -> break ; ·, while
stmt -> break ; ·, for
stmt -> break ; ·, if
stmt -> break ; ·, }
stmt -> break ; ·, &&
stmt -> break ; ·, ||
stmt -> break ; ·, +
stmt -> break ; ·, -
stmt -> break ; ·, *
stmt -> break ; ·, /
stmt -> break ; ·, %
stmt -> break ; ·, !
stmt -> break ; ·, else
***EndSet***
***EndState***
***State***
106
I_146_362_558_1151_1413_1495
***Set***
stmt -> return ; ·, $
stmt -> return ; ·, namespace
stmt -> return ; ·, {
stmt -> return ; ·, ID
stmt -> return ; ·, void
stmt -> return ; ·, bool
stmt -> return ; ·, int
stmt -> return ; ·, long
stmt -> return ; ·, float
stmt -> return ; ·, double
stmt -> return ; ·, char
stmt -> return ; ·, string
stmt -> return ; ·, var
stmt -> return ; ·, own
stmt -> return ; ·, bor
stmt -> return ; ·, const
stmt -> return ; ·, extern
stmt -> return ; ·, class
stmt -> return ; ·, (
stmt -> return ; ·, this
stmt -> return ; ·, new
stmt -> return ; ·, LITBOOL
stmt -> return ; ·, LITINT
stmt -> return ; ·, LITLONG
stmt -> return ; ·, LITFLOAT
stmt -> return ; ·, LITDOUBLE
stmt -> return ; ·, LITCHAR
stmt -> return ; ·, LITSTRING
stmt -> return ; ·, null
stmt -> return ; ·, ++
stmt -> return ; ·, --
stmt -> return ; ·, break
stmt -> return ; ·, return
stmt -> return ; ·, delete
stmt -> return ; ·, while
stmt -> return ; ·, for
stmt -> return ; ·, if
stmt -> return ; ·, }
stmt -> return ; ·, &&
stmt -> return ; ·, ||
stmt -> return ; ·, +
stmt -> return ; ·, -
stmt -> return ; ·, *
stmt -> return ; ·, /
stmt -> return ; ·, %
stmt -> return ; ·, !
stmt -> return ; ·, else
***EndSet***
***EndState***
***State***
107
I_147_363_559_1152_1414_1496
***Set***
stmt -> return expr · ;, $
stmt -> return expr · ;, namespace
stmt -> return expr · ;, {
stmt -> return expr · ;, ID
stmt -> return expr · ;, void
stmt -> return expr · ;, bool
stmt -> return expr · ;, int
stmt -> return expr · ;, long
stmt -> return expr · ;, float
stmt -> return expr · ;, double
stmt -> return expr · ;, char
stmt -> return expr · ;, string
stmt -> return expr · ;, var
stmt -> return expr · ;, own
stmt -> return expr · ;, bor
stmt -> return expr · ;, const
stmt -> return expr · ;, extern
stmt -> return expr · ;, class
stmt -> return expr · ;, (
stmt -> return expr · ;, this
stmt -> return expr · ;, new
stmt -> return expr · ;, LITBOOL
stmt -> return expr · ;, LITINT
stmt -> return expr · ;, LITLONG
stmt -> return expr · ;, LITFLOAT
stmt -> return expr · ;, LITDOUBLE
stmt -> return expr · ;, LITCHAR
stmt -> return expr · ;, LITSTRING
stmt -> return expr · ;, null
stmt -> return expr · ;, ++
stmt -> return expr · ;, --
stmt -> return expr · ;, break
stmt -> return expr · ;, return
stmt -> return expr · ;, delete
stmt -> return expr · ;, while
stmt -> return expr · ;, for
stmt -> return expr · ;, if
stmt -> return expr · ;, }
stmt -> return expr · ;, &&
stmt -> return expr · ;, ||
stmt -> return expr · ;, +
stmt -> return expr · ;, -
stmt -> return expr · ;, *
stmt -> return expr · ;, /
stmt -> return expr · ;, %
stmt -> return expr · ;, !
stmt -> return expr · ;, else
***EndSet***
***EndState***
***State***
108
I_170_254_315_677_721_794_817_881_904_1230_1253_1299
***Set***
primary -> ( expr · ), .
primary -> ( expr · ), ;
primary -> ( expr · ), &&
primary -> ( expr · ), ||
primary -> ( expr · ), >
primary -> ( expr · ), <
primary -> ( expr · ), >=
primary -> ( expr · ), <=
primary -> ( expr · ), ==
primary -> ( expr · ), !=
primary -> ( expr · ), +
primary -> ( expr · ), -
primary -> ( expr · ), *
primary -> ( expr · ), /
primary -> ( expr · ), %
primary -> ( expr · ), )
primary -> ( expr · ), ,
primary -> ( expr · ), ]
***EndSet***
***EndState***
***State***
109
I_193_364_560_1153_1415_1497
***Set***
statementblock -> { statements · }, $
statementblock -> { statements · }, namespace
statementblock -> { statements · }, {
statementblock -> { statements · }, ID
statementblock -> { statements · }, void
statementblock -> { statements · }, bool
statementblock -> { statements · }, int
statementblock -> { statements · }, long
statementblock -> { statements · }, float
statementblock -> { statements · }, double
statementblock -> { statements · }, char
statementblock -> { statements · }, string
statementblock -> { statements · }, var
statementblock -> { statements · }, own
statementblock -> { statements · }, bor
statementblock -> { statements · }, const
statementblock -> { statements · }, extern
statementblock -> { statements · }, class
statementblock -> { statements · }, (
statementblock -> { statements · }, this
statementblock -> { statements · }, new
statementblock -> { statements · }, LITBOOL
statementblock -> { statements · }, LITINT
statementblock -> { statements · }, LITLONG
statementblock -> { statements · }, LITFLOAT
statementblock -> { statements · }, LITDOUBLE
statementblock -> { statements · }, LITCHAR
statementblock -> { statements · }, LITSTRING
statementblock -> { statements · }, null
statementblock -> { statements · }, ++
statementblock -> { statements · }, --
statementblock -> { statements · }, break
statementblock -> { statements · }, return
statementblock -> { statements · }, delete
statementblock -> { statements · }, while
statementblock -> { statements · }, for
statementblock -> { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { statements · }, }
statementblock -> { statements · }, &&
statementblock -> { statements · }, ||
statementblock -> { statements · }, +
statementblock -> { statements · }, -
statementblock -> { statements · }, *
statementblock -> { statements · }, /
statementblock -> { statements · }, %
statementblock -> { statements · }, !
statementblock -> { statements · }, else
***EndSet***
***EndState***
***State***
110
I_201_258_316_678_722_795_818_882_905_1231_1254_1300_1351
***Set***
incdec -> -- ID ·, ;
incdec -> -- ID ·, &&
incdec -> -- ID ·, ||
incdec -> -- ID ·, >
incdec -> -- ID ·, <
incdec -> -- ID ·, >=
incdec -> -- ID ·, <=
incdec -> -- ID ·, ==
incdec -> -- ID ·, !=
incdec -> -- ID ·, +
incdec -> -- ID ·, -
incdec -> -- ID ·, *
incdec -> -- ID ·, /
incdec -> -- ID ·, %
incdec -> -- ID ·, )
incdec -> -- ID ·, ,
incdec -> -- ID ·, ]
***EndSet***
***EndState***
***State***
111
I_202_259_317_679_723_796_819_883_906_1232_1255_1301_1352
***Set***
incdec -> ++ ID ·, ;
incdec -> ++ ID ·, &&
incdec -> ++ ID ·, ||
incdec -> ++ ID ·, >
incdec -> ++ ID ·, <
incdec -> ++ ID ·, >=
incdec -> ++ ID ·, <=
incdec -> ++ ID ·, ==
incdec -> ++ ID ·, !=
incdec -> ++ ID ·, +
incdec -> ++ ID ·, -
incdec -> ++ ID ·, *
incdec -> ++ ID ·, /
incdec -> ++ ID ·, %
incdec -> ++ ID ·, )
incdec -> ++ ID ·, ,
incdec -> ++ ID ·, ]
***EndSet***
***EndState***
***State***
112
I_203_267_325_687_726_799_822_886_909_1235_1258_1304_1353
***Set***
call -> ID ( · args ), ;
call -> ID ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> ID ( · args ), &&
call -> ID ( · args ), ||
call -> ID ( · args ), >
call -> ID ( · args ), <
call -> ID ( · args ), >=
call -> ID ( · args ), <=
call -> ID ( · args ), ==
call -> ID ( · args ), !=
call -> ID ( · args ), +
call -> ID ( · args ), -
call -> ID ( · args ), *
call -> ID ( · args ), /
call -> ID ( · args ), %
call -> ID ( · args ), )
call -> ID ( · args ), ,
call -> ID ( · args ), ]
***EndSet***
***EndState***
***State***
113
I_204_225_233_268_326_436_464_568_688_727_800_823_887_910_933_1236_1259_1305_1354
***Set***
idBracket -> ID [ · optidx ], ID
idBracket -> ID [ · optidx ], operator
idBracket -> ID [ · optidx ], =
idBracket -> ID [ · optidx ], +=
idBracket -> ID [ · optidx ], -=
idBracket -> ID [ · optidx ], *=
idBracket -> ID [ · optidx ], /=
idBracket -> ID [ · optidx ], %=
idBracket -> ID [ · optidx ], .
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
idBracket -> ID [ · optidx ], ;
idBracket -> ID [ · optidx ], &&
idBracket -> ID [ · optidx ], ||
idBracket -> ID [ · optidx ], >
idBracket -> ID [ · optidx ], <
idBracket -> ID [ · optidx ], >=
idBracket -> ID [ · optidx ], <=
idBracket -> ID [ · optidx ], ==
idBracket -> ID [ · optidx ], !=
idBracket -> ID [ · optidx ], +
idBracket -> ID [ · optidx ], -
idBracket -> ID [ · optidx ], *
idBracket -> ID [ · optidx ], /
idBracket -> ID [ · optidx ], %
idBracket -> ID [ · optidx ], )
idBracket -> ID [ · optidx ], ,
idBracket -> ID [ · optidx ], ]
***EndSet***
***EndState***
***State***
114
I_205_269_327_689_728_801_824_888_911_1237_1260_1306_1355
***Set***
incdec -> ID -- ·, ;
incdec -> ID -- ·, &&
incdec -> ID -- ·, ||
incdec -> ID -- ·, >
incdec -> ID -- ·, <
incdec -> ID -- ·, >=
incdec -> ID -- ·, <=
incdec -> ID -- ·, ==
incdec -> ID -- ·, !=
incdec -> ID -- ·, +
incdec -> ID -- ·, -
incdec -> ID -- ·, *
incdec -> ID -- ·, /
incdec -> ID -- ·, %
incdec -> ID -- ·, )
incdec -> ID -- ·, ,
incdec -> ID -- ·, ]
***EndSet***
***EndState***
***State***
115
I_206_270_328_690_729_802_825_889_912_1238_1261_1307_1356
***Set***
incdec -> ID ++ ·, ;
incdec -> ID ++ ·, &&
incdec -> ID ++ ·, ||
incdec -> ID ++ ·, >
incdec -> ID ++ ·, <
incdec -> ID ++ ·, >=
incdec -> ID ++ ·, <=
incdec -> ID ++ ·, ==
incdec -> ID ++ ·, !=
incdec -> ID ++ ·, +
incdec -> ID ++ ·, -
incdec -> ID ++ ·, *
incdec -> ID ++ ·, /
incdec -> ID ++ ·, %
incdec -> ID ++ ·, )
incdec -> ID ++ ·, ,
incdec -> ID ++ ·, ]
***EndSet***
***EndState***
***State***
116
I_207_366
***Set***
statements -> statements stmt ·, $
statements -> statements stmt ·, namespace
statements -> statements stmt ·, {
statements -> statements stmt ·, ID
statements -> statements stmt ·, void
statements -> statements stmt ·, bool
statements -> statements stmt ·, int
statements -> statements stmt ·, long
statements -> statements stmt ·, float
statements -> statements stmt ·, double
statements -> statements stmt ·, char
statements -> statements stmt ·, string
statements -> statements stmt ·, var
statements -> statements stmt ·, own
statements -> statements stmt ·, bor
statements -> statements stmt ·, const
statements -> statements stmt ·, extern
statements -> statements stmt ·, class
statements -> statements stmt ·, (
statements -> statements stmt ·, this
statements -> statements stmt ·, new
statements -> statements stmt ·, LITBOOL
statements -> statements stmt ·, LITINT
statements -> statements stmt ·, LITLONG
statements -> statements stmt ·, LITFLOAT
statements -> statements stmt ·, LITDOUBLE
statements -> statements stmt ·, LITCHAR
statements -> statements stmt ·, LITSTRING
statements -> statements stmt ·, null
statements -> statements stmt ·, ++
statements -> statements stmt ·, --
statements -> statements stmt ·, break
statements -> statements stmt ·, return
statements -> statements stmt ·, delete
statements -> statements stmt ·, while
statements -> statements stmt ·, for
statements -> statements stmt ·, if
statements -> statements stmt ·, }
***EndSet***
***EndState***
***State***
117
I_209_367_562_1054_1155_1417_1499
***Set***
declstmt -> tmodf type · ID = expr ;, $
declstmt -> tmodf type · ID ( params ) { statements }, $
declstmt -> tmodf type · operator ID ( params ) { statements }, $
declstmt -> tmodf type · ID = expr ;, namespace
declstmt -> tmodf type · ID ( params ) { statements }, namespace
declstmt -> tmodf type · operator ID ( params ) { statements }, namespace
declstmt -> tmodf type · ID = expr ;, {
declstmt -> tmodf type · ID ( params ) { statements }, {
declstmt -> tmodf type · operator ID ( params ) { statements }, {
declstmt -> tmodf type · ID = expr ;, ID
declstmt -> tmodf type · ID ( params ) { statements }, ID
declstmt -> tmodf type · operator ID ( params ) { statements }, ID
declstmt -> tmodf type · ID = expr ;, void
declstmt -> tmodf type · ID ( params ) { statements }, void
declstmt -> tmodf type · operator ID ( params ) { statements }, void
declstmt -> tmodf type · ID = expr ;, bool
declstmt -> tmodf type · ID ( params ) { statements }, bool
declstmt -> tmodf type · operator ID ( params ) { statements }, bool
declstmt -> tmodf type · ID = expr ;, int
declstmt -> tmodf type · ID ( params ) { statements }, int
declstmt -> tmodf type · operator ID ( params ) { statements }, int
declstmt -> tmodf type · ID = expr ;, long
declstmt -> tmodf type · ID ( params ) { statements }, long
declstmt -> tmodf type · operator ID ( params ) { statements }, long
declstmt -> tmodf type · ID = expr ;, float
declstmt -> tmodf type · ID ( params ) { statements }, float
declstmt -> tmodf type · operator ID ( params ) { statements }, float
declstmt -> tmodf type · ID = expr ;, double
declstmt -> tmodf type · ID ( params ) { statements }, double
declstmt -> tmodf type · operator ID ( params ) { statements }, double
declstmt -> tmodf type · ID = expr ;, char
declstmt -> tmodf type · ID ( params ) { statements }, char
declstmt -> tmodf type · operator ID ( params ) { statements }, char
declstmt -> tmodf type · ID = expr ;, string
declstmt -> tmodf type · ID ( params ) { statements }, string
declstmt -> tmodf type · operator ID ( params ) { statements }, string
declstmt -> tmodf type · ID = expr ;, var
declstmt -> tmodf type · ID ( params ) { statements }, var
declstmt -> tmodf type · operator ID ( params ) { statements }, var
declstmt -> tmodf type · ID = expr ;, own
declstmt -> tmodf type · ID ( params ) { statements }, own
declstmt -> tmodf type · operator ID ( params ) { statements }, own
declstmt -> tmodf type · ID = expr ;, bor
declstmt -> tmodf type · ID ( params ) { statements }, bor
declstmt -> tmodf type · operator ID ( params ) { statements }, bor
declstmt -> tmodf type · ID = expr ;, const
declstmt -> tmodf type · ID ( params ) { statements }, const
declstmt -> tmodf type · operator ID ( params ) { statements }, const
declstmt -> tmodf type · ID = expr ;, extern
declstmt -> tmodf type · ID ( params ) { statements }, extern
declstmt -> tmodf type · operator ID ( params ) { statements }, extern
declstmt -> tmodf type · ID = expr ;, class
declstmt -> tmodf type · ID ( params ) { statements }, class
declstmt -> tmodf type · operator ID ( params ) { statements }, class
declstmt -> tmodf type · ID = expr ;, (
declstmt -> tmodf type · ID ( params ) { statements }, (
declstmt -> tmodf type · operator ID ( params ) { statements }, (
declstmt -> tmodf type · ID = expr ;, this
declstmt -> tmodf type · ID ( params ) { statements }, this
declstmt -> tmodf type · operator ID ( params ) { statements }, this
declstmt -> tmodf type · ID = expr ;, new
declstmt -> tmodf type · ID ( params ) { statements }, new
declstmt -> tmodf type · operator ID ( params ) { statements }, new
declstmt -> tmodf type · ID = expr ;, LITBOOL
declstmt -> tmodf type · ID ( params ) { statements }, LITBOOL
declstmt -> tmodf type · operator ID ( params ) { statements }, LITBOOL
declstmt -> tmodf type · ID = expr ;, LITINT
declstmt -> tmodf type · ID ( params ) { statements }, LITINT
declstmt -> tmodf type · operator ID ( params ) { statements }, LITINT
declstmt -> tmodf type · ID = expr ;, LITLONG
declstmt -> tmodf type · ID ( params ) { statements }, LITLONG
declstmt -> tmodf type · operator ID ( params ) { statements }, LITLONG
declstmt -> tmodf type · ID = expr ;, LITFLOAT
declstmt -> tmodf type · ID ( params ) { statements }, LITFLOAT
declstmt -> tmodf type · operator ID ( params ) { statements }, LITFLOAT
declstmt -> tmodf type · ID = expr ;, LITDOUBLE
declstmt -> tmodf type · ID ( params ) { statements }, LITDOUBLE
declstmt -> tmodf type · operator ID ( params ) { statements }, LITDOUBLE
declstmt -> tmodf type · ID = expr ;, LITCHAR
declstmt -> tmodf type · ID ( params ) { statements }, LITCHAR
declstmt -> tmodf type · operator ID ( params ) { statements }, LITCHAR
declstmt -> tmodf type · ID = expr ;, LITSTRING
declstmt -> tmodf type · ID ( params ) { statements }, LITSTRING
declstmt -> tmodf type · operator ID ( params ) { statements }, LITSTRING
declstmt -> tmodf type · ID = expr ;, null
declstmt -> tmodf type · ID ( params ) { statements }, null
declstmt -> tmodf type · operator ID ( params ) { statements }, null
declstmt -> tmodf type · ID = expr ;, ++
declstmt -> tmodf type · ID ( params ) { statements }, ++
declstmt -> tmodf type · operator ID ( params ) { statements }, ++
declstmt -> tmodf type · ID = expr ;, --
declstmt -> tmodf type · ID ( params ) { statements }, --
declstmt -> tmodf type · operator ID ( params ) { statements }, --
declstmt -> tmodf type · ID = expr ;, break
declstmt -> tmodf type · ID ( params ) { statements }, break
declstmt -> tmodf type · operator ID ( params ) { statements }, break
declstmt -> tmodf type · ID = expr ;, return
declstmt -> tmodf type · ID ( params ) { statements }, return
declstmt -> tmodf type · operator ID ( params ) { statements }, return
declstmt -> tmodf type · ID = expr ;, delete
declstmt -> tmodf type · ID ( params ) { statements }, delete
declstmt -> tmodf type · operator ID ( params ) { statements }, delete
declstmt -> tmodf type · ID = expr ;, while
declstmt -> tmodf type · ID ( params ) { statements }, while
declstmt -> tmodf type · operator ID ( params ) { statements }, while
declstmt -> tmodf type · ID = expr ;, for
declstmt -> tmodf type · ID ( params ) { statements }, for
declstmt -> tmodf type · operator ID ( params ) { statements }, for
declstmt -> tmodf type · ID = expr ;, if
declstmt -> tmodf type · ID ( params ) { statements }, if
declstmt -> tmodf type · operator ID ( params ) { statements }, if
declstmt -> tmodf type · ID = expr ;, }
declstmt -> tmodf type · ID ( params ) { statements }, }
declstmt -> tmodf type · operator ID ( params ) { statements }, }
declstmt -> tmodf type · ID = expr ;, &&
declstmt -> tmodf type · ID ( params ) { statements }, &&
declstmt -> tmodf type · operator ID ( params ) { statements }, &&
declstmt -> tmodf type · ID = expr ;, ||
declstmt -> tmodf type · ID ( params ) { statements }, ||
declstmt -> tmodf type · operator ID ( params ) { statements }, ||
declstmt -> tmodf type · ID = expr ;, +
declstmt -> tmodf type · ID ( params ) { statements }, +
declstmt -> tmodf type · operator ID ( params ) { statements }, +
declstmt -> tmodf type · ID = expr ;, -
declstmt -> tmodf type · ID ( params ) { statements }, -
declstmt -> tmodf type · operator ID ( params ) { statements }, -
declstmt -> tmodf type · ID = expr ;, *
declstmt -> tmodf type · ID ( params ) { statements }, *
declstmt -> tmodf type · operator ID ( params ) { statements }, *
declstmt -> tmodf type · ID = expr ;, /
declstmt -> tmodf type · ID ( params ) { statements }, /
declstmt -> tmodf type · operator ID ( params ) { statements }, /
declstmt -> tmodf type · ID = expr ;, %
declstmt -> tmodf type · ID ( params ) { statements }, %
declstmt -> tmodf type · operator ID ( params ) { statements }, %
declstmt -> tmodf type · ID = expr ;, !
declstmt -> tmodf type · ID ( params ) { statements }, !
declstmt -> tmodf type · operator ID ( params ) { statements }, !
declstmt -> tmodf type · ID = expr ;, else
declstmt -> tmodf type · ID ( params ) { statements }, else
declstmt -> tmodf type · operator ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
118
I_211_368_563_1156_1418_1500
***Set***
stmt -> stmtexpr ; ·, $
stmt -> stmtexpr ; ·, namespace
stmt -> stmtexpr ; ·, {
stmt -> stmtexpr ; ·, ID
stmt -> stmtexpr ; ·, void
stmt -> stmtexpr ; ·, bool
stmt -> stmtexpr ; ·, int
stmt -> stmtexpr ; ·, long
stmt -> stmtexpr ; ·, float
stmt -> stmtexpr ; ·, double
stmt -> stmtexpr ; ·, char
stmt -> stmtexpr ; ·, string
stmt -> stmtexpr ; ·, var
stmt -> stmtexpr ; ·, own
stmt -> stmtexpr ; ·, bor
stmt -> stmtexpr ; ·, const
stmt -> stmtexpr ; ·, extern
stmt -> stmtexpr ; ·, class
stmt -> stmtexpr ; ·, (
stmt -> stmtexpr ; ·, this
stmt -> stmtexpr ; ·, new
stmt -> stmtexpr ; ·, LITBOOL
stmt -> stmtexpr ; ·, LITINT
stmt -> stmtexpr ; ·, LITLONG
stmt -> stmtexpr ; ·, LITFLOAT
stmt -> stmtexpr ; ·, LITDOUBLE
stmt -> stmtexpr ; ·, LITCHAR
stmt -> stmtexpr ; ·, LITSTRING
stmt -> stmtexpr ; ·, null
stmt -> stmtexpr ; ·, ++
stmt -> stmtexpr ; ·, --
stmt -> stmtexpr ; ·, break
stmt -> stmtexpr ; ·, return
stmt -> stmtexpr ; ·, delete
stmt -> stmtexpr ; ·, while
stmt -> stmtexpr ; ·, for
stmt -> stmtexpr ; ·, if
stmt -> stmtexpr ; ·, }
stmt -> stmtexpr ; ·, &&
stmt -> stmtexpr ; ·, ||
stmt -> stmtexpr ; ·, +
stmt -> stmtexpr ; ·, -
stmt -> stmtexpr ; ·, *
stmt -> stmtexpr ; ·, /
stmt -> stmtexpr ; ·, %
stmt -> stmtexpr ; ·, !
stmt -> stmtexpr ; ·, else
***EndSet***
***EndState***
***State***
119
I_212_369_564_1055_1157_1419_1501
***Set***
declstmt -> type operator · ID ( params ) { statements }, $
declstmt -> type operator · ID ( params ) { statements }, namespace
declstmt -> type operator · ID ( params ) { statements }, {
declstmt -> type operator · ID ( params ) { statements }, ID
declstmt -> type operator · ID ( params ) { statements }, void
declstmt -> type operator · ID ( params ) { statements }, bool
declstmt -> type operator · ID ( params ) { statements }, int
declstmt -> type operator · ID ( params ) { statements }, long
declstmt -> type operator · ID ( params ) { statements }, float
declstmt -> type operator · ID ( params ) { statements }, double
declstmt -> type operator · ID ( params ) { statements }, char
declstmt -> type operator · ID ( params ) { statements }, string
declstmt -> type operator · ID ( params ) { statements }, var
declstmt -> type operator · ID ( params ) { statements }, own
declstmt -> type operator · ID ( params ) { statements }, bor
declstmt -> type operator · ID ( params ) { statements }, const
declstmt -> type operator · ID ( params ) { statements }, extern
declstmt -> type operator · ID ( params ) { statements }, class
declstmt -> type operator · ID ( params ) { statements }, (
declstmt -> type operator · ID ( params ) { statements }, this
declstmt -> type operator · ID ( params ) { statements }, new
declstmt -> type operator · ID ( params ) { statements }, LITBOOL
declstmt -> type operator · ID ( params ) { statements }, LITINT
declstmt -> type operator · ID ( params ) { statements }, LITLONG
declstmt -> type operator · ID ( params ) { statements }, LITFLOAT
declstmt -> type operator · ID ( params ) { statements }, LITDOUBLE
declstmt -> type operator · ID ( params ) { statements }, LITCHAR
declstmt -> type operator · ID ( params ) { statements }, LITSTRING
declstmt -> type operator · ID ( params ) { statements }, null
declstmt -> type operator · ID ( params ) { statements }, ++
declstmt -> type operator · ID ( params ) { statements }, --
declstmt -> type operator · ID ( params ) { statements }, break
declstmt -> type operator · ID ( params ) { statements }, return
declstmt -> type operator · ID ( params ) { statements }, delete
declstmt -> type operator · ID ( params ) { statements }, while
declstmt -> type operator · ID ( params ) { statements }, for
declstmt -> type operator · ID ( params ) { statements }, if
declstmt -> type operator · ID ( params ) { statements }, }
declstmt -> type operator · ID ( params ) { statements }, &&
declstmt -> type operator · ID ( params ) { statements }, ||
declstmt -> type operator · ID ( params ) { statements }, +
declstmt -> type operator · ID ( params ) { statements }, -
declstmt -> type operator · ID ( params ) { statements }, *
declstmt -> type operator · ID ( params ) { statements }, /
declstmt -> type operator · ID ( params ) { statements }, %
declstmt -> type operator · ID ( params ) { statements }, !
declstmt -> type operator · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
120
I_213_370_565_1056_1158_1420_1502
***Set***
declstmt -> type ID · = expr ;, $
declstmt -> type ID · ( params ) { statements }, $
declstmt -> type ID · = expr ;, namespace
declstmt -> type ID · ( params ) { statements }, namespace
declstmt -> type ID · = expr ;, {
declstmt -> type ID · ( params ) { statements }, {
declstmt -> type ID · = expr ;, ID
declstmt -> type ID · ( params ) { statements }, ID
declstmt -> type ID · = expr ;, void
declstmt -> type ID · ( params ) { statements }, void
declstmt -> type ID · = expr ;, bool
declstmt -> type ID · ( params ) { statements }, bool
declstmt -> type ID · = expr ;, int
declstmt -> type ID · ( params ) { statements }, int
declstmt -> type ID · = expr ;, long
declstmt -> type ID · ( params ) { statements }, long
declstmt -> type ID · = expr ;, float
declstmt -> type ID · ( params ) { statements }, float
declstmt -> type ID · = expr ;, double
declstmt -> type ID · ( params ) { statements }, double
declstmt -> type ID · = expr ;, char
declstmt -> type ID · ( params ) { statements }, char
declstmt -> type ID · = expr ;, string
declstmt -> type ID · ( params ) { statements }, string
declstmt -> type ID · = expr ;, var
declstmt -> type ID · ( params ) { statements }, var
declstmt -> type ID · = expr ;, own
declstmt -> type ID · ( params ) { statements }, own
declstmt -> type ID · = expr ;, bor
declstmt -> type ID · ( params ) { statements }, bor
declstmt -> type ID · = expr ;, const
declstmt -> type ID · ( params ) { statements }, const
declstmt -> type ID · = expr ;, extern
declstmt -> type ID · ( params ) { statements }, extern
declstmt -> type ID · = expr ;, class
declstmt -> type ID · ( params ) { statements }, class
declstmt -> type ID · = expr ;, (
declstmt -> type ID · ( params ) { statements }, (
declstmt -> type ID · = expr ;, this
declstmt -> type ID · ( params ) { statements }, this
declstmt -> type ID · = expr ;, new
declstmt -> type ID · ( params ) { statements }, new
declstmt -> type ID · = expr ;, LITBOOL
declstmt -> type ID · ( params ) { statements }, LITBOOL
declstmt -> type ID · = expr ;, LITINT
declstmt -> type ID · ( params ) { statements }, LITINT
declstmt -> type ID · = expr ;, LITLONG
declstmt -> type ID · ( params ) { statements }, LITLONG
declstmt -> type ID · = expr ;, LITFLOAT
declstmt -> type ID · ( params ) { statements }, LITFLOAT
declstmt -> type ID · = expr ;, LITDOUBLE
declstmt -> type ID · ( params ) { statements }, LITDOUBLE
declstmt -> type ID · = expr ;, LITCHAR
declstmt -> type ID · ( params ) { statements }, LITCHAR
declstmt -> type ID · = expr ;, LITSTRING
declstmt -> type ID · ( params ) { statements }, LITSTRING
declstmt -> type ID · = expr ;, null
declstmt -> type ID · ( params ) { statements }, null
declstmt -> type ID · = expr ;, ++
declstmt -> type ID · ( params ) { statements }, ++
declstmt -> type ID · = expr ;, --
declstmt -> type ID · ( params ) { statements }, --
declstmt -> type ID · = expr ;, break
declstmt -> type ID · ( params ) { statements }, break
declstmt -> type ID · = expr ;, return
declstmt -> type ID · ( params ) { statements }, return
declstmt -> type ID · = expr ;, delete
declstmt -> type ID · ( params ) { statements }, delete
declstmt -> type ID · = expr ;, while
declstmt -> type ID · ( params ) { statements }, while
declstmt -> type ID · = expr ;, for
declstmt -> type ID · ( params ) { statements }, for
declstmt -> type ID · = expr ;, if
declstmt -> type ID · ( params ) { statements }, if
declstmt -> type ID · = expr ;, }
declstmt -> type ID · ( params ) { statements }, }
declstmt -> type ID · = expr ;, &&
declstmt -> type ID · ( params ) { statements }, &&
declstmt -> type ID · = expr ;, ||
declstmt -> type ID · ( params ) { statements }, ||
declstmt -> type ID · = expr ;, +
declstmt -> type ID · ( params ) { statements }, +
declstmt -> type ID · = expr ;, -
declstmt -> type ID · ( params ) { statements }, -
declstmt -> type ID · = expr ;, *
declstmt -> type ID · ( params ) { statements }, *
declstmt -> type ID · = expr ;, /
declstmt -> type ID · ( params ) { statements }, /
declstmt -> type ID · = expr ;, %
declstmt -> type ID · ( params ) { statements }, %
declstmt -> type ID · = expr ;, !
declstmt -> type ID · ( params ) { statements }, !
declstmt -> type ID · = expr ;, else
declstmt -> type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
121
I_214_227_234_465_467_569_934_1022_1094_1108_1163_1177_1430_1444_1470
***Set***
primitiveBracket -> primitive [ · optidx ], ID
primitiveBracket -> primitive [ · optidx ], operator
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> primitive [ · optidx ], .
primitiveBracket -> primitive [ · optidx ], ;
primitiveBracket -> primitive [ · optidx ], &&
primitiveBracket -> primitive [ · optidx ], ||
primitiveBracket -> primitive [ · optidx ], >
primitiveBracket -> primitive [ · optidx ], <
primitiveBracket -> primitive [ · optidx ], >=
primitiveBracket -> primitive [ · optidx ], <=
primitiveBracket -> primitive [ · optidx ], ==
primitiveBracket -> primitive [ · optidx ], !=
primitiveBracket -> primitive [ · optidx ], +
primitiveBracket -> primitive [ · optidx ], -
primitiveBracket -> primitive [ · optidx ], *
primitiveBracket -> primitive [ · optidx ], /
primitiveBracket -> primitive [ · optidx ], %
primitiveBracket -> primitive [ · optidx ], )
primitiveBracket -> primitive [ · optidx ], ,
primitiveBracket -> primitive [ · optidx ], ]
***EndSet***
***EndState***
***State***
122
I_215_285_343_469_572_704_735_808_826_895_913_937_1244_1262_1308
***Set***
memberaccess -> primary . · ID, (
memberaccess -> primary . · ID, =
memberaccess -> primary . · ID, +=
memberaccess -> primary . · ID, -=
memberaccess -> primary . · ID, *=
memberaccess -> primary . · ID, /=
memberaccess -> primary . · ID, %=
memberaccess -> primary . · ID, [
memberaccess -> primary . · ID, .
memberaccess -> primary . · ID, ;
memberaccess -> primary . · ID, &&
memberaccess -> primary . · ID, ||
memberaccess -> primary . · ID, >
memberaccess -> primary . · ID, <
memberaccess -> primary . · ID, >=
memberaccess -> primary . · ID, <=
memberaccess -> primary . · ID, ==
memberaccess -> primary . · ID, !=
memberaccess -> primary . · ID, +
memberaccess -> primary . · ID, -
memberaccess -> primary . · ID, *
memberaccess -> primary . · ID, /
memberaccess -> primary . · ID, %
memberaccess -> primary . · ID, )
memberaccess -> primary . · ID, ,
memberaccess -> primary . · ID, ]
***EndSet***
***EndState***
***State***
123
I_216_344_705
***Set***
assign -> lvalue = · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue = · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue = · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
124
I_217_345_706
***Set***
assign -> lvalue += · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue += · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue += · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
125
I_218_346_707
***Set***
assign -> lvalue -= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue -= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue -= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
126
I_219_347_708
***Set***
assign -> lvalue *= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue *= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue *= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
127
I_220_348_709
***Set***
assign -> lvalue /= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue /= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue /= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
128
I_221_349_710
***Set***
assign -> lvalue %= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue %= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue %= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
129
I_222_286_350_711_736_809_827_896_914_1245_1263_1309_1358
***Set***
call -> memberaccess ( · args ), ;
call -> memberaccess ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> memberaccess ( · args ), &&
call -> memberaccess ( · args ), ||
call -> memberaccess ( · args ), >
call -> memberaccess ( · args ), <
call -> memberaccess ( · args ), >=
call -> memberaccess ( · args ), <=
call -> memberaccess ( · args ), ==
call -> memberaccess ( · args ), !=
call -> memberaccess ( · args ), +
call -> memberaccess ( · args ), -
call -> memberaccess ( · args ), *
call -> memberaccess ( · args ), /
call -> memberaccess ( · args ), %
call -> memberaccess ( · args ), )
call -> memberaccess ( · args ), ,
call -> memberaccess ( · args ), ]
***EndSet***
***EndState***
***State***
130
I_223_287_351_470_573_712_737_810_828_897_915_938_1246_1264_1310
***Set***
indexaccess -> memberaccess [ · aexpr ], =
indexaccess -> memberaccess [ · aexpr ], +=
indexaccess -> memberaccess [ · aexpr ], -=
indexaccess -> memberaccess [ · aexpr ], *=
indexaccess -> memberaccess [ · aexpr ], /=
indexaccess -> memberaccess [ · aexpr ], %=
indexaccess -> memberaccess [ · aexpr ], .
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
indexaccess -> memberaccess [ · aexpr ], ;
indexaccess -> memberaccess [ · aexpr ], &&
indexaccess -> memberaccess [ · aexpr ], ||
indexaccess -> memberaccess [ · aexpr ], >
indexaccess -> memberaccess [ · aexpr ], <
indexaccess -> memberaccess [ · aexpr ], >=
indexaccess -> memberaccess [ · aexpr ], <=
indexaccess -> memberaccess [ · aexpr ], ==
indexaccess -> memberaccess [ · aexpr ], !=
indexaccess -> memberaccess [ · aexpr ], +
indexaccess -> memberaccess [ · aexpr ], -
indexaccess -> memberaccess [ · aexpr ], *
indexaccess -> memberaccess [ · aexpr ], /
indexaccess -> memberaccess [ · aexpr ], %
indexaccess -> memberaccess [ · aexpr ], )
indexaccess -> memberaccess [ · aexpr ], ,
indexaccess -> memberaccess [ · aexpr ], ]
***EndSet***
***EndState***
***State***
131
I_224_655_832_1365_1534_1596
***Set***
namespaceblock -> namespace ID { · statements }, $
namespaceblock -> namespace ID { · statements }, namespace
namespaceblock -> namespace ID { · statements }, {
namespaceblock -> namespace ID { · statements }, ID
namespaceblock -> namespace ID { · statements }, void
namespaceblock -> namespace ID { · statements }, bool
namespaceblock -> namespace ID { · statements }, int
namespaceblock -> namespace ID { · statements }, long
namespaceblock -> namespace ID { · statements }, float
namespaceblock -> namespace ID { · statements }, double
namespaceblock -> namespace ID { · statements }, char
namespaceblock -> namespace ID { · statements }, string
namespaceblock -> namespace ID { · statements }, var
namespaceblock -> namespace ID { · statements }, own
namespaceblock -> namespace ID { · statements }, bor
namespaceblock -> namespace ID { · statements }, const
namespaceblock -> namespace ID { · statements }, extern
namespaceblock -> namespace ID { · statements }, class
namespaceblock -> namespace ID { · statements }, (
namespaceblock -> namespace ID { · statements }, this
namespaceblock -> namespace ID { · statements }, new
namespaceblock -> namespace ID { · statements }, LITBOOL
namespaceblock -> namespace ID { · statements }, LITINT
namespaceblock -> namespace ID { · statements }, LITLONG
namespaceblock -> namespace ID { · statements }, LITFLOAT
namespaceblock -> namespace ID { · statements }, LITDOUBLE
namespaceblock -> namespace ID { · statements }, LITCHAR
namespaceblock -> namespace ID { · statements }, LITSTRING
namespaceblock -> namespace ID { · statements }, null
namespaceblock -> namespace ID { · statements }, ++
namespaceblock -> namespace ID { · statements }, --
namespaceblock -> namespace ID { · statements }, break
namespaceblock -> namespace ID { · statements }, return
namespaceblock -> namespace ID { · statements }, delete
namespaceblock -> namespace ID { · statements }, while
namespaceblock -> namespace ID { · statements }, for
namespaceblock -> namespace ID { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { · statements }, }
namespaceblock -> namespace ID { · statements }, &&
namespaceblock -> namespace ID { · statements }, ||
namespaceblock -> namespace ID { · statements }, +
namespaceblock -> namespace ID { · statements }, -
namespaceblock -> namespace ID { · statements }, *
namespaceblock -> namespace ID { · statements }, /
namespaceblock -> namespace ID { · statements }, %
namespaceblock -> namespace ID { · statements }, !
namespaceblock -> namespace ID { · statements }, else
***EndSet***
***EndState***
***State***
132
I_226_656_833_1284_1366_1535_1597
***Set***
declstmt -> extern type ID · ( params ) ;, $
declstmt -> extern type ID · ( params ) ;, namespace
declstmt -> extern type ID · ( params ) ;, {
declstmt -> extern type ID · ( params ) ;, ID
declstmt -> extern type ID · ( params ) ;, void
declstmt -> extern type ID · ( params ) ;, bool
declstmt -> extern type ID · ( params ) ;, int
declstmt -> extern type ID · ( params ) ;, long
declstmt -> extern type ID · ( params ) ;, float
declstmt -> extern type ID · ( params ) ;, double
declstmt -> extern type ID · ( params ) ;, char
declstmt -> extern type ID · ( params ) ;, string
declstmt -> extern type ID · ( params ) ;, var
declstmt -> extern type ID · ( params ) ;, own
declstmt -> extern type ID · ( params ) ;, bor
declstmt -> extern type ID · ( params ) ;, const
declstmt -> extern type ID · ( params ) ;, extern
declstmt -> extern type ID · ( params ) ;, class
declstmt -> extern type ID · ( params ) ;, (
declstmt -> extern type ID · ( params ) ;, this
declstmt -> extern type ID · ( params ) ;, new
declstmt -> extern type ID · ( params ) ;, LITBOOL
declstmt -> extern type ID · ( params ) ;, LITINT
declstmt -> extern type ID · ( params ) ;, LITLONG
declstmt -> extern type ID · ( params ) ;, LITFLOAT
declstmt -> extern type ID · ( params ) ;, LITDOUBLE
declstmt -> extern type ID · ( params ) ;, LITCHAR
declstmt -> extern type ID · ( params ) ;, LITSTRING
declstmt -> extern type ID · ( params ) ;, null
declstmt -> extern type ID · ( params ) ;, ++
declstmt -> extern type ID · ( params ) ;, --
declstmt -> extern type ID · ( params ) ;, break
declstmt -> extern type ID · ( params ) ;, return
declstmt -> extern type ID · ( params ) ;, delete
declstmt -> extern type ID · ( params ) ;, while
declstmt -> extern type ID · ( params ) ;, for
declstmt -> extern type ID · ( params ) ;, if
declstmt -> extern type ID · ( params ) ;, }
declstmt -> extern type ID · ( params ) ;, &&
declstmt -> extern type ID · ( params ) ;, ||
declstmt -> extern type ID · ( params ) ;, +
declstmt -> extern type ID · ( params ) ;, -
declstmt -> extern type ID · ( params ) ;, *
declstmt -> extern type ID · ( params ) ;, /
declstmt -> extern type ID · ( params ) ;, %
declstmt -> extern type ID · ( params ) ;, !
declstmt -> extern type ID · ( params ) ;, else
***EndSet***
***EndState***
***State***
133
I_228_657_834_1285_1367_1536_1598
***Set***
declstmt -> const type ID · = lit ;, $
declstmt -> const type ID · = lit ;, namespace
declstmt -> const type ID · = lit ;, {
declstmt -> const type ID · = lit ;, ID
declstmt -> const type ID · = lit ;, void
declstmt -> const type ID · = lit ;, bool
declstmt -> const type ID · = lit ;, int
declstmt -> const type ID · = lit ;, long
declstmt -> const type ID · = lit ;, float
declstmt -> const type ID · = lit ;, double
declstmt -> const type ID · = lit ;, char
declstmt -> const type ID · = lit ;, string
declstmt -> const type ID · = lit ;, var
declstmt -> const type ID · = lit ;, own
declstmt -> const type ID · = lit ;, bor
declstmt -> const type ID · = lit ;, const
declstmt -> const type ID · = lit ;, extern
declstmt -> const type ID · = lit ;, class
declstmt -> const type ID · = lit ;, (
declstmt -> const type ID · = lit ;, this
declstmt -> const type ID · = lit ;, new
declstmt -> const type ID · = lit ;, LITBOOL
declstmt -> const type ID · = lit ;, LITINT
declstmt -> const type ID · = lit ;, LITLONG
declstmt -> const type ID · = lit ;, LITFLOAT
declstmt -> const type ID · = lit ;, LITDOUBLE
declstmt -> const type ID · = lit ;, LITCHAR
declstmt -> const type ID · = lit ;, LITSTRING
declstmt -> const type ID · = lit ;, null
declstmt -> const type ID · = lit ;, ++
declstmt -> const type ID · = lit ;, --
declstmt -> const type ID · = lit ;, break
declstmt -> const type ID · = lit ;, return
declstmt -> const type ID · = lit ;, delete
declstmt -> const type ID · = lit ;, while
declstmt -> const type ID · = lit ;, for
declstmt -> const type ID · = lit ;, if
declstmt -> const type ID · = lit ;, }
declstmt -> const type ID · = lit ;, &&
declstmt -> const type ID · = lit ;, ||
declstmt -> const type ID · = lit ;, +
declstmt -> const type ID · = lit ;, -
declstmt -> const type ID · = lit ;, *
declstmt -> const type ID · = lit ;, /
declstmt -> const type ID · = lit ;, %
declstmt -> const type ID · = lit ;, !
declstmt -> const type ID · = lit ;, else
***EndSet***
***EndState***
***State***
134
I_229_658_835_1286_1368_1537_1599
***Set***
declstmt -> class own ID · inherit { declstatements }, $
declstmt -> class own ID · inherit { declstatements }, namespace
declstmt -> class own ID · inherit { declstatements }, {
declstmt -> class own ID · inherit { declstatements }, ID
declstmt -> class own ID · inherit { declstatements }, void
declstmt -> class own ID · inherit { declstatements }, bool
declstmt -> class own ID · inherit { declstatements }, int
declstmt -> class own ID · inherit { declstatements }, long
declstmt -> class own ID · inherit { declstatements }, float
declstmt -> class own ID · inherit { declstatements }, double
declstmt -> class own ID · inherit { declstatements }, char
declstmt -> class own ID · inherit { declstatements }, string
declstmt -> class own ID · inherit { declstatements }, var
declstmt -> class own ID · inherit { declstatements }, own
declstmt -> class own ID · inherit { declstatements }, bor
declstmt -> class own ID · inherit { declstatements }, const
declstmt -> class own ID · inherit { declstatements }, extern
declstmt -> class own ID · inherit { declstatements }, class
declstmt -> class own ID · inherit { declstatements }, (
declstmt -> class own ID · inherit { declstatements }, this
declstmt -> class own ID · inherit { declstatements }, new
declstmt -> class own ID · inherit { declstatements }, LITBOOL
declstmt -> class own ID · inherit { declstatements }, LITINT
declstmt -> class own ID · inherit { declstatements }, LITLONG
declstmt -> class own ID · inherit { declstatements }, LITFLOAT
declstmt -> class own ID · inherit { declstatements }, LITDOUBLE
declstmt -> class own ID · inherit { declstatements }, LITCHAR
declstmt -> class own ID · inherit { declstatements }, LITSTRING
declstmt -> class own ID · inherit { declstatements }, null
declstmt -> class own ID · inherit { declstatements }, ++
declstmt -> class own ID · inherit { declstatements }, --
declstmt -> class own ID · inherit { declstatements }, break
declstmt -> class own ID · inherit { declstatements }, return
declstmt -> class own ID · inherit { declstatements }, delete
declstmt -> class own ID · inherit { declstatements }, while
declstmt -> class own ID · inherit { declstatements }, for
declstmt -> class own ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class own ID · inherit { declstatements }, }
declstmt -> class own ID · inherit { declstatements }, &&
declstmt -> class own ID · inherit { declstatements }, ||
declstmt -> class own ID · inherit { declstatements }, +
declstmt -> class own ID · inherit { declstatements }, -
declstmt -> class own ID · inherit { declstatements }, *
declstmt -> class own ID · inherit { declstatements }, /
declstmt -> class own ID · inherit { declstatements }, %
declstmt -> class own ID · inherit { declstatements }, !
declstmt -> class own ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
135
I_230
***Set***
inherit -> : · ID, {
***EndSet***
***EndState***
***State***
136
I_231_659_836_1287_1369_1538_1600
***Set***
declstmt -> class ID inherit · { declstatements }, $
declstmt -> class ID inherit · { declstatements }, namespace
declstmt -> class ID inherit · { declstatements }, {
declstmt -> class ID inherit · { declstatements }, ID
declstmt -> class ID inherit · { declstatements }, void
declstmt -> class ID inherit · { declstatements }, bool
declstmt -> class ID inherit · { declstatements }, int
declstmt -> class ID inherit · { declstatements }, long
declstmt -> class ID inherit · { declstatements }, float
declstmt -> class ID inherit · { declstatements }, double
declstmt -> class ID inherit · { declstatements }, char
declstmt -> class ID inherit · { declstatements }, string
declstmt -> class ID inherit · { declstatements }, var
declstmt -> class ID inherit · { declstatements }, own
declstmt -> class ID inherit · { declstatements }, bor
declstmt -> class ID inherit · { declstatements }, const
declstmt -> class ID inherit · { declstatements }, extern
declstmt -> class ID inherit · { declstatements }, class
declstmt -> class ID inherit · { declstatements }, (
declstmt -> class ID inherit · { declstatements }, this
declstmt -> class ID inherit · { declstatements }, new
declstmt -> class ID inherit · { declstatements }, LITBOOL
declstmt -> class ID inherit · { declstatements }, LITINT
declstmt -> class ID inherit · { declstatements }, LITLONG
declstmt -> class ID inherit · { declstatements }, LITFLOAT
declstmt -> class ID inherit · { declstatements }, LITDOUBLE
declstmt -> class ID inherit · { declstatements }, LITCHAR
declstmt -> class ID inherit · { declstatements }, LITSTRING
declstmt -> class ID inherit · { declstatements }, null
declstmt -> class ID inherit · { declstatements }, ++
declstmt -> class ID inherit · { declstatements }, --
declstmt -> class ID inherit · { declstatements }, break
declstmt -> class ID inherit · { declstatements }, return
declstmt -> class ID inherit · { declstatements }, delete
declstmt -> class ID inherit · { declstatements }, while
declstmt -> class ID inherit · { declstatements }, for
declstmt -> class ID inherit · { declstatements }, if
declstmt -> class ID inherit · { declstatements }, }
declstmt -> class ID inherit · { declstatements }, &&
declstmt -> class ID inherit · { declstatements }, ||
declstmt -> class ID inherit · { declstatements }, +
declstmt -> class ID inherit · { declstatements }, -
declstmt -> class ID inherit · { declstatements }, *
declstmt -> class ID inherit · { declstatements }, /
declstmt -> class ID inherit · { declstatements }, %
declstmt -> class ID inherit · { declstatements }, !
declstmt -> class ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
137
I_232_463_567_932_1021_1093_1107_1162_1176_1429_1443_1469_1503
***Set***
newobj -> new ID ( · ), ;
newobj -> new ID ( · ), .
newobj -> new ID ( · ), &&
newobj -> new ID ( · ), ||
newobj -> new ID ( · ), >
newobj -> new ID ( · ), <
newobj -> new ID ( · ), >=
newobj -> new ID ( · ), <=
newobj -> new ID ( · ), ==
newobj -> new ID ( · ), !=
newobj -> new ID ( · ), +
newobj -> new ID ( · ), -
newobj -> new ID ( · ), *
newobj -> new ID ( · ), /
newobj -> new ID ( · ), %
newobj -> new ID ( · ), )
newobj -> new ID ( · ), ,
newobj -> new ID ( · ), ]
***EndSet***
***EndState***
***State***
138
I_250_314_676_720_793_816_880_903_1229_1252_1298
***Set***
cast -> ( type · ) factor, ;
cast -> ( type · ) factor, &&
cast -> ( type · ) factor, ||
cast -> ( type · ) factor, >
cast -> ( type · ) factor, <
cast -> ( type · ) factor, >=
cast -> ( type · ) factor, <=
cast -> ( type · ) factor, ==
cast -> ( type · ) factor, !=
cast -> ( type · ) factor, +
cast -> ( type · ) factor, -
cast -> ( type · ) factor, *
cast -> ( type · ) factor, /
cast -> ( type · ) factor, %
cast -> ( type · ) factor, )
cast -> ( type · ) factor, ,
cast -> ( type · ) factor, ]
***EndSet***
***EndState***
***State***
139
I_260_318_421_493_527_595_629_680_960_994_1076
***Set***
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
call -> ID · ( args ), ;
call -> ID · ( args ), &&
call -> ID · ( args ), ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
primary -> ID ·, .
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ]
incdec -> ID · --, ]
primary -> ID ·, ]
call -> ID · ( args ), ]
idBracket -> ID · [ optidx ], ]
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
140
I_261_319_423_495_529_597_631_681_962_996_1078
***Set***
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, .
primary -> indexaccess ·, )
primary -> indexaccess ·, ]
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
141
I_262_320_682_724_797_820_884_907_1233_1256_1302
***Set***
factor -> - factor ·, ;
factor -> - factor ·, &&
factor -> - factor ·, ||
factor -> - factor ·, >
factor -> - factor ·, <
factor -> - factor ·, >=
factor -> - factor ·, <=
factor -> - factor ·, ==
factor -> - factor ·, !=
factor -> - factor ·, +
factor -> - factor ·, -
factor -> - factor ·, *
factor -> - factor ·, /
factor -> - factor ·, %
factor -> - factor ·, )
factor -> - factor ·, ,
factor -> - factor ·, ]
***EndSet***
***EndState***
***State***
142
I_264_322_433_505_538_607_640_684_972_1005_1087
***Set***
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], ;
call -> memberaccess · ( args ), ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ]
indexaccess -> memberaccess · [ aexpr ], ]
call -> memberaccess · ( args ), ]
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
143
I_266_324_686_725_798_821_885_908_1234_1257_1303
***Set***
factor -> ! factor ·, ;
factor -> ! factor ·, &&
factor -> ! factor ·, ||
factor -> ! factor ·, >
factor -> ! factor ·, <
factor -> ! factor ·, >=
factor -> ! factor ·, <=
factor -> ! factor ·, ==
factor -> ! factor ·, !=
factor -> ! factor ·, +
factor -> ! factor ·, -
factor -> ! factor ·, *
factor -> ! factor ·, /
factor -> ! factor ·, %
factor -> ! factor ·, )
factor -> ! factor ·, ,
factor -> ! factor ·, ]
***EndSet***
***EndState***
***State***
144
I_271_660_837_1370_1539_1601
***Set***
stmt -> delete expr ; ·, $
stmt -> delete expr ; ·, namespace
stmt -> delete expr ; ·, {
stmt -> delete expr ; ·, ID
stmt -> delete expr ; ·, void
stmt -> delete expr ; ·, bool
stmt -> delete expr ; ·, int
stmt -> delete expr ; ·, long
stmt -> delete expr ; ·, float
stmt -> delete expr ; ·, double
stmt -> delete expr ; ·, char
stmt -> delete expr ; ·, string
stmt -> delete expr ; ·, var
stmt -> delete expr ; ·, own
stmt -> delete expr ; ·, bor
stmt -> delete expr ; ·, const
stmt -> delete expr ; ·, extern
stmt -> delete expr ; ·, class
stmt -> delete expr ; ·, (
stmt -> delete expr ; ·, this
stmt -> delete expr ; ·, new
stmt -> delete expr ; ·, LITBOOL
stmt -> delete expr ; ·, LITINT
stmt -> delete expr ; ·, LITLONG
stmt -> delete expr ; ·, LITFLOAT
stmt -> delete expr ; ·, LITDOUBLE
stmt -> delete expr ; ·, LITCHAR
stmt -> delete expr ; ·, LITSTRING
stmt -> delete expr ; ·, null
stmt -> delete expr ; ·, ++
stmt -> delete expr ; ·, --
stmt -> delete expr ; ·, break
stmt -> delete expr ; ·, return
stmt -> delete expr ; ·, delete
stmt -> delete expr ; ·, while
stmt -> delete expr ; ·, for
stmt -> delete expr ; ·, if
stmt -> delete expr ; ·, }
stmt -> delete expr ; ·, &&
stmt -> delete expr ; ·, ||
stmt -> delete expr ; ·, +
stmt -> delete expr ; ·, -
stmt -> delete expr ; ·, *
stmt -> delete expr ; ·, /
stmt -> delete expr ; ·, %
stmt -> delete expr ; ·, !
stmt -> delete expr ; ·, else
***EndSet***
***EndState***
***State***
145
I_272_330_691
***Set***
bexpr -> bexpr || · bexpr, ;
bexpr -> bexpr || · bexpr, &&
bexpr -> bexpr || · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr || · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr || · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
146
I_273_331_692
***Set***
bexpr -> bexpr && · bexpr, ;
bexpr -> bexpr && · bexpr, &&
bexpr -> bexpr && · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr && · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr && · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
147
I_274_332_693
***Set***
bexpr -> aexpr == · aexpr, ;
bexpr -> aexpr == · aexpr, &&
bexpr -> aexpr == · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr == · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr == · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
148
I_275_333_694
***Set***
bexpr -> aexpr != · aexpr, ;
bexpr -> aexpr != · aexpr, &&
bexpr -> aexpr != · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr != · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr != · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
149
I_276_334_695
***Set***
bexpr -> aexpr <= · aexpr, ;
bexpr -> aexpr <= · aexpr, &&
bexpr -> aexpr <= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr <= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr <= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
150
I_277_335_696
***Set***
bexpr -> aexpr >= · aexpr, ;
bexpr -> aexpr >= · aexpr, &&
bexpr -> aexpr >= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr >= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr >= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
151
I_278_336_697
***Set***
bexpr -> aexpr > · aexpr, ;
bexpr -> aexpr > · aexpr, &&
bexpr -> aexpr > · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr > · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr > · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
152
I_279_337_698
***Set***
bexpr -> aexpr < · aexpr, ;
bexpr -> aexpr < · aexpr, &&
bexpr -> aexpr < · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr < · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr < · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
153
I_280_338_699_730_783_803_890_1239
***Set***
aexpr -> aexpr + · term, ;
aexpr -> aexpr + · term, >
aexpr -> aexpr + · term, <
aexpr -> aexpr + · term, >=
aexpr -> aexpr + · term, <=
aexpr -> aexpr + · term, ==
aexpr -> aexpr + · term, !=
aexpr -> aexpr + · term, +
aexpr -> aexpr + · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr + · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr + · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr + · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr + · term, &&
aexpr -> aexpr + · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
154
I_281_339_700_731_784_804_891_1240
***Set***
aexpr -> aexpr - · term, ;
aexpr -> aexpr - · term, >
aexpr -> aexpr - · term, <
aexpr -> aexpr - · term, >=
aexpr -> aexpr - · term, <=
aexpr -> aexpr - · term, ==
aexpr -> aexpr - · term, !=
aexpr -> aexpr - · term, +
aexpr -> aexpr - · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr - · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr - · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr - · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr - · term, &&
aexpr -> aexpr - · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
155
I_282_340_701_732_785_805_892_1241
***Set***
term -> term * · factor, ;
term -> term * · factor, >
term -> term * · factor, <
term -> term * · factor, >=
term -> term * · factor, <=
term -> term * · factor, ==
term -> term * · factor, !=
term -> term * · factor, +
term -> term * · factor, -
term -> term * · factor, *
term -> term * · factor, /
term -> term * · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term * · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term * · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term * · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term * · factor, &&
term -> term * · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
156
I_283_341_702_733_786_806_893_1242
***Set***
term -> term / · factor, ;
term -> term / · factor, >
term -> term / · factor, <
term -> term / · factor, >=
term -> term / · factor, <=
term -> term / · factor, ==
term -> term / · factor, !=
term -> term / · factor, +
term -> term / · factor, -
term -> term / · factor, *
term -> term / · factor, /
term -> term / · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term / · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term / · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term / · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term / · factor, &&
term -> term / · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
157
I_284_342_703_734_787_807_894_1243
***Set***
term -> term % · factor, ;
term -> term % · factor, >
term -> term % · factor, <
term -> term % · factor, >=
term -> term % · factor, <=
term -> term % · factor, ==
term -> term % · factor, !=
term -> term % · factor, +
term -> term % · factor, -
term -> term % · factor, *
term -> term % · factor, /
term -> term % · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term % · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term % · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term % · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term % · factor, &&
term -> term % · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
158
I_288_661_838_1371_1540_1602
***Set***
stmt -> while ( expr · ) stmt, $
stmt -> while ( expr · ) stmt, namespace
stmt -> while ( expr · ) stmt, {
stmt -> while ( expr · ) stmt, ID
stmt -> while ( expr · ) stmt, void
stmt -> while ( expr · ) stmt, bool
stmt -> while ( expr · ) stmt, int
stmt -> while ( expr · ) stmt, long
stmt -> while ( expr · ) stmt, float
stmt -> while ( expr · ) stmt, double
stmt -> while ( expr · ) stmt, char
stmt -> while ( expr · ) stmt, string
stmt -> while ( expr · ) stmt, var
stmt -> while ( expr · ) stmt, own
stmt -> while ( expr · ) stmt, bor
stmt -> while ( expr · ) stmt, const
stmt -> while ( expr · ) stmt, extern
stmt -> while ( expr · ) stmt, class
stmt -> while ( expr · ) stmt, (
stmt -> while ( expr · ) stmt, this
stmt -> while ( expr · ) stmt, new
stmt -> while ( expr · ) stmt, LITBOOL
stmt -> while ( expr · ) stmt, LITINT
stmt -> while ( expr · ) stmt, LITLONG
stmt -> while ( expr · ) stmt, LITFLOAT
stmt -> while ( expr · ) stmt, LITDOUBLE
stmt -> while ( expr · ) stmt, LITCHAR
stmt -> while ( expr · ) stmt, LITSTRING
stmt -> while ( expr · ) stmt, null
stmt -> while ( expr · ) stmt, ++
stmt -> while ( expr · ) stmt, --
stmt -> while ( expr · ) stmt, break
stmt -> while ( expr · ) stmt, return
stmt -> while ( expr · ) stmt, delete
stmt -> while ( expr · ) stmt, while
stmt -> while ( expr · ) stmt, for
stmt -> while ( expr · ) stmt, if
stmt -> while ( expr · ) stmt, }
stmt -> while ( expr · ) stmt, &&
stmt -> while ( expr · ) stmt, ||
stmt -> while ( expr · ) stmt, +
stmt -> while ( expr · ) stmt, -
stmt -> while ( expr · ) stmt, *
stmt -> while ( expr · ) stmt, /
stmt -> while ( expr · ) stmt, %
stmt -> while ( expr · ) stmt, !
stmt -> while ( expr · ) stmt, else
***EndSet***
***EndState***
***State***
159
I_302_662_839_1372_1541_1603
***Set***
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, $
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, {
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ID
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, void
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bool
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, int
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, long
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, float
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, double
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, char
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, string
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, var
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, own
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bor
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, const
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, extern
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, class
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, (
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, this
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, new
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, null
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ++
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, --
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, break
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, return
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, delete
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, while
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, for
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, if
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, }
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, &&
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ||
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, +
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, -
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, *
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, !
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
160
I_307_663_840_1373_1542_1604
***Set***
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, long
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, var
stmt -> if ( expr · ) stmt elifclauselist elseclause, own
stmt -> if ( expr · ) stmt elifclauselist elseclause, bor
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
161
I_308_664_841_1374_1543_1605
***Set***
stmt -> return expr ; ·, $
stmt -> return expr ; ·, namespace
stmt -> return expr ; ·, {
stmt -> return expr ; ·, ID
stmt -> return expr ; ·, void
stmt -> return expr ; ·, bool
stmt -> return expr ; ·, int
stmt -> return expr ; ·, long
stmt -> return expr ; ·, float
stmt -> return expr ; ·, double
stmt -> return expr ; ·, char
stmt -> return expr ; ·, string
stmt -> return expr ; ·, var
stmt -> return expr ; ·, own
stmt -> return expr ; ·, bor
stmt -> return expr ; ·, const
stmt -> return expr ; ·, extern
stmt -> return expr ; ·, class
stmt -> return expr ; ·, (
stmt -> return expr ; ·, this
stmt -> return expr ; ·, new
stmt -> return expr ; ·, LITBOOL
stmt -> return expr ; ·, LITINT
stmt -> return expr ; ·, LITLONG
stmt -> return expr ; ·, LITFLOAT
stmt -> return expr ; ·, LITDOUBLE
stmt -> return expr ; ·, LITCHAR
stmt -> return expr ; ·, LITSTRING
stmt -> return expr ; ·, null
stmt -> return expr ; ·, ++
stmt -> return expr ; ·, --
stmt -> return expr ; ·, break
stmt -> return expr ; ·, return
stmt -> return expr ; ·, delete
stmt -> return expr ; ·, while
stmt -> return expr ; ·, for
stmt -> return expr ; ·, if
stmt -> return expr ; ·, }
stmt -> return expr ; ·, &&
stmt -> return expr ; ·, ||
stmt -> return expr ; ·, +
stmt -> return expr ; ·, -
stmt -> return expr ; ·, *
stmt -> return expr ; ·, /
stmt -> return expr ; ·, %
stmt -> return expr ; ·, !
stmt -> return expr ; ·, else
***EndSet***
***EndState***
***State***
162
I_329_468_571_936_1024_1096_1110_1165_1179_1432_1446_1472
***Set***
primary -> ( expr ) ·, .
primary -> ( expr ) ·, ;
primary -> ( expr ) ·, &&
primary -> ( expr ) ·, ||
primary -> ( expr ) ·, >
primary -> ( expr ) ·, <
primary -> ( expr ) ·, >=
primary -> ( expr ) ·, <=
primary -> ( expr ) ·, ==
primary -> ( expr ) ·, !=
primary -> ( expr ) ·, +
primary -> ( expr ) ·, -
primary -> ( expr ) ·, *
primary -> ( expr ) ·, /
primary -> ( expr ) ·, %
primary -> ( expr ) ·, )
primary -> ( expr ) ·, ,
primary -> ( expr ) ·, ]
***EndSet***
***EndState***
***State***
163
I_365_665_842_1375_1544_1606
***Set***
statementblock -> { statements } ·, $
statementblock -> { statements } ·, namespace
statementblock -> { statements } ·, {
statementblock -> { statements } ·, ID
statementblock -> { statements } ·, void
statementblock -> { statements } ·, bool
statementblock -> { statements } ·, int
statementblock -> { statements } ·, long
statementblock -> { statements } ·, float
statementblock -> { statements } ·, double
statementblock -> { statements } ·, char
statementblock -> { statements } ·, string
statementblock -> { statements } ·, var
statementblock -> { statements } ·, own
statementblock -> { statements } ·, bor
statementblock -> { statements } ·, const
statementblock -> { statements } ·, extern
statementblock -> { statements } ·, class
statementblock -> { statements } ·, (
statementblock -> { statements } ·, this
statementblock -> { statements } ·, new
statementblock -> { statements } ·, LITBOOL
statementblock -> { statements } ·, LITINT
statementblock -> { statements } ·, LITLONG
statementblock -> { statements } ·, LITFLOAT
statementblock -> { statements } ·, LITDOUBLE
statementblock -> { statements } ·, LITCHAR
statementblock -> { statements } ·, LITSTRING
statementblock -> { statements } ·, null
statementblock -> { statements } ·, ++
statementblock -> { statements } ·, --
statementblock -> { statements } ·, break
statementblock -> { statements } ·, return
statementblock -> { statements } ·, delete
statementblock -> { statements } ·, while
statementblock -> { statements } ·, for
statementblock -> { statements } ·, if
statementblock -> { statements } ·, }
statementblock -> { statements } ·, &&
statementblock -> { statements } ·, ||
statementblock -> { statements } ·, +
statementblock -> { statements } ·, -
statementblock -> { statements } ·, *
statementblock -> { statements } ·, /
statementblock -> { statements } ·, %
statementblock -> { statements } ·, !
statementblock -> { statements } ·, else
***EndSet***
***EndState***
***State***
164
I_393
***Set***
args -> expr ·, )
args -> expr ·, ,
***EndSet***
***EndState***
***State***
165
I_404_471_574_939_1025_1097_1111_1166_1180_1433_1447_1473_1504
***Set***
call -> ID ( args · ), ;
call -> ID ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> ID ( args · ), &&
call -> ID ( args · ), ||
call -> ID ( args · ), >
call -> ID ( args · ), <
call -> ID ( args · ), >=
call -> ID ( args · ), <=
call -> ID ( args · ), ==
call -> ID ( args · ), !=
call -> ID ( args · ), +
call -> ID ( args · ), -
call -> ID ( args · ), *
call -> ID ( args · ), /
call -> ID ( args · ), %
call -> ID ( args · ), )
call -> ID ( args · ), ,
call -> ID ( args · ), ]
***EndSet***
***EndState***
***State***
166
I_427
***Set***
optidx -> aexpr ·, ]
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
***EndSet***
***EndState***
***State***
167
I_429_501_534_603_636_968_1001_1083
***Set***
term -> factor ·, ]
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
term -> factor ·, ;
term -> factor ·, &&
term -> factor ·, ||
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, )
term -> factor ·, ,
***EndSet***
***EndState***
***State***
168
I_435_453_461_472_575_739_775_868_940_1026_1098_1112_1167_1181_1217_1434_1448_1474_1505
***Set***
idBracket -> ID [ optidx · ], ID
idBracket -> ID [ optidx · ], operator
idBracket -> ID [ optidx · ], =
idBracket -> ID [ optidx · ], +=
idBracket -> ID [ optidx · ], -=
idBracket -> ID [ optidx · ], *=
idBracket -> ID [ optidx · ], /=
idBracket -> ID [ optidx · ], %=
idBracket -> ID [ optidx · ], .
idBracket -> ID [ optidx · ], ;
idBracket -> ID [ optidx · ], &&
idBracket -> ID [ optidx · ], ||
idBracket -> ID [ optidx · ], >
idBracket -> ID [ optidx · ], <
idBracket -> ID [ optidx · ], >=
idBracket -> ID [ optidx · ], <=
idBracket -> ID [ optidx · ], ==
idBracket -> ID [ optidx · ], !=
idBracket -> ID [ optidx · ], +
idBracket -> ID [ optidx · ], -
idBracket -> ID [ optidx · ], *
idBracket -> ID [ optidx · ], /
idBracket -> ID [ optidx · ], %
idBracket -> ID [ optidx · ], )
idBracket -> ID [ optidx · ], ,
idBracket -> ID [ optidx · ], ]
***EndSet***
***EndState***
***State***
169
I_437_666_844_1288_1379_1548_1610
***Set***
declstmt -> tmodf type operator · ID ( params ) { statements }, $
declstmt -> tmodf type operator · ID ( params ) { statements }, namespace
declstmt -> tmodf type operator · ID ( params ) { statements }, {
declstmt -> tmodf type operator · ID ( params ) { statements }, ID
declstmt -> tmodf type operator · ID ( params ) { statements }, void
declstmt -> tmodf type operator · ID ( params ) { statements }, bool
declstmt -> tmodf type operator · ID ( params ) { statements }, int
declstmt -> tmodf type operator · ID ( params ) { statements }, long
declstmt -> tmodf type operator · ID ( params ) { statements }, float
declstmt -> tmodf type operator · ID ( params ) { statements }, double
declstmt -> tmodf type operator · ID ( params ) { statements }, char
declstmt -> tmodf type operator · ID ( params ) { statements }, string
declstmt -> tmodf type operator · ID ( params ) { statements }, var
declstmt -> tmodf type operator · ID ( params ) { statements }, own
declstmt -> tmodf type operator · ID ( params ) { statements }, bor
declstmt -> tmodf type operator · ID ( params ) { statements }, const
declstmt -> tmodf type operator · ID ( params ) { statements }, extern
declstmt -> tmodf type operator · ID ( params ) { statements }, class
declstmt -> tmodf type operator · ID ( params ) { statements }, (
declstmt -> tmodf type operator · ID ( params ) { statements }, this
declstmt -> tmodf type operator · ID ( params ) { statements }, new
declstmt -> tmodf type operator · ID ( params ) { statements }, LITBOOL
declstmt -> tmodf type operator · ID ( params ) { statements }, LITINT
declstmt -> tmodf type operator · ID ( params ) { statements }, LITLONG
declstmt -> tmodf type operator · ID ( params ) { statements }, LITFLOAT
declstmt -> tmodf type operator · ID ( params ) { statements }, LITDOUBLE
declstmt -> tmodf type operator · ID ( params ) { statements }, LITCHAR
declstmt -> tmodf type operator · ID ( params ) { statements }, LITSTRING
declstmt -> tmodf type operator · ID ( params ) { statements }, null
declstmt -> tmodf type operator · ID ( params ) { statements }, ++
declstmt -> tmodf type operator · ID ( params ) { statements }, --
declstmt -> tmodf type operator · ID ( params ) { statements }, break
declstmt -> tmodf type operator · ID ( params ) { statements }, return
declstmt -> tmodf type operator · ID ( params ) { statements }, delete
declstmt -> tmodf type operator · ID ( params ) { statements }, while
declstmt -> tmodf type operator · ID ( params ) { statements }, for
declstmt -> tmodf type operator · ID ( params ) { statements }, if
declstmt -> tmodf type operator · ID ( params ) { statements }, }
declstmt -> tmodf type operator · ID ( params ) { statements }, &&
declstmt -> tmodf type operator · ID ( params ) { statements }, ||
declstmt -> tmodf type operator · ID ( params ) { statements }, +
declstmt -> tmodf type operator · ID ( params ) { statements }, -
declstmt -> tmodf type operator · ID ( params ) { statements }, *
declstmt -> tmodf type operator · ID ( params ) { statements }, /
declstmt -> tmodf type operator · ID ( params ) { statements }, %
declstmt -> tmodf type operator · ID ( params ) { statements }, !
declstmt -> tmodf type operator · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
170
I_438_667_845_1289_1380_1549_1611
***Set***
declstmt -> tmodf type ID · = expr ;, $
declstmt -> tmodf type ID · ( params ) { statements }, $
declstmt -> tmodf type ID · = expr ;, namespace
declstmt -> tmodf type ID · ( params ) { statements }, namespace
declstmt -> tmodf type ID · = expr ;, {
declstmt -> tmodf type ID · ( params ) { statements }, {
declstmt -> tmodf type ID · = expr ;, ID
declstmt -> tmodf type ID · ( params ) { statements }, ID
declstmt -> tmodf type ID · = expr ;, void
declstmt -> tmodf type ID · ( params ) { statements }, void
declstmt -> tmodf type ID · = expr ;, bool
declstmt -> tmodf type ID · ( params ) { statements }, bool
declstmt -> tmodf type ID · = expr ;, int
declstmt -> tmodf type ID · ( params ) { statements }, int
declstmt -> tmodf type ID · = expr ;, long
declstmt -> tmodf type ID · ( params ) { statements }, long
declstmt -> tmodf type ID · = expr ;, float
declstmt -> tmodf type ID · ( params ) { statements }, float
declstmt -> tmodf type ID · = expr ;, double
declstmt -> tmodf type ID · ( params ) { statements }, double
declstmt -> tmodf type ID · = expr ;, char
declstmt -> tmodf type ID · ( params ) { statements }, char
declstmt -> tmodf type ID · = expr ;, string
declstmt -> tmodf type ID · ( params ) { statements }, string
declstmt -> tmodf type ID · = expr ;, var
declstmt -> tmodf type ID · ( params ) { statements }, var
declstmt -> tmodf type ID · = expr ;, own
declstmt -> tmodf type ID · ( params ) { statements }, own
declstmt -> tmodf type ID · = expr ;, bor
declstmt -> tmodf type ID · ( params ) { statements }, bor
declstmt -> tmodf type ID · = expr ;, const
declstmt -> tmodf type ID · ( params ) { statements }, const
declstmt -> tmodf type ID · = expr ;, extern
declstmt -> tmodf type ID · ( params ) { statements }, extern
declstmt -> tmodf type ID · = expr ;, class
declstmt -> tmodf type ID · ( params ) { statements }, class
declstmt -> tmodf type ID · = expr ;, (
declstmt -> tmodf type ID · ( params ) { statements }, (
declstmt -> tmodf type ID · = expr ;, this
declstmt -> tmodf type ID · ( params ) { statements }, this
declstmt -> tmodf type ID · = expr ;, new
declstmt -> tmodf type ID · ( params ) { statements }, new
declstmt -> tmodf type ID · = expr ;, LITBOOL
declstmt -> tmodf type ID · ( params ) { statements }, LITBOOL
declstmt -> tmodf type ID · = expr ;, LITINT
declstmt -> tmodf type ID · ( params ) { statements }, LITINT
declstmt -> tmodf type ID · = expr ;, LITLONG
declstmt -> tmodf type ID · ( params ) { statements }, LITLONG
declstmt -> tmodf type ID · = expr ;, LITFLOAT
declstmt -> tmodf type ID · ( params ) { statements }, LITFLOAT
declstmt -> tmodf type ID · = expr ;, LITDOUBLE
declstmt -> tmodf type ID · ( params ) { statements }, LITDOUBLE
declstmt -> tmodf type ID · = expr ;, LITCHAR
declstmt -> tmodf type ID · ( params ) { statements }, LITCHAR
declstmt -> tmodf type ID · = expr ;, LITSTRING
declstmt -> tmodf type ID · ( params ) { statements }, LITSTRING
declstmt -> tmodf type ID · = expr ;, null
declstmt -> tmodf type ID · ( params ) { statements }, null
declstmt -> tmodf type ID · = expr ;, ++
declstmt -> tmodf type ID · ( params ) { statements }, ++
declstmt -> tmodf type ID · = expr ;, --
declstmt -> tmodf type ID · ( params ) { statements }, --
declstmt -> tmodf type ID · = expr ;, break
declstmt -> tmodf type ID · ( params ) { statements }, break
declstmt -> tmodf type ID · = expr ;, return
declstmt -> tmodf type ID · ( params ) { statements }, return
declstmt -> tmodf type ID · = expr ;, delete
declstmt -> tmodf type ID · ( params ) { statements }, delete
declstmt -> tmodf type ID · = expr ;, while
declstmt -> tmodf type ID · ( params ) { statements }, while
declstmt -> tmodf type ID · = expr ;, for
declstmt -> tmodf type ID · ( params ) { statements }, for
declstmt -> tmodf type ID · = expr ;, if
declstmt -> tmodf type ID · ( params ) { statements }, if
declstmt -> tmodf type ID · = expr ;, }
declstmt -> tmodf type ID · ( params ) { statements }, }
declstmt -> tmodf type ID · = expr ;, &&
declstmt -> tmodf type ID · ( params ) { statements }, &&
declstmt -> tmodf type ID · = expr ;, ||
declstmt -> tmodf type ID · ( params ) { statements }, ||
declstmt -> tmodf type ID · = expr ;, +
declstmt -> tmodf type ID · ( params ) { statements }, +
declstmt -> tmodf type ID · = expr ;, -
declstmt -> tmodf type ID · ( params ) { statements }, -
declstmt -> tmodf type ID · = expr ;, *
declstmt -> tmodf type ID · ( params ) { statements }, *
declstmt -> tmodf type ID · = expr ;, /
declstmt -> tmodf type ID · ( params ) { statements }, /
declstmt -> tmodf type ID · = expr ;, %
declstmt -> tmodf type ID · ( params ) { statements }, %
declstmt -> tmodf type ID · = expr ;, !
declstmt -> tmodf type ID · ( params ) { statements }, !
declstmt -> tmodf type ID · = expr ;, else
declstmt -> tmodf type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
171
I_439_668_846_1290_1381_1550_1612
***Set***
declstmt -> type operator ID · ( params ) { statements }, $
declstmt -> type operator ID · ( params ) { statements }, namespace
declstmt -> type operator ID · ( params ) { statements }, {
declstmt -> type operator ID · ( params ) { statements }, ID
declstmt -> type operator ID · ( params ) { statements }, void
declstmt -> type operator ID · ( params ) { statements }, bool
declstmt -> type operator ID · ( params ) { statements }, int
declstmt -> type operator ID · ( params ) { statements }, long
declstmt -> type operator ID · ( params ) { statements }, float
declstmt -> type operator ID · ( params ) { statements }, double
declstmt -> type operator ID · ( params ) { statements }, char
declstmt -> type operator ID · ( params ) { statements }, string
declstmt -> type operator ID · ( params ) { statements }, var
declstmt -> type operator ID · ( params ) { statements }, own
declstmt -> type operator ID · ( params ) { statements }, bor
declstmt -> type operator ID · ( params ) { statements }, const
declstmt -> type operator ID · ( params ) { statements }, extern
declstmt -> type operator ID · ( params ) { statements }, class
declstmt -> type operator ID · ( params ) { statements }, (
declstmt -> type operator ID · ( params ) { statements }, this
declstmt -> type operator ID · ( params ) { statements }, new
declstmt -> type operator ID · ( params ) { statements }, LITBOOL
declstmt -> type operator ID · ( params ) { statements }, LITINT
declstmt -> type operator ID · ( params ) { statements }, LITLONG
declstmt -> type operator ID · ( params ) { statements }, LITFLOAT
declstmt -> type operator ID · ( params ) { statements }, LITDOUBLE
declstmt -> type operator ID · ( params ) { statements }, LITCHAR
declstmt -> type operator ID · ( params ) { statements }, LITSTRING
declstmt -> type operator ID · ( params ) { statements }, null
declstmt -> type operator ID · ( params ) { statements }, ++
declstmt -> type operator ID · ( params ) { statements }, --
declstmt -> type operator ID · ( params ) { statements }, break
declstmt -> type operator ID · ( params ) { statements }, return
declstmt -> type operator ID · ( params ) { statements }, delete
declstmt -> type operator ID · ( params ) { statements }, while
declstmt -> type operator ID · ( params ) { statements }, for
declstmt -> type operator ID · ( params ) { statements }, if
declstmt -> type operator ID · ( params ) { statements }, }
declstmt -> type operator ID · ( params ) { statements }, &&
declstmt -> type operator ID · ( params ) { statements }, ||
declstmt -> type operator ID · ( params ) { statements }, +
declstmt -> type operator ID · ( params ) { statements }, -
declstmt -> type operator ID · ( params ) { statements }, *
declstmt -> type operator ID · ( params ) { statements }, /
declstmt -> type operator ID · ( params ) { statements }, %
declstmt -> type operator ID · ( params ) { statements }, !
declstmt -> type operator ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
172
I_440_669_847_1291_1382_1551_1613
***Set***
declstmt -> type ID ( · params ) { statements }, $
declstmt -> type ID ( · params ) { statements }, namespace
declstmt -> type ID ( · params ) { statements }, {
declstmt -> type ID ( · params ) { statements }, ID
declstmt -> type ID ( · params ) { statements }, void
declstmt -> type ID ( · params ) { statements }, bool
declstmt -> type ID ( · params ) { statements }, int
declstmt -> type ID ( · params ) { statements }, long
declstmt -> type ID ( · params ) { statements }, float
declstmt -> type ID ( · params ) { statements }, double
declstmt -> type ID ( · params ) { statements }, char
declstmt -> type ID ( · params ) { statements }, string
declstmt -> type ID ( · params ) { statements }, var
declstmt -> type ID ( · params ) { statements }, own
declstmt -> type ID ( · params ) { statements }, bor
declstmt -> type ID ( · params ) { statements }, const
declstmt -> type ID ( · params ) { statements }, extern
declstmt -> type ID ( · params ) { statements }, class
declstmt -> type ID ( · params ) { statements }, (
declstmt -> type ID ( · params ) { statements }, this
declstmt -> type ID ( · params ) { statements }, new
declstmt -> type ID ( · params ) { statements }, LITBOOL
declstmt -> type ID ( · params ) { statements }, LITINT
declstmt -> type ID ( · params ) { statements }, LITLONG
declstmt -> type ID ( · params ) { statements }, LITFLOAT
declstmt -> type ID ( · params ) { statements }, LITDOUBLE
declstmt -> type ID ( · params ) { statements }, LITCHAR
declstmt -> type ID ( · params ) { statements }, LITSTRING
declstmt -> type ID ( · params ) { statements }, null
declstmt -> type ID ( · params ) { statements }, ++
declstmt -> type ID ( · params ) { statements }, --
declstmt -> type ID ( · params ) { statements }, break
declstmt -> type ID ( · params ) { statements }, return
declstmt -> type ID ( · params ) { statements }, delete
declstmt -> type ID ( · params ) { statements }, while
declstmt -> type ID ( · params ) { statements }, for
declstmt -> type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · tmodf type ID, )
params -> · params , type ID, )
params -> · params , tmodf type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
params -> ·, ,
params -> · type ID, ,
params -> · tmodf type ID, ,
params -> · params , type ID, ,
params -> · params , tmodf type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type ID ( · params ) { statements }, }
declstmt -> type ID ( · params ) { statements }, &&
declstmt -> type ID ( · params ) { statements }, ||
declstmt -> type ID ( · params ) { statements }, +
declstmt -> type ID ( · params ) { statements }, -
declstmt -> type ID ( · params ) { statements }, *
declstmt -> type ID ( · params ) { statements }, /
declstmt -> type ID ( · params ) { statements }, %
declstmt -> type ID ( · params ) { statements }, !
declstmt -> type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
173
I_441_670_848_1292_1383_1552_1614
***Set***
declstmt -> type ID = · expr ;, $
declstmt -> type ID = · expr ;, namespace
declstmt -> type ID = · expr ;, {
declstmt -> type ID = · expr ;, ID
declstmt -> type ID = · expr ;, void
declstmt -> type ID = · expr ;, bool
declstmt -> type ID = · expr ;, int
declstmt -> type ID = · expr ;, long
declstmt -> type ID = · expr ;, float
declstmt -> type ID = · expr ;, double
declstmt -> type ID = · expr ;, char
declstmt -> type ID = · expr ;, string
declstmt -> type ID = · expr ;, var
declstmt -> type ID = · expr ;, own
declstmt -> type ID = · expr ;, bor
declstmt -> type ID = · expr ;, const
declstmt -> type ID = · expr ;, extern
declstmt -> type ID = · expr ;, class
declstmt -> type ID = · expr ;, (
declstmt -> type ID = · expr ;, this
declstmt -> type ID = · expr ;, new
declstmt -> type ID = · expr ;, LITBOOL
declstmt -> type ID = · expr ;, LITINT
declstmt -> type ID = · expr ;, LITLONG
declstmt -> type ID = · expr ;, LITFLOAT
declstmt -> type ID = · expr ;, LITDOUBLE
declstmt -> type ID = · expr ;, LITCHAR
declstmt -> type ID = · expr ;, LITSTRING
declstmt -> type ID = · expr ;, null
declstmt -> type ID = · expr ;, ++
declstmt -> type ID = · expr ;, --
declstmt -> type ID = · expr ;, break
declstmt -> type ID = · expr ;, return
declstmt -> type ID = · expr ;, delete
declstmt -> type ID = · expr ;, while
declstmt -> type ID = · expr ;, for
declstmt -> type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> type ID = · expr ;, }
declstmt -> type ID = · expr ;, &&
declstmt -> type ID = · expr ;, ||
declstmt -> type ID = · expr ;, +
declstmt -> type ID = · expr ;, -
declstmt -> type ID = · expr ;, *
declstmt -> type ID = · expr ;, /
declstmt -> type ID = · expr ;, %
declstmt -> type ID = · expr ;, !
declstmt -> type ID = · expr ;, else
***EndSet***
***EndState***
***State***
174
I_442_455_462_776_778_869_1218_1268_1312_1319_1385_1392_1558_1565_1587
***Set***
primitiveBracket -> primitive [ optidx · ], ID
primitiveBracket -> primitive [ optidx · ], operator
primitiveBracket -> primitive [ optidx · ], .
primitiveBracket -> primitive [ optidx · ], ;
primitiveBracket -> primitive [ optidx · ], &&
primitiveBracket -> primitive [ optidx · ], ||
primitiveBracket -> primitive [ optidx · ], >
primitiveBracket -> primitive [ optidx · ], <
primitiveBracket -> primitive [ optidx · ], >=
primitiveBracket -> primitive [ optidx · ], <=
primitiveBracket -> primitive [ optidx · ], ==
primitiveBracket -> primitive [ optidx · ], !=
primitiveBracket -> primitive [ optidx · ], +
primitiveBracket -> primitive [ optidx · ], -
primitiveBracket -> primitive [ optidx · ], *
primitiveBracket -> primitive [ optidx · ], /
primitiveBracket -> primitive [ optidx · ], %
primitiveBracket -> primitive [ optidx · ], )
primitiveBracket -> primitive [ optidx · ], ,
primitiveBracket -> primitive [ optidx · ], ]
***EndSet***
***EndState***
***State***
175
I_443_544_646_779_871_1011_1032_1104_1113_1173_1182_1220_1440_1449_1475
***Set***
memberaccess -> primary . ID ·, (
memberaccess -> primary . ID ·, =
memberaccess -> primary . ID ·, +=
memberaccess -> primary . ID ·, -=
memberaccess -> primary . ID ·, *=
memberaccess -> primary . ID ·, /=
memberaccess -> primary . ID ·, %=
memberaccess -> primary . ID ·, [
memberaccess -> primary . ID ·, .
memberaccess -> primary . ID ·, ;
memberaccess -> primary . ID ·, &&
memberaccess -> primary . ID ·, ||
memberaccess -> primary . ID ·, >
memberaccess -> primary . ID ·, <
memberaccess -> primary . ID ·, >=
memberaccess -> primary . ID ·, <=
memberaccess -> primary . ID ·, ==
memberaccess -> primary . ID ·, !=
memberaccess -> primary . ID ·, +
memberaccess -> primary . ID ·, -
memberaccess -> primary . ID ·, *
memberaccess -> primary . ID ·, /
memberaccess -> primary . ID ·, %
memberaccess -> primary . ID ·, )
memberaccess -> primary . ID ·, ,
memberaccess -> primary . ID ·, ]
***EndSet***
***EndState***
***State***
176
I_444_647_1012
***Set***
assign -> lvalue = expr ·, ;
assign -> lvalue = expr ·, )
assign -> lvalue = expr ·, ,
***EndSet***
***EndState***
***State***
177
I_445_648_1013
***Set***
assign -> lvalue += expr ·, ;
assign -> lvalue += expr ·, )
assign -> lvalue += expr ·, ,
***EndSet***
***EndState***
***State***
178
I_446_649_1014
***Set***
assign -> lvalue -= expr ·, ;
assign -> lvalue -= expr ·, )
assign -> lvalue -= expr ·, ,
***EndSet***
***EndState***
***State***
179
I_447_650_1015
***Set***
assign -> lvalue *= expr ·, ;
assign -> lvalue *= expr ·, )
assign -> lvalue *= expr ·, ,
***EndSet***
***EndState***
***State***
180
I_448_651_1016
***Set***
assign -> lvalue /= expr ·, ;
assign -> lvalue /= expr ·, )
assign -> lvalue /= expr ·, ,
***EndSet***
***EndState***
***State***
181
I_449_652_1017
***Set***
assign -> lvalue %= expr ·, ;
assign -> lvalue %= expr ·, )
assign -> lvalue %= expr ·, ,
***EndSet***
***EndState***
***State***
182
I_450_545_653_1018_1033_1105_1114_1174_1183_1441_1450_1476_1507
***Set***
call -> memberaccess ( args · ), ;
call -> memberaccess ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> memberaccess ( args · ), &&
call -> memberaccess ( args · ), ||
call -> memberaccess ( args · ), >
call -> memberaccess ( args · ), <
call -> memberaccess ( args · ), >=
call -> memberaccess ( args · ), <=
call -> memberaccess ( args · ), ==
call -> memberaccess ( args · ), !=
call -> memberaccess ( args · ), +
call -> memberaccess ( args · ), -
call -> memberaccess ( args · ), *
call -> memberaccess ( args · ), /
call -> memberaccess ( args · ), %
call -> memberaccess ( args · ), )
call -> memberaccess ( args · ), ,
call -> memberaccess ( args · ), ]
***EndSet***
***EndState***
***State***
183
I_451_546_654_780_872_1019_1034_1106_1115_1175_1184_1221_1442_1451_1477
***Set***
indexaccess -> memberaccess [ aexpr · ], =
indexaccess -> memberaccess [ aexpr · ], +=
indexaccess -> memberaccess [ aexpr · ], -=
indexaccess -> memberaccess [ aexpr · ], *=
indexaccess -> memberaccess [ aexpr · ], /=
indexaccess -> memberaccess [ aexpr · ], %=
indexaccess -> memberaccess [ aexpr · ], .
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
indexaccess -> memberaccess [ aexpr · ], ;
indexaccess -> memberaccess [ aexpr · ], &&
indexaccess -> memberaccess [ aexpr · ], ||
indexaccess -> memberaccess [ aexpr · ], >
indexaccess -> memberaccess [ aexpr · ], <
indexaccess -> memberaccess [ aexpr · ], >=
indexaccess -> memberaccess [ aexpr · ], <=
indexaccess -> memberaccess [ aexpr · ], ==
indexaccess -> memberaccess [ aexpr · ], !=
indexaccess -> memberaccess [ aexpr · ], +
indexaccess -> memberaccess [ aexpr · ], -
indexaccess -> memberaccess [ aexpr · ], *
indexaccess -> memberaccess [ aexpr · ], /
indexaccess -> memberaccess [ aexpr · ], %
indexaccess -> memberaccess [ aexpr · ], )
indexaccess -> memberaccess [ aexpr · ], ,
indexaccess -> memberaccess [ aexpr · ], ]
***EndSet***
***EndState***
***State***
184
I_452_918_1116_1513_1639_1675
***Set***
namespaceblock -> namespace ID { statements · }, $
namespaceblock -> namespace ID { statements · }, namespace
namespaceblock -> namespace ID { statements · }, {
namespaceblock -> namespace ID { statements · }, ID
namespaceblock -> namespace ID { statements · }, void
namespaceblock -> namespace ID { statements · }, bool
namespaceblock -> namespace ID { statements · }, int
namespaceblock -> namespace ID { statements · }, long
namespaceblock -> namespace ID { statements · }, float
namespaceblock -> namespace ID { statements · }, double
namespaceblock -> namespace ID { statements · }, char
namespaceblock -> namespace ID { statements · }, string
namespaceblock -> namespace ID { statements · }, var
namespaceblock -> namespace ID { statements · }, own
namespaceblock -> namespace ID { statements · }, bor
namespaceblock -> namespace ID { statements · }, const
namespaceblock -> namespace ID { statements · }, extern
namespaceblock -> namespace ID { statements · }, class
namespaceblock -> namespace ID { statements · }, (
namespaceblock -> namespace ID { statements · }, this
namespaceblock -> namespace ID { statements · }, new
namespaceblock -> namespace ID { statements · }, LITBOOL
namespaceblock -> namespace ID { statements · }, LITINT
namespaceblock -> namespace ID { statements · }, LITLONG
namespaceblock -> namespace ID { statements · }, LITFLOAT
namespaceblock -> namespace ID { statements · }, LITDOUBLE
namespaceblock -> namespace ID { statements · }, LITCHAR
namespaceblock -> namespace ID { statements · }, LITSTRING
namespaceblock -> namespace ID { statements · }, null
namespaceblock -> namespace ID { statements · }, ++
namespaceblock -> namespace ID { statements · }, --
namespaceblock -> namespace ID { statements · }, break
namespaceblock -> namespace ID { statements · }, return
namespaceblock -> namespace ID { statements · }, delete
namespaceblock -> namespace ID { statements · }, while
namespaceblock -> namespace ID { statements · }, for
namespaceblock -> namespace ID { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { statements · }, }
namespaceblock -> namespace ID { statements · }, &&
namespaceblock -> namespace ID { statements · }, ||
namespaceblock -> namespace ID { statements · }, +
namespaceblock -> namespace ID { statements · }, -
namespaceblock -> namespace ID { statements · }, *
namespaceblock -> namespace ID { statements · }, /
namespaceblock -> namespace ID { statements · }, %
namespaceblock -> namespace ID { statements · }, !
namespaceblock -> namespace ID { statements · }, else
***EndSet***
***EndState***
***State***
185
I_454_919_1117_1459_1514_1640_1676
***Set***
declstmt -> extern type ID ( · params ) ;, $
declstmt -> extern type ID ( · params ) ;, namespace
declstmt -> extern type ID ( · params ) ;, {
declstmt -> extern type ID ( · params ) ;, ID
declstmt -> extern type ID ( · params ) ;, void
declstmt -> extern type ID ( · params ) ;, bool
declstmt -> extern type ID ( · params ) ;, int
declstmt -> extern type ID ( · params ) ;, long
declstmt -> extern type ID ( · params ) ;, float
declstmt -> extern type ID ( · params ) ;, double
declstmt -> extern type ID ( · params ) ;, char
declstmt -> extern type ID ( · params ) ;, string
declstmt -> extern type ID ( · params ) ;, var
declstmt -> extern type ID ( · params ) ;, own
declstmt -> extern type ID ( · params ) ;, bor
declstmt -> extern type ID ( · params ) ;, const
declstmt -> extern type ID ( · params ) ;, extern
declstmt -> extern type ID ( · params ) ;, class
declstmt -> extern type ID ( · params ) ;, (
declstmt -> extern type ID ( · params ) ;, this
declstmt -> extern type ID ( · params ) ;, new
declstmt -> extern type ID ( · params ) ;, LITBOOL
declstmt -> extern type ID ( · params ) ;, LITINT
declstmt -> extern type ID ( · params ) ;, LITLONG
declstmt -> extern type ID ( · params ) ;, LITFLOAT
declstmt -> extern type ID ( · params ) ;, LITDOUBLE
declstmt -> extern type ID ( · params ) ;, LITCHAR
declstmt -> extern type ID ( · params ) ;, LITSTRING
declstmt -> extern type ID ( · params ) ;, null
declstmt -> extern type ID ( · params ) ;, ++
declstmt -> extern type ID ( · params ) ;, --
declstmt -> extern type ID ( · params ) ;, break
declstmt -> extern type ID ( · params ) ;, return
declstmt -> extern type ID ( · params ) ;, delete
declstmt -> extern type ID ( · params ) ;, while
declstmt -> extern type ID ( · params ) ;, for
declstmt -> extern type ID ( · params ) ;, if
params -> ·, )
params -> · type ID, )
params -> · tmodf type ID, )
params -> · params , type ID, )
params -> · params , tmodf type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
params -> ·, ,
params -> · type ID, ,
params -> · tmodf type ID, ,
params -> · params , type ID, ,
params -> · params , tmodf type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern type ID ( · params ) ;, }
declstmt -> extern type ID ( · params ) ;, &&
declstmt -> extern type ID ( · params ) ;, ||
declstmt -> extern type ID ( · params ) ;, +
declstmt -> extern type ID ( · params ) ;, -
declstmt -> extern type ID ( · params ) ;, *
declstmt -> extern type ID ( · params ) ;, /
declstmt -> extern type ID ( · params ) ;, %
declstmt -> extern type ID ( · params ) ;, !
declstmt -> extern type ID ( · params ) ;, else
***EndSet***
***EndState***
***State***
186
I_456_920_1118_1460_1515_1641_1677
***Set***
declstmt -> const type ID = · lit ;, $
declstmt -> const type ID = · lit ;, namespace
declstmt -> const type ID = · lit ;, {
declstmt -> const type ID = · lit ;, ID
declstmt -> const type ID = · lit ;, void
declstmt -> const type ID = · lit ;, bool
declstmt -> const type ID = · lit ;, int
declstmt -> const type ID = · lit ;, long
declstmt -> const type ID = · lit ;, float
declstmt -> const type ID = · lit ;, double
declstmt -> const type ID = · lit ;, char
declstmt -> const type ID = · lit ;, string
declstmt -> const type ID = · lit ;, var
declstmt -> const type ID = · lit ;, own
declstmt -> const type ID = · lit ;, bor
declstmt -> const type ID = · lit ;, const
declstmt -> const type ID = · lit ;, extern
declstmt -> const type ID = · lit ;, class
declstmt -> const type ID = · lit ;, (
declstmt -> const type ID = · lit ;, this
declstmt -> const type ID = · lit ;, new
declstmt -> const type ID = · lit ;, LITBOOL
declstmt -> const type ID = · lit ;, LITINT
declstmt -> const type ID = · lit ;, LITLONG
declstmt -> const type ID = · lit ;, LITFLOAT
declstmt -> const type ID = · lit ;, LITDOUBLE
declstmt -> const type ID = · lit ;, LITCHAR
declstmt -> const type ID = · lit ;, LITSTRING
declstmt -> const type ID = · lit ;, null
declstmt -> const type ID = · lit ;, ++
declstmt -> const type ID = · lit ;, --
declstmt -> const type ID = · lit ;, break
declstmt -> const type ID = · lit ;, return
declstmt -> const type ID = · lit ;, delete
declstmt -> const type ID = · lit ;, while
declstmt -> const type ID = · lit ;, for
declstmt -> const type ID = · lit ;, if
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
declstmt -> const type ID = · lit ;, }
declstmt -> const type ID = · lit ;, &&
declstmt -> const type ID = · lit ;, ||
declstmt -> const type ID = · lit ;, +
declstmt -> const type ID = · lit ;, -
declstmt -> const type ID = · lit ;, *
declstmt -> const type ID = · lit ;, /
declstmt -> const type ID = · lit ;, %
declstmt -> const type ID = · lit ;, !
declstmt -> const type ID = · lit ;, else
***EndSet***
***EndState***
***State***
187
I_457_921_1119_1461_1516_1642_1678
***Set***
declstmt -> class own ID inherit · { declstatements }, $
declstmt -> class own ID inherit · { declstatements }, namespace
declstmt -> class own ID inherit · { declstatements }, {
declstmt -> class own ID inherit · { declstatements }, ID
declstmt -> class own ID inherit · { declstatements }, void
declstmt -> class own ID inherit · { declstatements }, bool
declstmt -> class own ID inherit · { declstatements }, int
declstmt -> class own ID inherit · { declstatements }, long
declstmt -> class own ID inherit · { declstatements }, float
declstmt -> class own ID inherit · { declstatements }, double
declstmt -> class own ID inherit · { declstatements }, char
declstmt -> class own ID inherit · { declstatements }, string
declstmt -> class own ID inherit · { declstatements }, var
declstmt -> class own ID inherit · { declstatements }, own
declstmt -> class own ID inherit · { declstatements }, bor
declstmt -> class own ID inherit · { declstatements }, const
declstmt -> class own ID inherit · { declstatements }, extern
declstmt -> class own ID inherit · { declstatements }, class
declstmt -> class own ID inherit · { declstatements }, (
declstmt -> class own ID inherit · { declstatements }, this
declstmt -> class own ID inherit · { declstatements }, new
declstmt -> class own ID inherit · { declstatements }, LITBOOL
declstmt -> class own ID inherit · { declstatements }, LITINT
declstmt -> class own ID inherit · { declstatements }, LITLONG
declstmt -> class own ID inherit · { declstatements }, LITFLOAT
declstmt -> class own ID inherit · { declstatements }, LITDOUBLE
declstmt -> class own ID inherit · { declstatements }, LITCHAR
declstmt -> class own ID inherit · { declstatements }, LITSTRING
declstmt -> class own ID inherit · { declstatements }, null
declstmt -> class own ID inherit · { declstatements }, ++
declstmt -> class own ID inherit · { declstatements }, --
declstmt -> class own ID inherit · { declstatements }, break
declstmt -> class own ID inherit · { declstatements }, return
declstmt -> class own ID inherit · { declstatements }, delete
declstmt -> class own ID inherit · { declstatements }, while
declstmt -> class own ID inherit · { declstatements }, for
declstmt -> class own ID inherit · { declstatements }, if
declstmt -> class own ID inherit · { declstatements }, }
declstmt -> class own ID inherit · { declstatements }, &&
declstmt -> class own ID inherit · { declstatements }, ||
declstmt -> class own ID inherit · { declstatements }, +
declstmt -> class own ID inherit · { declstatements }, -
declstmt -> class own ID inherit · { declstatements }, *
declstmt -> class own ID inherit · { declstatements }, /
declstmt -> class own ID inherit · { declstatements }, %
declstmt -> class own ID inherit · { declstatements }, !
declstmt -> class own ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
188
I_458
***Set***
inherit -> : ID ·, {
***EndSet***
***EndState***
***State***
189
I_459_922_1120_1462_1517_1643_1679
***Set***
declstmt -> class ID inherit { · declstatements }, $
declstmt -> class ID inherit { · declstatements }, namespace
declstmt -> class ID inherit { · declstatements }, {
declstmt -> class ID inherit { · declstatements }, ID
declstmt -> class ID inherit { · declstatements }, void
declstmt -> class ID inherit { · declstatements }, bool
declstmt -> class ID inherit { · declstatements }, int
declstmt -> class ID inherit { · declstatements }, long
declstmt -> class ID inherit { · declstatements }, float
declstmt -> class ID inherit { · declstatements }, double
declstmt -> class ID inherit { · declstatements }, char
declstmt -> class ID inherit { · declstatements }, string
declstmt -> class ID inherit { · declstatements }, var
declstmt -> class ID inherit { · declstatements }, own
declstmt -> class ID inherit { · declstatements }, bor
declstmt -> class ID inherit { · declstatements }, const
declstmt -> class ID inherit { · declstatements }, extern
declstmt -> class ID inherit { · declstatements }, class
declstmt -> class ID inherit { · declstatements }, (
declstmt -> class ID inherit { · declstatements }, this
declstmt -> class ID inherit { · declstatements }, new
declstmt -> class ID inherit { · declstatements }, LITBOOL
declstmt -> class ID inherit { · declstatements }, LITINT
declstmt -> class ID inherit { · declstatements }, LITLONG
declstmt -> class ID inherit { · declstatements }, LITFLOAT
declstmt -> class ID inherit { · declstatements }, LITDOUBLE
declstmt -> class ID inherit { · declstatements }, LITCHAR
declstmt -> class ID inherit { · declstatements }, LITSTRING
declstmt -> class ID inherit { · declstatements }, null
declstmt -> class ID inherit { · declstatements }, ++
declstmt -> class ID inherit { · declstatements }, --
declstmt -> class ID inherit { · declstatements }, break
declstmt -> class ID inherit { · declstatements }, return
declstmt -> class ID inherit { · declstatements }, delete
declstmt -> class ID inherit { · declstatements }, while
declstmt -> class ID inherit { · declstatements }, for
declstmt -> class ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, long
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, double
declstatements -> · declstatements declstmt, char
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, var
declstatements -> · declstatements declstmt, own
declstatements -> · declstatements declstmt, bor
declstatements -> · declstatements declstmt, const
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, long
declstatements -> · declstmt, float
declstatements -> · declstmt, double
declstatements -> · declstmt, char
declstatements -> · declstmt, string
declstatements -> · declstmt, var
declstatements -> · declstmt, own
declstatements -> · declstmt, bor
declstatements -> · declstmt, const
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, long
declstatements -> ·, float
declstatements -> ·, double
declstatements -> ·, char
declstatements -> ·, string
declstatements -> ·, var
declstatements -> ·, own
declstatements -> ·, bor
declstatements -> ·, const
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { · declstatements }, }
declstmt -> class ID inherit { · declstatements }, &&
declstmt -> class ID inherit { · declstatements }, ||
declstmt -> class ID inherit { · declstatements }, +
declstmt -> class ID inherit { · declstatements }, -
declstmt -> class ID inherit { · declstatements }, *
declstmt -> class ID inherit { · declstatements }, /
declstmt -> class ID inherit { · declstatements }, %
declstmt -> class ID inherit { · declstatements }, !
declstmt -> class ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
190
I_460_774_867_1216_1267_1311_1318_1384_1391_1557_1564_1586_1615
***Set***
newobj -> new ID ( ) ·, ;
newobj -> new ID ( ) ·, .
newobj -> new ID ( ) ·, &&
newobj -> new ID ( ) ·, ||
newobj -> new ID ( ) ·, >
newobj -> new ID ( ) ·, <
newobj -> new ID ( ) ·, >=
newobj -> new ID ( ) ·, <=
newobj -> new ID ( ) ·, ==
newobj -> new ID ( ) ·, !=
newobj -> new ID ( ) ·, +
newobj -> new ID ( ) ·, -
newobj -> new ID ( ) ·, *
newobj -> new ID ( ) ·, /
newobj -> new ID ( ) ·, %
newobj -> new ID ( ) ·, )
newobj -> new ID ( ) ·, ,
newobj -> new ID ( ) ·, ]
***EndSet***
***EndState***
***State***
191
I_466_570_935_1023_1095_1109_1164_1178_1431_1445_1471
***Set***
cast -> ( type ) · factor, ;
cast -> ( type ) · factor, &&
cast -> ( type ) · factor, ||
cast -> ( type ) · factor, >
cast -> ( type ) · factor, <
cast -> ( type ) · factor, >=
cast -> ( type ) · factor, <=
cast -> ( type ) · factor, ==
cast -> ( type ) · factor, !=
cast -> ( type ) · factor, +
cast -> ( type ) · factor, -
cast -> ( type ) · factor, *
cast -> ( type ) · factor, /
cast -> ( type ) · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
cast -> ( type ) · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
cast -> ( type ) · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
cast -> ( type ) · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
192
I_473_576_941
***Set***
bexpr -> bexpr || bexpr ·, ;
bexpr -> bexpr || bexpr ·, &&
bexpr -> bexpr || bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr || bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr || bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
193
I_474_577_942
***Set***
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
***EndSet***
***EndState***
***State***
194
I_477_579_944
***Set***
bexpr -> bexpr && bexpr ·, ;
bexpr -> bexpr && bexpr ·, &&
bexpr -> bexpr && bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr && bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr && bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
195
I_499_601_966
***Set***
bexpr -> aexpr == aexpr ·, ;
bexpr -> aexpr == aexpr ·, &&
bexpr -> aexpr == aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr == aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr == aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
196
I_507_609_974
***Set***
bexpr -> aexpr != aexpr ·, ;
bexpr -> aexpr != aexpr ·, &&
bexpr -> aexpr != aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr != aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr != aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
197
I_508_610_975
***Set***
bexpr -> aexpr <= aexpr ·, ;
bexpr -> aexpr <= aexpr ·, &&
bexpr -> aexpr <= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr <= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr <= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
198
I_509_611_976
***Set***
bexpr -> aexpr >= aexpr ·, ;
bexpr -> aexpr >= aexpr ·, &&
bexpr -> aexpr >= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr >= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr >= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
199
I_510_612_977
***Set***
bexpr -> aexpr > aexpr ·, ;
bexpr -> aexpr > aexpr ·, &&
bexpr -> aexpr > aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr > aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr > aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
200
I_511_613_978
***Set***
bexpr -> aexpr < aexpr ·, ;
bexpr -> aexpr < aexpr ·, &&
bexpr -> aexpr < aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr < aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr < aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
201
I_533_635_1000_1027_1082_1099_1168_1435
***Set***
aexpr -> aexpr + term ·, ;
aexpr -> aexpr + term ·, >
aexpr -> aexpr + term ·, <
aexpr -> aexpr + term ·, >=
aexpr -> aexpr + term ·, <=
aexpr -> aexpr + term ·, ==
aexpr -> aexpr + term ·, !=
aexpr -> aexpr + term ·, +
aexpr -> aexpr + term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr + term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr + term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr + term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr + term ·, &&
aexpr -> aexpr + term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
202
I_540_642_1007_1028_1089_1100_1169_1436
***Set***
aexpr -> aexpr - term ·, ;
aexpr -> aexpr - term ·, >
aexpr -> aexpr - term ·, <
aexpr -> aexpr - term ·, >=
aexpr -> aexpr - term ·, <=
aexpr -> aexpr - term ·, ==
aexpr -> aexpr - term ·, !=
aexpr -> aexpr - term ·, +
aexpr -> aexpr - term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr - term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr - term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr - term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr - term ·, &&
aexpr -> aexpr - term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
203
I_541_643_1008_1029_1090_1101_1170_1437
***Set***
term -> term * factor ·, ;
term -> term * factor ·, >
term -> term * factor ·, <
term -> term * factor ·, >=
term -> term * factor ·, <=
term -> term * factor ·, ==
term -> term * factor ·, !=
term -> term * factor ·, +
term -> term * factor ·, -
term -> term * factor ·, *
term -> term * factor ·, /
term -> term * factor ·, %
term -> term * factor ·, )
term -> term * factor ·, ,
term -> term * factor ·, ]
term -> term * factor ·, &&
term -> term * factor ·, ||
***EndSet***
***EndState***
***State***
204
I_542_644_1009_1030_1091_1102_1171_1438
***Set***
term -> term / factor ·, ;
term -> term / factor ·, >
term -> term / factor ·, <
term -> term / factor ·, >=
term -> term / factor ·, <=
term -> term / factor ·, ==
term -> term / factor ·, !=
term -> term / factor ·, +
term -> term / factor ·, -
term -> term / factor ·, *
term -> term / factor ·, /
term -> term / factor ·, %
term -> term / factor ·, )
term -> term / factor ·, ,
term -> term / factor ·, ]
term -> term / factor ·, &&
term -> term / factor ·, ||
***EndSet***
***EndState***
***State***
205
I_543_645_1010_1031_1092_1103_1172_1439
***Set***
term -> term % factor ·, ;
term -> term % factor ·, >
term -> term % factor ·, <
term -> term % factor ·, >=
term -> term % factor ·, <=
term -> term % factor ·, ==
term -> term % factor ·, !=
term -> term % factor ·, +
term -> term % factor ·, -
term -> term % factor ·, *
term -> term % factor ·, /
term -> term % factor ·, %
term -> term % factor ·, )
term -> term % factor ·, ,
term -> term % factor ·, ]
term -> term % factor ·, &&
term -> term % factor ·, ||
***EndSet***
***EndState***
***State***
206
I_547_923_1121_1518_1644_1680
***Set***
stmt -> while ( expr ) · stmt, $
stmt -> while ( expr ) · stmt, namespace
stmt -> while ( expr ) · stmt, {
stmt -> while ( expr ) · stmt, ID
stmt -> while ( expr ) · stmt, void
stmt -> while ( expr ) · stmt, bool
stmt -> while ( expr ) · stmt, int
stmt -> while ( expr ) · stmt, long
stmt -> while ( expr ) · stmt, float
stmt -> while ( expr ) · stmt, double
stmt -> while ( expr ) · stmt, char
stmt -> while ( expr ) · stmt, string
stmt -> while ( expr ) · stmt, var
stmt -> while ( expr ) · stmt, own
stmt -> while ( expr ) · stmt, bor
stmt -> while ( expr ) · stmt, const
stmt -> while ( expr ) · stmt, extern
stmt -> while ( expr ) · stmt, class
stmt -> while ( expr ) · stmt, (
stmt -> while ( expr ) · stmt, this
stmt -> while ( expr ) · stmt, new
stmt -> while ( expr ) · stmt, LITBOOL
stmt -> while ( expr ) · stmt, LITINT
stmt -> while ( expr ) · stmt, LITLONG
stmt -> while ( expr ) · stmt, LITFLOAT
stmt -> while ( expr ) · stmt, LITDOUBLE
stmt -> while ( expr ) · stmt, LITCHAR
stmt -> while ( expr ) · stmt, LITSTRING
stmt -> while ( expr ) · stmt, null
stmt -> while ( expr ) · stmt, ++
stmt -> while ( expr ) · stmt, --
stmt -> while ( expr ) · stmt, break
stmt -> while ( expr ) · stmt, return
stmt -> while ( expr ) · stmt, delete
stmt -> while ( expr ) · stmt, while
stmt -> while ( expr ) · stmt, for
stmt -> while ( expr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> while ( expr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmt -> while ( expr ) · stmt, &&
stmt -> while ( expr ) · stmt, ||
stmt -> while ( expr ) · stmt, +
stmt -> while ( expr ) · stmt, -
stmt -> while ( expr ) · stmt, *
stmt -> while ( expr ) · stmt, /
stmt -> while ( expr ) · stmt, %
stmt -> while ( expr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
stmt -> while ( expr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · tmodf type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · tmodf type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · tmodf type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · class own ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
207
I_561_924_1122_1519_1645_1681
***Set***
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, $
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, {
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, void
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, int
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, long
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, float
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, double
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, char
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, string
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, var
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, own
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bor
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, const
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, class
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, (
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, this
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, new
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITLONG
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, null
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, --
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, break
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, return
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, while
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, for
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, if
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, }
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, +
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, -
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, *
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, /
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, %
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, !
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
208
I_566_925_1123_1520_1646_1682
***Set***
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, long
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, var
stmt -> if ( expr ) · stmt elifclauselist elseclause, own
stmt -> if ( expr ) · stmt elifclauselist elseclause, bor
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · namespaceblock, $
stmt -> · statementblock, else
stmt -> · statementblock, $
stmt -> · declstmt, else
stmt -> · declstmt, $
stmt -> · stmtexpr ;, else
stmt -> · stmtexpr ;, $
stmt -> · break ;, else
stmt -> · break ;, $
stmt -> · return expr ;, else
stmt -> · return expr ;, $
stmt -> · return ;, else
stmt -> · return ;, $
stmt -> · delete expr ;, else
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, else
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, else
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, else
declstmt -> · tmodf type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · tmodf type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · tmodf type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · class own ID inherit { declstatements }, else
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
209
I_713
***Set***
args -> args , · expr, )
args -> args , · expr, ,
expr -> · assign, )
expr -> · nexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
210
I_714_781_873_1222_1270_1314_1321_1387_1394_1560_1567_1589_1616
***Set***
call -> ID ( args ) ·, ;
call -> ID ( args ) ·, .
call -> ID ( args ) ·, &&
call -> ID ( args ) ·, ||
call -> ID ( args ) ·, >
call -> ID ( args ) ·, <
call -> ID ( args ) ·, >=
call -> ID ( args ) ·, <=
call -> ID ( args ) ·, ==
call -> ID ( args ) ·, !=
call -> ID ( args ) ·, +
call -> ID ( args ) ·, -
call -> ID ( args ) ·, *
call -> ID ( args ) ·, /
call -> ID ( args ) ·, %
call -> ID ( args ) ·, )
call -> ID ( args ) ·, ,
call -> ID ( args ) ·, ]
***EndSet***
***EndState***
***State***
211
I_738_752_772_782_874_1035_1057_1159_1223_1271_1315_1322_1388_1395_1426_1561_1568_1590_1617
***Set***
idBracket -> ID [ optidx ] ·, ID
idBracket -> ID [ optidx ] ·, operator
idBracket -> ID [ optidx ] ·, =
idBracket -> ID [ optidx ] ·, +=
idBracket -> ID [ optidx ] ·, -=
idBracket -> ID [ optidx ] ·, *=
idBracket -> ID [ optidx ] ·, /=
idBracket -> ID [ optidx ] ·, %=
idBracket -> ID [ optidx ] ·, .
idBracket -> ID [ optidx ] ·, ;
idBracket -> ID [ optidx ] ·, &&
idBracket -> ID [ optidx ] ·, ||
idBracket -> ID [ optidx ] ·, >
idBracket -> ID [ optidx ] ·, <
idBracket -> ID [ optidx ] ·, >=
idBracket -> ID [ optidx ] ·, <=
idBracket -> ID [ optidx ] ·, ==
idBracket -> ID [ optidx ] ·, !=
idBracket -> ID [ optidx ] ·, +
idBracket -> ID [ optidx ] ·, -
idBracket -> ID [ optidx ] ·, *
idBracket -> ID [ optidx ] ·, /
idBracket -> ID [ optidx ] ·, %
idBracket -> ID [ optidx ] ·, )
idBracket -> ID [ optidx ] ·, ,
idBracket -> ID [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
212
I_740_926_1135_1463_1523_1649_1685
***Set***
declstmt -> tmodf type operator ID · ( params ) { statements }, $
declstmt -> tmodf type operator ID · ( params ) { statements }, namespace
declstmt -> tmodf type operator ID · ( params ) { statements }, {
declstmt -> tmodf type operator ID · ( params ) { statements }, ID
declstmt -> tmodf type operator ID · ( params ) { statements }, void
declstmt -> tmodf type operator ID · ( params ) { statements }, bool
declstmt -> tmodf type operator ID · ( params ) { statements }, int
declstmt -> tmodf type operator ID · ( params ) { statements }, long
declstmt -> tmodf type operator ID · ( params ) { statements }, float
declstmt -> tmodf type operator ID · ( params ) { statements }, double
declstmt -> tmodf type operator ID · ( params ) { statements }, char
declstmt -> tmodf type operator ID · ( params ) { statements }, string
declstmt -> tmodf type operator ID · ( params ) { statements }, var
declstmt -> tmodf type operator ID · ( params ) { statements }, own
declstmt -> tmodf type operator ID · ( params ) { statements }, bor
declstmt -> tmodf type operator ID · ( params ) { statements }, const
declstmt -> tmodf type operator ID · ( params ) { statements }, extern
declstmt -> tmodf type operator ID · ( params ) { statements }, class
declstmt -> tmodf type operator ID · ( params ) { statements }, (
declstmt -> tmodf type operator ID · ( params ) { statements }, this
declstmt -> tmodf type operator ID · ( params ) { statements }, new
declstmt -> tmodf type operator ID · ( params ) { statements }, LITBOOL
declstmt -> tmodf type operator ID · ( params ) { statements }, LITINT
declstmt -> tmodf type operator ID · ( params ) { statements }, LITLONG
declstmt -> tmodf type operator ID · ( params ) { statements }, LITFLOAT
declstmt -> tmodf type operator ID · ( params ) { statements }, LITDOUBLE
declstmt -> tmodf type operator ID · ( params ) { statements }, LITCHAR
declstmt -> tmodf type operator ID · ( params ) { statements }, LITSTRING
declstmt -> tmodf type operator ID · ( params ) { statements }, null
declstmt -> tmodf type operator ID · ( params ) { statements }, ++
declstmt -> tmodf type operator ID · ( params ) { statements }, --
declstmt -> tmodf type operator ID · ( params ) { statements }, break
declstmt -> tmodf type operator ID · ( params ) { statements }, return
declstmt -> tmodf type operator ID · ( params ) { statements }, delete
declstmt -> tmodf type operator ID · ( params ) { statements }, while
declstmt -> tmodf type operator ID · ( params ) { statements }, for
declstmt -> tmodf type operator ID · ( params ) { statements }, if
declstmt -> tmodf type operator ID · ( params ) { statements }, }
declstmt -> tmodf type operator ID · ( params ) { statements }, &&
declstmt -> tmodf type operator ID · ( params ) { statements }, ||
declstmt -> tmodf type operator ID · ( params ) { statements }, +
declstmt -> tmodf type operator ID · ( params ) { statements }, -
declstmt -> tmodf type operator ID · ( params ) { statements }, *
declstmt -> tmodf type operator ID · ( params ) { statements }, /
declstmt -> tmodf type operator ID · ( params ) { statements }, %
declstmt -> tmodf type operator ID · ( params ) { statements }, !
declstmt -> tmodf type operator ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
213
I_741_927_1136_1464_1524_1650_1686
***Set***
declstmt -> tmodf type ID ( · params ) { statements }, $
declstmt -> tmodf type ID ( · params ) { statements }, namespace
declstmt -> tmodf type ID ( · params ) { statements }, {
declstmt -> tmodf type ID ( · params ) { statements }, ID
declstmt -> tmodf type ID ( · params ) { statements }, void
declstmt -> tmodf type ID ( · params ) { statements }, bool
declstmt -> tmodf type ID ( · params ) { statements }, int
declstmt -> tmodf type ID ( · params ) { statements }, long
declstmt -> tmodf type ID ( · params ) { statements }, float
declstmt -> tmodf type ID ( · params ) { statements }, double
declstmt -> tmodf type ID ( · params ) { statements }, char
declstmt -> tmodf type ID ( · params ) { statements }, string
declstmt -> tmodf type ID ( · params ) { statements }, var
declstmt -> tmodf type ID ( · params ) { statements }, own
declstmt -> tmodf type ID ( · params ) { statements }, bor
declstmt -> tmodf type ID ( · params ) { statements }, const
declstmt -> tmodf type ID ( · params ) { statements }, extern
declstmt -> tmodf type ID ( · params ) { statements }, class
declstmt -> tmodf type ID ( · params ) { statements }, (
declstmt -> tmodf type ID ( · params ) { statements }, this
declstmt -> tmodf type ID ( · params ) { statements }, new
declstmt -> tmodf type ID ( · params ) { statements }, LITBOOL
declstmt -> tmodf type ID ( · params ) { statements }, LITINT
declstmt -> tmodf type ID ( · params ) { statements }, LITLONG
declstmt -> tmodf type ID ( · params ) { statements }, LITFLOAT
declstmt -> tmodf type ID ( · params ) { statements }, LITDOUBLE
declstmt -> tmodf type ID ( · params ) { statements }, LITCHAR
declstmt -> tmodf type ID ( · params ) { statements }, LITSTRING
declstmt -> tmodf type ID ( · params ) { statements }, null
declstmt -> tmodf type ID ( · params ) { statements }, ++
declstmt -> tmodf type ID ( · params ) { statements }, --
declstmt -> tmodf type ID ( · params ) { statements }, break
declstmt -> tmodf type ID ( · params ) { statements }, return
declstmt -> tmodf type ID ( · params ) { statements }, delete
declstmt -> tmodf type ID ( · params ) { statements }, while
declstmt -> tmodf type ID ( · params ) { statements }, for
declstmt -> tmodf type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · tmodf type ID, )
params -> · params , type ID, )
params -> · params , tmodf type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
params -> ·, ,
params -> · type ID, ,
params -> · tmodf type ID, ,
params -> · params , type ID, ,
params -> · params , tmodf type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> tmodf type ID ( · params ) { statements }, }
declstmt -> tmodf type ID ( · params ) { statements }, &&
declstmt -> tmodf type ID ( · params ) { statements }, ||
declstmt -> tmodf type ID ( · params ) { statements }, +
declstmt -> tmodf type ID ( · params ) { statements }, -
declstmt -> tmodf type ID ( · params ) { statements }, *
declstmt -> tmodf type ID ( · params ) { statements }, /
declstmt -> tmodf type ID ( · params ) { statements }, %
declstmt -> tmodf type ID ( · params ) { statements }, !
declstmt -> tmodf type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
214
I_742_928_1137_1465_1525_1651_1687
***Set***
declstmt -> tmodf type ID = · expr ;, $
declstmt -> tmodf type ID = · expr ;, namespace
declstmt -> tmodf type ID = · expr ;, {
declstmt -> tmodf type ID = · expr ;, ID
declstmt -> tmodf type ID = · expr ;, void
declstmt -> tmodf type ID = · expr ;, bool
declstmt -> tmodf type ID = · expr ;, int
declstmt -> tmodf type ID = · expr ;, long
declstmt -> tmodf type ID = · expr ;, float
declstmt -> tmodf type ID = · expr ;, double
declstmt -> tmodf type ID = · expr ;, char
declstmt -> tmodf type ID = · expr ;, string
declstmt -> tmodf type ID = · expr ;, var
declstmt -> tmodf type ID = · expr ;, own
declstmt -> tmodf type ID = · expr ;, bor
declstmt -> tmodf type ID = · expr ;, const
declstmt -> tmodf type ID = · expr ;, extern
declstmt -> tmodf type ID = · expr ;, class
declstmt -> tmodf type ID = · expr ;, (
declstmt -> tmodf type ID = · expr ;, this
declstmt -> tmodf type ID = · expr ;, new
declstmt -> tmodf type ID = · expr ;, LITBOOL
declstmt -> tmodf type ID = · expr ;, LITINT
declstmt -> tmodf type ID = · expr ;, LITLONG
declstmt -> tmodf type ID = · expr ;, LITFLOAT
declstmt -> tmodf type ID = · expr ;, LITDOUBLE
declstmt -> tmodf type ID = · expr ;, LITCHAR
declstmt -> tmodf type ID = · expr ;, LITSTRING
declstmt -> tmodf type ID = · expr ;, null
declstmt -> tmodf type ID = · expr ;, ++
declstmt -> tmodf type ID = · expr ;, --
declstmt -> tmodf type ID = · expr ;, break
declstmt -> tmodf type ID = · expr ;, return
declstmt -> tmodf type ID = · expr ;, delete
declstmt -> tmodf type ID = · expr ;, while
declstmt -> tmodf type ID = · expr ;, for
declstmt -> tmodf type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> tmodf type ID = · expr ;, }
declstmt -> tmodf type ID = · expr ;, &&
declstmt -> tmodf type ID = · expr ;, ||
declstmt -> tmodf type ID = · expr ;, +
declstmt -> tmodf type ID = · expr ;, -
declstmt -> tmodf type ID = · expr ;, *
declstmt -> tmodf type ID = · expr ;, /
declstmt -> tmodf type ID = · expr ;, %
declstmt -> tmodf type ID = · expr ;, !
declstmt -> tmodf type ID = · expr ;, else
***EndSet***
***EndState***
***State***
215
I_743_929_1138_1466_1526_1652_1688
***Set***
declstmt -> type operator ID ( · params ) { statements }, $
declstmt -> type operator ID ( · params ) { statements }, namespace
declstmt -> type operator ID ( · params ) { statements }, {
declstmt -> type operator ID ( · params ) { statements }, ID
declstmt -> type operator ID ( · params ) { statements }, void
declstmt -> type operator ID ( · params ) { statements }, bool
declstmt -> type operator ID ( · params ) { statements }, int
declstmt -> type operator ID ( · params ) { statements }, long
declstmt -> type operator ID ( · params ) { statements }, float
declstmt -> type operator ID ( · params ) { statements }, double
declstmt -> type operator ID ( · params ) { statements }, char
declstmt -> type operator ID ( · params ) { statements }, string
declstmt -> type operator ID ( · params ) { statements }, var
declstmt -> type operator ID ( · params ) { statements }, own
declstmt -> type operator ID ( · params ) { statements }, bor
declstmt -> type operator ID ( · params ) { statements }, const
declstmt -> type operator ID ( · params ) { statements }, extern
declstmt -> type operator ID ( · params ) { statements }, class
declstmt -> type operator ID ( · params ) { statements }, (
declstmt -> type operator ID ( · params ) { statements }, this
declstmt -> type operator ID ( · params ) { statements }, new
declstmt -> type operator ID ( · params ) { statements }, LITBOOL
declstmt -> type operator ID ( · params ) { statements }, LITINT
declstmt -> type operator ID ( · params ) { statements }, LITLONG
declstmt -> type operator ID ( · params ) { statements }, LITFLOAT
declstmt -> type operator ID ( · params ) { statements }, LITDOUBLE
declstmt -> type operator ID ( · params ) { statements }, LITCHAR
declstmt -> type operator ID ( · params ) { statements }, LITSTRING
declstmt -> type operator ID ( · params ) { statements }, null
declstmt -> type operator ID ( · params ) { statements }, ++
declstmt -> type operator ID ( · params ) { statements }, --
declstmt -> type operator ID ( · params ) { statements }, break
declstmt -> type operator ID ( · params ) { statements }, return
declstmt -> type operator ID ( · params ) { statements }, delete
declstmt -> type operator ID ( · params ) { statements }, while
declstmt -> type operator ID ( · params ) { statements }, for
declstmt -> type operator ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · tmodf type ID, )
params -> · params , type ID, )
params -> · params , tmodf type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
params -> ·, ,
params -> · type ID, ,
params -> · tmodf type ID, ,
params -> · params , type ID, ,
params -> · params , tmodf type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type operator ID ( · params ) { statements }, }
declstmt -> type operator ID ( · params ) { statements }, &&
declstmt -> type operator ID ( · params ) { statements }, ||
declstmt -> type operator ID ( · params ) { statements }, +
declstmt -> type operator ID ( · params ) { statements }, -
declstmt -> type operator ID ( · params ) { statements }, *
declstmt -> type operator ID ( · params ) { statements }, /
declstmt -> type operator ID ( · params ) { statements }, %
declstmt -> type operator ID ( · params ) { statements }, !
declstmt -> type operator ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
216
I_744
***Set***
params -> tmodf · type ID, )
params -> tmodf · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
217
I_745
***Set***
params -> type · ID, )
params -> type · ID, ,
***EndSet***
***EndState***
***State***
218
I_746_930_1139_1467_1527_1653_1689
***Set***
declstmt -> type ID ( params · ) { statements }, $
declstmt -> type ID ( params · ) { statements }, namespace
declstmt -> type ID ( params · ) { statements }, {
declstmt -> type ID ( params · ) { statements }, ID
declstmt -> type ID ( params · ) { statements }, void
declstmt -> type ID ( params · ) { statements }, bool
declstmt -> type ID ( params · ) { statements }, int
declstmt -> type ID ( params · ) { statements }, long
declstmt -> type ID ( params · ) { statements }, float
declstmt -> type ID ( params · ) { statements }, double
declstmt -> type ID ( params · ) { statements }, char
declstmt -> type ID ( params · ) { statements }, string
declstmt -> type ID ( params · ) { statements }, var
declstmt -> type ID ( params · ) { statements }, own
declstmt -> type ID ( params · ) { statements }, bor
declstmt -> type ID ( params · ) { statements }, const
declstmt -> type ID ( params · ) { statements }, extern
declstmt -> type ID ( params · ) { statements }, class
declstmt -> type ID ( params · ) { statements }, (
declstmt -> type ID ( params · ) { statements }, this
declstmt -> type ID ( params · ) { statements }, new
declstmt -> type ID ( params · ) { statements }, LITBOOL
declstmt -> type ID ( params · ) { statements }, LITINT
declstmt -> type ID ( params · ) { statements }, LITLONG
declstmt -> type ID ( params · ) { statements }, LITFLOAT
declstmt -> type ID ( params · ) { statements }, LITDOUBLE
declstmt -> type ID ( params · ) { statements }, LITCHAR
declstmt -> type ID ( params · ) { statements }, LITSTRING
declstmt -> type ID ( params · ) { statements }, null
declstmt -> type ID ( params · ) { statements }, ++
declstmt -> type ID ( params · ) { statements }, --
declstmt -> type ID ( params · ) { statements }, break
declstmt -> type ID ( params · ) { statements }, return
declstmt -> type ID ( params · ) { statements }, delete
declstmt -> type ID ( params · ) { statements }, while
declstmt -> type ID ( params · ) { statements }, for
declstmt -> type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , tmodf type ID, )
params -> params · , type ID, ,
params -> params · , tmodf type ID, ,
declstmt -> type ID ( params · ) { statements }, }
declstmt -> type ID ( params · ) { statements }, &&
declstmt -> type ID ( params · ) { statements }, ||
declstmt -> type ID ( params · ) { statements }, +
declstmt -> type ID ( params · ) { statements }, -
declstmt -> type ID ( params · ) { statements }, *
declstmt -> type ID ( params · ) { statements }, /
declstmt -> type ID ( params · ) { statements }, %
declstmt -> type ID ( params · ) { statements }, !
declstmt -> type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
219
I_747_931_1140_1468_1528_1654_1690
***Set***
declstmt -> type ID = expr · ;, $
declstmt -> type ID = expr · ;, namespace
declstmt -> type ID = expr · ;, {
declstmt -> type ID = expr · ;, ID
declstmt -> type ID = expr · ;, void
declstmt -> type ID = expr · ;, bool
declstmt -> type ID = expr · ;, int
declstmt -> type ID = expr · ;, long
declstmt -> type ID = expr · ;, float
declstmt -> type ID = expr · ;, double
declstmt -> type ID = expr · ;, char
declstmt -> type ID = expr · ;, string
declstmt -> type ID = expr · ;, var
declstmt -> type ID = expr · ;, own
declstmt -> type ID = expr · ;, bor
declstmt -> type ID = expr · ;, const
declstmt -> type ID = expr · ;, extern
declstmt -> type ID = expr · ;, class
declstmt -> type ID = expr · ;, (
declstmt -> type ID = expr · ;, this
declstmt -> type ID = expr · ;, new
declstmt -> type ID = expr · ;, LITBOOL
declstmt -> type ID = expr · ;, LITINT
declstmt -> type ID = expr · ;, LITLONG
declstmt -> type ID = expr · ;, LITFLOAT
declstmt -> type ID = expr · ;, LITDOUBLE
declstmt -> type ID = expr · ;, LITCHAR
declstmt -> type ID = expr · ;, LITSTRING
declstmt -> type ID = expr · ;, null
declstmt -> type ID = expr · ;, ++
declstmt -> type ID = expr · ;, --
declstmt -> type ID = expr · ;, break
declstmt -> type ID = expr · ;, return
declstmt -> type ID = expr · ;, delete
declstmt -> type ID = expr · ;, while
declstmt -> type ID = expr · ;, for
declstmt -> type ID = expr · ;, if
declstmt -> type ID = expr · ;, }
declstmt -> type ID = expr · ;, &&
declstmt -> type ID = expr · ;, ||
declstmt -> type ID = expr · ;, +
declstmt -> type ID = expr · ;, -
declstmt -> type ID = expr · ;, *
declstmt -> type ID = expr · ;, /
declstmt -> type ID = expr · ;, %
declstmt -> type ID = expr · ;, !
declstmt -> type ID = expr · ;, else
***EndSet***
***EndState***
***State***
220
I_748_754_773_1058_1059_1160_1427_1452_1478_1479_1529_1530_1659_1660_1673
***Set***
primitiveBracket -> primitive [ optidx ] ·, ID
primitiveBracket -> primitive [ optidx ] ·, operator
primitiveBracket -> primitive [ optidx ] ·, .
primitiveBracket -> primitive [ optidx ] ·, ;
primitiveBracket -> primitive [ optidx ] ·, &&
primitiveBracket -> primitive [ optidx ] ·, ||
primitiveBracket -> primitive [ optidx ] ·, >
primitiveBracket -> primitive [ optidx ] ·, <
primitiveBracket -> primitive [ optidx ] ·, >=
primitiveBracket -> primitive [ optidx ] ·, <=
primitiveBracket -> primitive [ optidx ] ·, ==
primitiveBracket -> primitive [ optidx ] ·, !=
primitiveBracket -> primitive [ optidx ] ·, +
primitiveBracket -> primitive [ optidx ] ·, -
primitiveBracket -> primitive [ optidx ] ·, *
primitiveBracket -> primitive [ optidx ] ·, /
primitiveBracket -> primitive [ optidx ] ·, %
primitiveBracket -> primitive [ optidx ] ·, )
primitiveBracket -> primitive [ optidx ] ·, ,
primitiveBracket -> primitive [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
221
I_749_829_916_1265_1272_1316_1323_1389_1396_1562_1569_1591_1618
***Set***
call -> memberaccess ( args ) ·, ;
call -> memberaccess ( args ) ·, .
call -> memberaccess ( args ) ·, &&
call -> memberaccess ( args ) ·, ||
call -> memberaccess ( args ) ·, >
call -> memberaccess ( args ) ·, <
call -> memberaccess ( args ) ·, >=
call -> memberaccess ( args ) ·, <=
call -> memberaccess ( args ) ·, ==
call -> memberaccess ( args ) ·, !=
call -> memberaccess ( args ) ·, +
call -> memberaccess ( args ) ·, -
call -> memberaccess ( args ) ·, *
call -> memberaccess ( args ) ·, /
call -> memberaccess ( args ) ·, %
call -> memberaccess ( args ) ·, )
call -> memberaccess ( args ) ·, ,
call -> memberaccess ( args ) ·, ]
***EndSet***
***EndState***
***State***
222
I_750_830_917_1060_1161_1266_1273_1317_1324_1390_1397_1428_1563_1570_1592
***Set***
indexaccess -> memberaccess [ aexpr ] ·, =
indexaccess -> memberaccess [ aexpr ] ·, +=
indexaccess -> memberaccess [ aexpr ] ·, -=
indexaccess -> memberaccess [ aexpr ] ·, *=
indexaccess -> memberaccess [ aexpr ] ·, /=
indexaccess -> memberaccess [ aexpr ] ·, %=
indexaccess -> memberaccess [ aexpr ] ·, .
indexaccess -> memberaccess [ aexpr ] ·, ;
indexaccess -> memberaccess [ aexpr ] ·, &&
indexaccess -> memberaccess [ aexpr ] ·, ||
indexaccess -> memberaccess [ aexpr ] ·, >
indexaccess -> memberaccess [ aexpr ] ·, <
indexaccess -> memberaccess [ aexpr ] ·, >=
indexaccess -> memberaccess [ aexpr ] ·, <=
indexaccess -> memberaccess [ aexpr ] ·, ==
indexaccess -> memberaccess [ aexpr ] ·, !=
indexaccess -> memberaccess [ aexpr ] ·, +
indexaccess -> memberaccess [ aexpr ] ·, -
indexaccess -> memberaccess [ aexpr ] ·, *
indexaccess -> memberaccess [ aexpr ] ·, /
indexaccess -> memberaccess [ aexpr ] ·, %
indexaccess -> memberaccess [ aexpr ] ·, )
indexaccess -> memberaccess [ aexpr ] ·, ,
indexaccess -> memberaccess [ aexpr ] ·, ]
***EndSet***
***EndState***
***State***
223
I_751_1185_1325_1623_1707_1732
***Set***
namespaceblock -> namespace ID { statements } ·, $
namespaceblock -> namespace ID { statements } ·, namespace
namespaceblock -> namespace ID { statements } ·, {
namespaceblock -> namespace ID { statements } ·, ID
namespaceblock -> namespace ID { statements } ·, void
namespaceblock -> namespace ID { statements } ·, bool
namespaceblock -> namespace ID { statements } ·, int
namespaceblock -> namespace ID { statements } ·, long
namespaceblock -> namespace ID { statements } ·, float
namespaceblock -> namespace ID { statements } ·, double
namespaceblock -> namespace ID { statements } ·, char
namespaceblock -> namespace ID { statements } ·, string
namespaceblock -> namespace ID { statements } ·, var
namespaceblock -> namespace ID { statements } ·, own
namespaceblock -> namespace ID { statements } ·, bor
namespaceblock -> namespace ID { statements } ·, const
namespaceblock -> namespace ID { statements } ·, extern
namespaceblock -> namespace ID { statements } ·, class
namespaceblock -> namespace ID { statements } ·, (
namespaceblock -> namespace ID { statements } ·, this
namespaceblock -> namespace ID { statements } ·, new
namespaceblock -> namespace ID { statements } ·, LITBOOL
namespaceblock -> namespace ID { statements } ·, LITINT
namespaceblock -> namespace ID { statements } ·, LITLONG
namespaceblock -> namespace ID { statements } ·, LITFLOAT
namespaceblock -> namespace ID { statements } ·, LITDOUBLE
namespaceblock -> namespace ID { statements } ·, LITCHAR
namespaceblock -> namespace ID { statements } ·, LITSTRING
namespaceblock -> namespace ID { statements } ·, null
namespaceblock -> namespace ID { statements } ·, ++
namespaceblock -> namespace ID { statements } ·, --
namespaceblock -> namespace ID { statements } ·, break
namespaceblock -> namespace ID { statements } ·, return
namespaceblock -> namespace ID { statements } ·, delete
namespaceblock -> namespace ID { statements } ·, while
namespaceblock -> namespace ID { statements } ·, for
namespaceblock -> namespace ID { statements } ·, if
namespaceblock -> namespace ID { statements } ·, }
namespaceblock -> namespace ID { statements } ·, &&
namespaceblock -> namespace ID { statements } ·, ||
namespaceblock -> namespace ID { statements } ·, +
namespaceblock -> namespace ID { statements } ·, -
namespaceblock -> namespace ID { statements } ·, *
namespaceblock -> namespace ID { statements } ·, /
namespaceblock -> namespace ID { statements } ·, %
namespaceblock -> namespace ID { statements } ·, !
namespaceblock -> namespace ID { statements } ·, else
***EndSet***
***EndState***
***State***
224
I_753_1186_1326_1576_1624_1708_1733
***Set***
declstmt -> extern type ID ( params · ) ;, $
declstmt -> extern type ID ( params · ) ;, namespace
declstmt -> extern type ID ( params · ) ;, {
declstmt -> extern type ID ( params · ) ;, ID
declstmt -> extern type ID ( params · ) ;, void
declstmt -> extern type ID ( params · ) ;, bool
declstmt -> extern type ID ( params · ) ;, int
declstmt -> extern type ID ( params · ) ;, long
declstmt -> extern type ID ( params · ) ;, float
declstmt -> extern type ID ( params · ) ;, double
declstmt -> extern type ID ( params · ) ;, char
declstmt -> extern type ID ( params · ) ;, string
declstmt -> extern type ID ( params · ) ;, var
declstmt -> extern type ID ( params · ) ;, own
declstmt -> extern type ID ( params · ) ;, bor
declstmt -> extern type ID ( params · ) ;, const
declstmt -> extern type ID ( params · ) ;, extern
declstmt -> extern type ID ( params · ) ;, class
declstmt -> extern type ID ( params · ) ;, (
declstmt -> extern type ID ( params · ) ;, this
declstmt -> extern type ID ( params · ) ;, new
declstmt -> extern type ID ( params · ) ;, LITBOOL
declstmt -> extern type ID ( params · ) ;, LITINT
declstmt -> extern type ID ( params · ) ;, LITLONG
declstmt -> extern type ID ( params · ) ;, LITFLOAT
declstmt -> extern type ID ( params · ) ;, LITDOUBLE
declstmt -> extern type ID ( params · ) ;, LITCHAR
declstmt -> extern type ID ( params · ) ;, LITSTRING
declstmt -> extern type ID ( params · ) ;, null
declstmt -> extern type ID ( params · ) ;, ++
declstmt -> extern type ID ( params · ) ;, --
declstmt -> extern type ID ( params · ) ;, break
declstmt -> extern type ID ( params · ) ;, return
declstmt -> extern type ID ( params · ) ;, delete
declstmt -> extern type ID ( params · ) ;, while
declstmt -> extern type ID ( params · ) ;, for
declstmt -> extern type ID ( params · ) ;, if
params -> params · , type ID, )
params -> params · , tmodf type ID, )
params -> params · , type ID, ,
params -> params · , tmodf type ID, ,
declstmt -> extern type ID ( params · ) ;, }
declstmt -> extern type ID ( params · ) ;, &&
declstmt -> extern type ID ( params · ) ;, ||
declstmt -> extern type ID ( params · ) ;, +
declstmt -> extern type ID ( params · ) ;, -
declstmt -> extern type ID ( params · ) ;, *
declstmt -> extern type ID ( params · ) ;, /
declstmt -> extern type ID ( params · ) ;, %
declstmt -> extern type ID ( params · ) ;, !
declstmt -> extern type ID ( params · ) ;, else
***EndSet***
***EndState***
***State***
225
I_763_1187_1327_1577_1625_1709_1734
***Set***
declstmt -> const type ID = lit · ;, $
declstmt -> const type ID = lit · ;, namespace
declstmt -> const type ID = lit · ;, {
declstmt -> const type ID = lit · ;, ID
declstmt -> const type ID = lit · ;, void
declstmt -> const type ID = lit · ;, bool
declstmt -> const type ID = lit · ;, int
declstmt -> const type ID = lit · ;, long
declstmt -> const type ID = lit · ;, float
declstmt -> const type ID = lit · ;, double
declstmt -> const type ID = lit · ;, char
declstmt -> const type ID = lit · ;, string
declstmt -> const type ID = lit · ;, var
declstmt -> const type ID = lit · ;, own
declstmt -> const type ID = lit · ;, bor
declstmt -> const type ID = lit · ;, const
declstmt -> const type ID = lit · ;, extern
declstmt -> const type ID = lit · ;, class
declstmt -> const type ID = lit · ;, (
declstmt -> const type ID = lit · ;, this
declstmt -> const type ID = lit · ;, new
declstmt -> const type ID = lit · ;, LITBOOL
declstmt -> const type ID = lit · ;, LITINT
declstmt -> const type ID = lit · ;, LITLONG
declstmt -> const type ID = lit · ;, LITFLOAT
declstmt -> const type ID = lit · ;, LITDOUBLE
declstmt -> const type ID = lit · ;, LITCHAR
declstmt -> const type ID = lit · ;, LITSTRING
declstmt -> const type ID = lit · ;, null
declstmt -> const type ID = lit · ;, ++
declstmt -> const type ID = lit · ;, --
declstmt -> const type ID = lit · ;, break
declstmt -> const type ID = lit · ;, return
declstmt -> const type ID = lit · ;, delete
declstmt -> const type ID = lit · ;, while
declstmt -> const type ID = lit · ;, for
declstmt -> const type ID = lit · ;, if
declstmt -> const type ID = lit · ;, }
declstmt -> const type ID = lit · ;, &&
declstmt -> const type ID = lit · ;, ||
declstmt -> const type ID = lit · ;, +
declstmt -> const type ID = lit · ;, -
declstmt -> const type ID = lit · ;, *
declstmt -> const type ID = lit · ;, /
declstmt -> const type ID = lit · ;, %
declstmt -> const type ID = lit · ;, !
declstmt -> const type ID = lit · ;, else
***EndSet***
***EndState***
***State***
226
I_764_1188_1328_1578_1626_1710_1735
***Set***
declstmt -> class own ID inherit { · declstatements }, $
declstmt -> class own ID inherit { · declstatements }, namespace
declstmt -> class own ID inherit { · declstatements }, {
declstmt -> class own ID inherit { · declstatements }, ID
declstmt -> class own ID inherit { · declstatements }, void
declstmt -> class own ID inherit { · declstatements }, bool
declstmt -> class own ID inherit { · declstatements }, int
declstmt -> class own ID inherit { · declstatements }, long
declstmt -> class own ID inherit { · declstatements }, float
declstmt -> class own ID inherit { · declstatements }, double
declstmt -> class own ID inherit { · declstatements }, char
declstmt -> class own ID inherit { · declstatements }, string
declstmt -> class own ID inherit { · declstatements }, var
declstmt -> class own ID inherit { · declstatements }, own
declstmt -> class own ID inherit { · declstatements }, bor
declstmt -> class own ID inherit { · declstatements }, const
declstmt -> class own ID inherit { · declstatements }, extern
declstmt -> class own ID inherit { · declstatements }, class
declstmt -> class own ID inherit { · declstatements }, (
declstmt -> class own ID inherit { · declstatements }, this
declstmt -> class own ID inherit { · declstatements }, new
declstmt -> class own ID inherit { · declstatements }, LITBOOL
declstmt -> class own ID inherit { · declstatements }, LITINT
declstmt -> class own ID inherit { · declstatements }, LITLONG
declstmt -> class own ID inherit { · declstatements }, LITFLOAT
declstmt -> class own ID inherit { · declstatements }, LITDOUBLE
declstmt -> class own ID inherit { · declstatements }, LITCHAR
declstmt -> class own ID inherit { · declstatements }, LITSTRING
declstmt -> class own ID inherit { · declstatements }, null
declstmt -> class own ID inherit { · declstatements }, ++
declstmt -> class own ID inherit { · declstatements }, --
declstmt -> class own ID inherit { · declstatements }, break
declstmt -> class own ID inherit { · declstatements }, return
declstmt -> class own ID inherit { · declstatements }, delete
declstmt -> class own ID inherit { · declstatements }, while
declstmt -> class own ID inherit { · declstatements }, for
declstmt -> class own ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, long
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, double
declstatements -> · declstatements declstmt, char
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, var
declstatements -> · declstatements declstmt, own
declstatements -> · declstatements declstmt, bor
declstatements -> · declstatements declstmt, const
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, long
declstatements -> · declstmt, float
declstatements -> · declstmt, double
declstatements -> · declstmt, char
declstatements -> · declstmt, string
declstatements -> · declstmt, var
declstatements -> · declstmt, own
declstatements -> · declstmt, bor
declstatements -> · declstmt, const
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, long
declstatements -> ·, float
declstatements -> ·, double
declstatements -> ·, char
declstatements -> ·, string
declstatements -> ·, var
declstatements -> ·, own
declstatements -> ·, bor
declstatements -> ·, const
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class own ID inherit { · declstatements }, }
declstmt -> class own ID inherit { · declstatements }, &&
declstmt -> class own ID inherit { · declstatements }, ||
declstmt -> class own ID inherit { · declstatements }, +
declstmt -> class own ID inherit { · declstatements }, -
declstmt -> class own ID inherit { · declstatements }, *
declstmt -> class own ID inherit { · declstatements }, /
declstmt -> class own ID inherit { · declstatements }, %
declstmt -> class own ID inherit { · declstatements }, !
declstmt -> class own ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
227
I_768_1189_1329_1579_1627_1711_1736
***Set***
declstmt -> class ID inherit { declstatements · }, $
declstmt -> class ID inherit { declstatements · }, namespace
declstmt -> class ID inherit { declstatements · }, {
declstmt -> class ID inherit { declstatements · }, ID
declstmt -> class ID inherit { declstatements · }, void
declstmt -> class ID inherit { declstatements · }, bool
declstmt -> class ID inherit { declstatements · }, int
declstmt -> class ID inherit { declstatements · }, long
declstmt -> class ID inherit { declstatements · }, float
declstmt -> class ID inherit { declstatements · }, double
declstmt -> class ID inherit { declstatements · }, char
declstmt -> class ID inherit { declstatements · }, string
declstmt -> class ID inherit { declstatements · }, var
declstmt -> class ID inherit { declstatements · }, own
declstmt -> class ID inherit { declstatements · }, bor
declstmt -> class ID inherit { declstatements · }, const
declstmt -> class ID inherit { declstatements · }, extern
declstmt -> class ID inherit { declstatements · }, class
declstmt -> class ID inherit { declstatements · }, (
declstmt -> class ID inherit { declstatements · }, this
declstmt -> class ID inherit { declstatements · }, new
declstmt -> class ID inherit { declstatements · }, LITBOOL
declstmt -> class ID inherit { declstatements · }, LITINT
declstmt -> class ID inherit { declstatements · }, LITLONG
declstmt -> class ID inherit { declstatements · }, LITFLOAT
declstmt -> class ID inherit { declstatements · }, LITDOUBLE
declstmt -> class ID inherit { declstatements · }, LITCHAR
declstmt -> class ID inherit { declstatements · }, LITSTRING
declstmt -> class ID inherit { declstatements · }, null
declstmt -> class ID inherit { declstatements · }, ++
declstmt -> class ID inherit { declstatements · }, --
declstmt -> class ID inherit { declstatements · }, break
declstmt -> class ID inherit { declstatements · }, return
declstmt -> class ID inherit { declstatements · }, delete
declstmt -> class ID inherit { declstatements · }, while
declstmt -> class ID inherit { declstatements · }, for
declstmt -> class ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, long
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, double
declstatements -> declstatements · declstmt, char
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, var
declstatements -> declstatements · declstmt, own
declstatements -> declstatements · declstmt, bor
declstatements -> declstatements · declstmt, const
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { declstatements · }, }
declstmt -> class ID inherit { declstatements · }, &&
declstmt -> class ID inherit { declstatements · }, ||
declstmt -> class ID inherit { declstatements · }, +
declstmt -> class ID inherit { declstatements · }, -
declstmt -> class ID inherit { declstatements · }, *
declstmt -> class ID inherit { declstatements · }, /
declstmt -> class ID inherit { declstatements · }, %
declstmt -> class ID inherit { declstatements · }, !
declstmt -> class ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
228
I_769
***Set***
declstatements -> declstmt ·, }
declstatements -> declstmt ·, ID
declstatements -> declstmt ·, void
declstatements -> declstmt ·, bool
declstatements -> declstmt ·, int
declstatements -> declstmt ·, long
declstatements -> declstmt ·, float
declstatements -> declstmt ·, double
declstatements -> declstmt ·, char
declstatements -> declstmt ·, string
declstatements -> declstmt ·, var
declstatements -> declstmt ·, own
declstatements -> declstmt ·, bor
declstatements -> declstmt ·, const
declstatements -> declstmt ·, extern
declstatements -> declstmt ·, class
***EndSet***
***EndState***
***State***
229
I_777_870_1219_1269_1313_1320_1386_1393_1559_1566_1588
***Set***
cast -> ( type ) factor ·, ;
cast -> ( type ) factor ·, &&
cast -> ( type ) factor ·, ||
cast -> ( type ) factor ·, >
cast -> ( type ) factor ·, <
cast -> ( type ) factor ·, >=
cast -> ( type ) factor ·, <=
cast -> ( type ) factor ·, ==
cast -> ( type ) factor ·, !=
cast -> ( type ) factor ·, +
cast -> ( type ) factor ·, -
cast -> ( type ) factor ·, *
cast -> ( type ) factor ·, /
cast -> ( type ) factor ·, %
cast -> ( type ) factor ·, )
cast -> ( type ) factor ·, ,
cast -> ( type ) factor ·, ]
***EndSet***
***EndState***
***State***
230
I_831_1190_1330_1628_1712_1737
***Set***
stmt -> while ( expr ) stmt ·, $
stmt -> while ( expr ) stmt ·, namespace
stmt -> while ( expr ) stmt ·, {
stmt -> while ( expr ) stmt ·, ID
stmt -> while ( expr ) stmt ·, void
stmt -> while ( expr ) stmt ·, bool
stmt -> while ( expr ) stmt ·, int
stmt -> while ( expr ) stmt ·, long
stmt -> while ( expr ) stmt ·, float
stmt -> while ( expr ) stmt ·, double
stmt -> while ( expr ) stmt ·, char
stmt -> while ( expr ) stmt ·, string
stmt -> while ( expr ) stmt ·, var
stmt -> while ( expr ) stmt ·, own
stmt -> while ( expr ) stmt ·, bor
stmt -> while ( expr ) stmt ·, const
stmt -> while ( expr ) stmt ·, extern
stmt -> while ( expr ) stmt ·, class
stmt -> while ( expr ) stmt ·, (
stmt -> while ( expr ) stmt ·, this
stmt -> while ( expr ) stmt ·, new
stmt -> while ( expr ) stmt ·, LITBOOL
stmt -> while ( expr ) stmt ·, LITINT
stmt -> while ( expr ) stmt ·, LITLONG
stmt -> while ( expr ) stmt ·, LITFLOAT
stmt -> while ( expr ) stmt ·, LITDOUBLE
stmt -> while ( expr ) stmt ·, LITCHAR
stmt -> while ( expr ) stmt ·, LITSTRING
stmt -> while ( expr ) stmt ·, null
stmt -> while ( expr ) stmt ·, ++
stmt -> while ( expr ) stmt ·, --
stmt -> while ( expr ) stmt ·, break
stmt -> while ( expr ) stmt ·, return
stmt -> while ( expr ) stmt ·, delete
stmt -> while ( expr ) stmt ·, while
stmt -> while ( expr ) stmt ·, for
stmt -> while ( expr ) stmt ·, if
stmt -> while ( expr ) stmt ·, }
stmt -> while ( expr ) stmt ·, &&
stmt -> while ( expr ) stmt ·, ||
stmt -> while ( expr ) stmt ·, +
stmt -> while ( expr ) stmt ·, -
stmt -> while ( expr ) stmt ·, *
stmt -> while ( expr ) stmt ·, /
stmt -> while ( expr ) stmt ·, %
stmt -> while ( expr ) stmt ·, !
stmt -> while ( expr ) stmt ·, else
***EndSet***
***EndState***
***State***
231
I_843_1191_1331_1629_1713_1738
***Set***
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, $
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, {
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, void
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, int
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, long
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, float
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, double
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, char
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, string
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, var
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, own
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bor
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, const
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, class
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, (
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, this
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, new
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITLONG
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, null
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, --
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, break
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, return
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, while
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, for
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, if
stmtexpr -> · assign, )
stmtexpr -> · call, )
stmtexpr -> · incdec, )
stmtexpr -> · newobj, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
newobj -> · new ID ( ), )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, }
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, +
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, -
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, *
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, /
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, %
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, !
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
232
I_862_1205_1345_1630_1714_1739
***Set***
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, long
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, var
stmt -> if ( expr ) stmt · elifclauselist elseclause, own
stmt -> if ( expr ) stmt · elifclauselist elseclause, bor
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITLONG
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, long
elifclauselist -> · elifclauselist elifclause, long
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, var
elifclauselist -> · elifclauselist elifclause, var
elifclauselist -> ·, own
elifclauselist -> · elifclauselist elifclause, own
elifclauselist -> ·, bor
elifclauselist -> · elifclauselist elifclause, bor
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITLONG
elifclauselist -> · elifclauselist elifclause, LITLONG
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
233
I_1020
***Set***
args -> args , expr ·, )
args -> args , expr ·, ,
***EndSet***
***EndState***
***State***
234
I_1036_1210_1359_1580_1632_1716_1741
***Set***
declstmt -> tmodf type operator ID ( · params ) { statements }, $
declstmt -> tmodf type operator ID ( · params ) { statements }, namespace
declstmt -> tmodf type operator ID ( · params ) { statements }, {
declstmt -> tmodf type operator ID ( · params ) { statements }, ID
declstmt -> tmodf type operator ID ( · params ) { statements }, void
declstmt -> tmodf type operator ID ( · params ) { statements }, bool
declstmt -> tmodf type operator ID ( · params ) { statements }, int
declstmt -> tmodf type operator ID ( · params ) { statements }, long
declstmt -> tmodf type operator ID ( · params ) { statements }, float
declstmt -> tmodf type operator ID ( · params ) { statements }, double
declstmt -> tmodf type operator ID ( · params ) { statements }, char
declstmt -> tmodf type operator ID ( · params ) { statements }, string
declstmt -> tmodf type operator ID ( · params ) { statements }, var
declstmt -> tmodf type operator ID ( · params ) { statements }, own
declstmt -> tmodf type operator ID ( · params ) { statements }, bor
declstmt -> tmodf type operator ID ( · params ) { statements }, const
declstmt -> tmodf type operator ID ( · params ) { statements }, extern
declstmt -> tmodf type operator ID ( · params ) { statements }, class
declstmt -> tmodf type operator ID ( · params ) { statements }, (
declstmt -> tmodf type operator ID ( · params ) { statements }, this
declstmt -> tmodf type operator ID ( · params ) { statements }, new
declstmt -> tmodf type operator ID ( · params ) { statements }, LITBOOL
declstmt -> tmodf type operator ID ( · params ) { statements }, LITINT
declstmt -> tmodf type operator ID ( · params ) { statements }, LITLONG
declstmt -> tmodf type operator ID ( · params ) { statements }, LITFLOAT
declstmt -> tmodf type operator ID ( · params ) { statements }, LITDOUBLE
declstmt -> tmodf type operator ID ( · params ) { statements }, LITCHAR
declstmt -> tmodf type operator ID ( · params ) { statements }, LITSTRING
declstmt -> tmodf type operator ID ( · params ) { statements }, null
declstmt -> tmodf type operator ID ( · params ) { statements }, ++
declstmt -> tmodf type operator ID ( · params ) { statements }, --
declstmt -> tmodf type operator ID ( · params ) { statements }, break
declstmt -> tmodf type operator ID ( · params ) { statements }, return
declstmt -> tmodf type operator ID ( · params ) { statements }, delete
declstmt -> tmodf type operator ID ( · params ) { statements }, while
declstmt -> tmodf type operator ID ( · params ) { statements }, for
declstmt -> tmodf type operator ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · tmodf type ID, )
params -> · params , type ID, )
params -> · params , tmodf type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
params -> ·, ,
params -> · type ID, ,
params -> · tmodf type ID, ,
params -> · params , type ID, ,
params -> · params , tmodf type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> tmodf type operator ID ( · params ) { statements }, }
declstmt -> tmodf type operator ID ( · params ) { statements }, &&
declstmt -> tmodf type operator ID ( · params ) { statements }, ||
declstmt -> tmodf type operator ID ( · params ) { statements }, +
declstmt -> tmodf type operator ID ( · params ) { statements }, -
declstmt -> tmodf type operator ID ( · params ) { statements }, *
declstmt -> tmodf type operator ID ( · params ) { statements }, /
declstmt -> tmodf type operator ID ( · params ) { statements }, %
declstmt -> tmodf type operator ID ( · params ) { statements }, !
declstmt -> tmodf type operator ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
235
I_1037_1211_1360_1581_1633_1717_1742
***Set***
declstmt -> tmodf type ID ( params · ) { statements }, $
declstmt -> tmodf type ID ( params · ) { statements }, namespace
declstmt -> tmodf type ID ( params · ) { statements }, {
declstmt -> tmodf type ID ( params · ) { statements }, ID
declstmt -> tmodf type ID ( params · ) { statements }, void
declstmt -> tmodf type ID ( params · ) { statements }, bool
declstmt -> tmodf type ID ( params · ) { statements }, int
declstmt -> tmodf type ID ( params · ) { statements }, long
declstmt -> tmodf type ID ( params · ) { statements }, float
declstmt -> tmodf type ID ( params · ) { statements }, double
declstmt -> tmodf type ID ( params · ) { statements }, char
declstmt -> tmodf type ID ( params · ) { statements }, string
declstmt -> tmodf type ID ( params · ) { statements }, var
declstmt -> tmodf type ID ( params · ) { statements }, own
declstmt -> tmodf type ID ( params · ) { statements }, bor
declstmt -> tmodf type ID ( params · ) { statements }, const
declstmt -> tmodf type ID ( params · ) { statements }, extern
declstmt -> tmodf type ID ( params · ) { statements }, class
declstmt -> tmodf type ID ( params · ) { statements }, (
declstmt -> tmodf type ID ( params · ) { statements }, this
declstmt -> tmodf type ID ( params · ) { statements }, new
declstmt -> tmodf type ID ( params · ) { statements }, LITBOOL
declstmt -> tmodf type ID ( params · ) { statements }, LITINT
declstmt -> tmodf type ID ( params · ) { statements }, LITLONG
declstmt -> tmodf type ID ( params · ) { statements }, LITFLOAT
declstmt -> tmodf type ID ( params · ) { statements }, LITDOUBLE
declstmt -> tmodf type ID ( params · ) { statements }, LITCHAR
declstmt -> tmodf type ID ( params · ) { statements }, LITSTRING
declstmt -> tmodf type ID ( params · ) { statements }, null
declstmt -> tmodf type ID ( params · ) { statements }, ++
declstmt -> tmodf type ID ( params · ) { statements }, --
declstmt -> tmodf type ID ( params · ) { statements }, break
declstmt -> tmodf type ID ( params · ) { statements }, return
declstmt -> tmodf type ID ( params · ) { statements }, delete
declstmt -> tmodf type ID ( params · ) { statements }, while
declstmt -> tmodf type ID ( params · ) { statements }, for
declstmt -> tmodf type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , tmodf type ID, )
params -> params · , type ID, ,
params -> params · , tmodf type ID, ,
declstmt -> tmodf type ID ( params · ) { statements }, }
declstmt -> tmodf type ID ( params · ) { statements }, &&
declstmt -> tmodf type ID ( params · ) { statements }, ||
declstmt -> tmodf type ID ( params · ) { statements }, +
declstmt -> tmodf type ID ( params · ) { statements }, -
declstmt -> tmodf type ID ( params · ) { statements }, *
declstmt -> tmodf type ID ( params · ) { statements }, /
declstmt -> tmodf type ID ( params · ) { statements }, %
declstmt -> tmodf type ID ( params · ) { statements }, !
declstmt -> tmodf type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
236
I_1038_1212_1361_1582_1634_1718_1743
***Set***
declstmt -> tmodf type ID = expr · ;, $
declstmt -> tmodf type ID = expr · ;, namespace
declstmt -> tmodf type ID = expr · ;, {
declstmt -> tmodf type ID = expr · ;, ID
declstmt -> tmodf type ID = expr · ;, void
declstmt -> tmodf type ID = expr · ;, bool
declstmt -> tmodf type ID = expr · ;, int
declstmt -> tmodf type ID = expr · ;, long
declstmt -> tmodf type ID = expr · ;, float
declstmt -> tmodf type ID = expr · ;, double
declstmt -> tmodf type ID = expr · ;, char
declstmt -> tmodf type ID = expr · ;, string
declstmt -> tmodf type ID = expr · ;, var
declstmt -> tmodf type ID = expr · ;, own
declstmt -> tmodf type ID = expr · ;, bor
declstmt -> tmodf type ID = expr · ;, const
declstmt -> tmodf type ID = expr · ;, extern
declstmt -> tmodf type ID = expr · ;, class
declstmt -> tmodf type ID = expr · ;, (
declstmt -> tmodf type ID = expr · ;, this
declstmt -> tmodf type ID = expr · ;, new
declstmt -> tmodf type ID = expr · ;, LITBOOL
declstmt -> tmodf type ID = expr · ;, LITINT
declstmt -> tmodf type ID = expr · ;, LITLONG
declstmt -> tmodf type ID = expr · ;, LITFLOAT
declstmt -> tmodf type ID = expr · ;, LITDOUBLE
declstmt -> tmodf type ID = expr · ;, LITCHAR
declstmt -> tmodf type ID = expr · ;, LITSTRING
declstmt -> tmodf type ID = expr · ;, null
declstmt -> tmodf type ID = expr · ;, ++
declstmt -> tmodf type ID = expr · ;, --
declstmt -> tmodf type ID = expr · ;, break
declstmt -> tmodf type ID = expr · ;, return
declstmt -> tmodf type ID = expr · ;, delete
declstmt -> tmodf type ID = expr · ;, while
declstmt -> tmodf type ID = expr · ;, for
declstmt -> tmodf type ID = expr · ;, if
declstmt -> tmodf type ID = expr · ;, }
declstmt -> tmodf type ID = expr · ;, &&
declstmt -> tmodf type ID = expr · ;, ||
declstmt -> tmodf type ID = expr · ;, +
declstmt -> tmodf type ID = expr · ;, -
declstmt -> tmodf type ID = expr · ;, *
declstmt -> tmodf type ID = expr · ;, /
declstmt -> tmodf type ID = expr · ;, %
declstmt -> tmodf type ID = expr · ;, !
declstmt -> tmodf type ID = expr · ;, else
***EndSet***
***EndState***
***State***
237
I_1039_1213_1362_1583_1635_1719_1744
***Set***
declstmt -> type operator ID ( params · ) { statements }, $
declstmt -> type operator ID ( params · ) { statements }, namespace
declstmt -> type operator ID ( params · ) { statements }, {
declstmt -> type operator ID ( params · ) { statements }, ID
declstmt -> type operator ID ( params · ) { statements }, void
declstmt -> type operator ID ( params · ) { statements }, bool
declstmt -> type operator ID ( params · ) { statements }, int
declstmt -> type operator ID ( params · ) { statements }, long
declstmt -> type operator ID ( params · ) { statements }, float
declstmt -> type operator ID ( params · ) { statements }, double
declstmt -> type operator ID ( params · ) { statements }, char
declstmt -> type operator ID ( params · ) { statements }, string
declstmt -> type operator ID ( params · ) { statements }, var
declstmt -> type operator ID ( params · ) { statements }, own
declstmt -> type operator ID ( params · ) { statements }, bor
declstmt -> type operator ID ( params · ) { statements }, const
declstmt -> type operator ID ( params · ) { statements }, extern
declstmt -> type operator ID ( params · ) { statements }, class
declstmt -> type operator ID ( params · ) { statements }, (
declstmt -> type operator ID ( params · ) { statements }, this
declstmt -> type operator ID ( params · ) { statements }, new
declstmt -> type operator ID ( params · ) { statements }, LITBOOL
declstmt -> type operator ID ( params · ) { statements }, LITINT
declstmt -> type operator ID ( params · ) { statements }, LITLONG
declstmt -> type operator ID ( params · ) { statements }, LITFLOAT
declstmt -> type operator ID ( params · ) { statements }, LITDOUBLE
declstmt -> type operator ID ( params · ) { statements }, LITCHAR
declstmt -> type operator ID ( params · ) { statements }, LITSTRING
declstmt -> type operator ID ( params · ) { statements }, null
declstmt -> type operator ID ( params · ) { statements }, ++
declstmt -> type operator ID ( params · ) { statements }, --
declstmt -> type operator ID ( params · ) { statements }, break
declstmt -> type operator ID ( params · ) { statements }, return
declstmt -> type operator ID ( params · ) { statements }, delete
declstmt -> type operator ID ( params · ) { statements }, while
declstmt -> type operator ID ( params · ) { statements }, for
declstmt -> type operator ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , tmodf type ID, )
params -> params · , type ID, ,
params -> params · , tmodf type ID, ,
declstmt -> type operator ID ( params · ) { statements }, }
declstmt -> type operator ID ( params · ) { statements }, &&
declstmt -> type operator ID ( params · ) { statements }, ||
declstmt -> type operator ID ( params · ) { statements }, +
declstmt -> type operator ID ( params · ) { statements }, -
declstmt -> type operator ID ( params · ) { statements }, *
declstmt -> type operator ID ( params · ) { statements }, /
declstmt -> type operator ID ( params · ) { statements }, %
declstmt -> type operator ID ( params · ) { statements }, !
declstmt -> type operator ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
238
I_1040
***Set***
params -> tmodf type · ID, )
params -> tmodf type · ID, ,
***EndSet***
***EndState***
***State***
239
I_1041
***Set***
params -> type ID ·, )
params -> type ID ·, ,
***EndSet***
***EndState***
***State***
240
I_1042
***Set***
params -> params , · type ID, )
params -> params , · tmodf type ID, )
params -> params , · type ID, ,
params -> params , · tmodf type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
241
I_1043_1214_1363_1584_1636_1720_1745
***Set***
declstmt -> type ID ( params ) · { statements }, $
declstmt -> type ID ( params ) · { statements }, namespace
declstmt -> type ID ( params ) · { statements }, {
declstmt -> type ID ( params ) · { statements }, ID
declstmt -> type ID ( params ) · { statements }, void
declstmt -> type ID ( params ) · { statements }, bool
declstmt -> type ID ( params ) · { statements }, int
declstmt -> type ID ( params ) · { statements }, long
declstmt -> type ID ( params ) · { statements }, float
declstmt -> type ID ( params ) · { statements }, double
declstmt -> type ID ( params ) · { statements }, char
declstmt -> type ID ( params ) · { statements }, string
declstmt -> type ID ( params ) · { statements }, var
declstmt -> type ID ( params ) · { statements }, own
declstmt -> type ID ( params ) · { statements }, bor
declstmt -> type ID ( params ) · { statements }, const
declstmt -> type ID ( params ) · { statements }, extern
declstmt -> type ID ( params ) · { statements }, class
declstmt -> type ID ( params ) · { statements }, (
declstmt -> type ID ( params ) · { statements }, this
declstmt -> type ID ( params ) · { statements }, new
declstmt -> type ID ( params ) · { statements }, LITBOOL
declstmt -> type ID ( params ) · { statements }, LITINT
declstmt -> type ID ( params ) · { statements }, LITLONG
declstmt -> type ID ( params ) · { statements }, LITFLOAT
declstmt -> type ID ( params ) · { statements }, LITDOUBLE
declstmt -> type ID ( params ) · { statements }, LITCHAR
declstmt -> type ID ( params ) · { statements }, LITSTRING
declstmt -> type ID ( params ) · { statements }, null
declstmt -> type ID ( params ) · { statements }, ++
declstmt -> type ID ( params ) · { statements }, --
declstmt -> type ID ( params ) · { statements }, break
declstmt -> type ID ( params ) · { statements }, return
declstmt -> type ID ( params ) · { statements }, delete
declstmt -> type ID ( params ) · { statements }, while
declstmt -> type ID ( params ) · { statements }, for
declstmt -> type ID ( params ) · { statements }, if
declstmt -> type ID ( params ) · { statements }, }
declstmt -> type ID ( params ) · { statements }, &&
declstmt -> type ID ( params ) · { statements }, ||
declstmt -> type ID ( params ) · { statements }, +
declstmt -> type ID ( params ) · { statements }, -
declstmt -> type ID ( params ) · { statements }, *
declstmt -> type ID ( params ) · { statements }, /
declstmt -> type ID ( params ) · { statements }, %
declstmt -> type ID ( params ) · { statements }, !
declstmt -> type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
242
I_1044_1215_1364_1585_1637_1721_1746
***Set***
declstmt -> type ID = expr ; ·, $
declstmt -> type ID = expr ; ·, namespace
declstmt -> type ID = expr ; ·, {
declstmt -> type ID = expr ; ·, ID
declstmt -> type ID = expr ; ·, void
declstmt -> type ID = expr ; ·, bool
declstmt -> type ID = expr ; ·, int
declstmt -> type ID = expr ; ·, long
declstmt -> type ID = expr ; ·, float
declstmt -> type ID = expr ; ·, double
declstmt -> type ID = expr ; ·, char
declstmt -> type ID = expr ; ·, string
declstmt -> type ID = expr ; ·, var
declstmt -> type ID = expr ; ·, own
declstmt -> type ID = expr ; ·, bor
declstmt -> type ID = expr ; ·, const
declstmt -> type ID = expr ; ·, extern
declstmt -> type ID = expr ; ·, class
declstmt -> type ID = expr ; ·, (
declstmt -> type ID = expr ; ·, this
declstmt -> type ID = expr ; ·, new
declstmt -> type ID = expr ; ·, LITBOOL
declstmt -> type ID = expr ; ·, LITINT
declstmt -> type ID = expr ; ·, LITLONG
declstmt -> type ID = expr ; ·, LITFLOAT
declstmt -> type ID = expr ; ·, LITDOUBLE
declstmt -> type ID = expr ; ·, LITCHAR
declstmt -> type ID = expr ; ·, LITSTRING
declstmt -> type ID = expr ; ·, null
declstmt -> type ID = expr ; ·, ++
declstmt -> type ID = expr ; ·, --
declstmt -> type ID = expr ; ·, break
declstmt -> type ID = expr ; ·, return
declstmt -> type ID = expr ; ·, delete
declstmt -> type ID = expr ; ·, while
declstmt -> type ID = expr ; ·, for
declstmt -> type ID = expr ; ·, if
declstmt -> type ID = expr ; ·, }
declstmt -> type ID = expr ; ·, &&
declstmt -> type ID = expr ; ·, ||
declstmt -> type ID = expr ; ·, +
declstmt -> type ID = expr ; ·, -
declstmt -> type ID = expr ; ·, *
declstmt -> type ID = expr ; ·, /
declstmt -> type ID = expr ; ·, %
declstmt -> type ID = expr ; ·, !
declstmt -> type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
243
I_1045_1398_1480_1664_1695_1760_1777
***Set***
declstmt -> extern type ID ( params ) · ;, $
declstmt -> extern type ID ( params ) · ;, namespace
declstmt -> extern type ID ( params ) · ;, {
declstmt -> extern type ID ( params ) · ;, ID
declstmt -> extern type ID ( params ) · ;, void
declstmt -> extern type ID ( params ) · ;, bool
declstmt -> extern type ID ( params ) · ;, int
declstmt -> extern type ID ( params ) · ;, long
declstmt -> extern type ID ( params ) · ;, float
declstmt -> extern type ID ( params ) · ;, double
declstmt -> extern type ID ( params ) · ;, char
declstmt -> extern type ID ( params ) · ;, string
declstmt -> extern type ID ( params ) · ;, var
declstmt -> extern type ID ( params ) · ;, own
declstmt -> extern type ID ( params ) · ;, bor
declstmt -> extern type ID ( params ) · ;, const
declstmt -> extern type ID ( params ) · ;, extern
declstmt -> extern type ID ( params ) · ;, class
declstmt -> extern type ID ( params ) · ;, (
declstmt -> extern type ID ( params ) · ;, this
declstmt -> extern type ID ( params ) · ;, new
declstmt -> extern type ID ( params ) · ;, LITBOOL
declstmt -> extern type ID ( params ) · ;, LITINT
declstmt -> extern type ID ( params ) · ;, LITLONG
declstmt -> extern type ID ( params ) · ;, LITFLOAT
declstmt -> extern type ID ( params ) · ;, LITDOUBLE
declstmt -> extern type ID ( params ) · ;, LITCHAR
declstmt -> extern type ID ( params ) · ;, LITSTRING
declstmt -> extern type ID ( params ) · ;, null
declstmt -> extern type ID ( params ) · ;, ++
declstmt -> extern type ID ( params ) · ;, --
declstmt -> extern type ID ( params ) · ;, break
declstmt -> extern type ID ( params ) · ;, return
declstmt -> extern type ID ( params ) · ;, delete
declstmt -> extern type ID ( params ) · ;, while
declstmt -> extern type ID ( params ) · ;, for
declstmt -> extern type ID ( params ) · ;, if
declstmt -> extern type ID ( params ) · ;, }
declstmt -> extern type ID ( params ) · ;, &&
declstmt -> extern type ID ( params ) · ;, ||
declstmt -> extern type ID ( params ) · ;, +
declstmt -> extern type ID ( params ) · ;, -
declstmt -> extern type ID ( params ) · ;, *
declstmt -> extern type ID ( params ) · ;, /
declstmt -> extern type ID ( params ) · ;, %
declstmt -> extern type ID ( params ) · ;, !
declstmt -> extern type ID ( params ) · ;, else
***EndSet***
***EndState***
***State***
244
I_1046_1399_1481_1665_1696_1761_1778
***Set***
declstmt -> const type ID = lit ; ·, $
declstmt -> const type ID = lit ; ·, namespace
declstmt -> const type ID = lit ; ·, {
declstmt -> const type ID = lit ; ·, ID
declstmt -> const type ID = lit ; ·, void
declstmt -> const type ID = lit ; ·, bool
declstmt -> const type ID = lit ; ·, int
declstmt -> const type ID = lit ; ·, long
declstmt -> const type ID = lit ; ·, float
declstmt -> const type ID = lit ; ·, double
declstmt -> const type ID = lit ; ·, char
declstmt -> const type ID = lit ; ·, string
declstmt -> const type ID = lit ; ·, var
declstmt -> const type ID = lit ; ·, own
declstmt -> const type ID = lit ; ·, bor
declstmt -> const type ID = lit ; ·, const
declstmt -> const type ID = lit ; ·, extern
declstmt -> const type ID = lit ; ·, class
declstmt -> const type ID = lit ; ·, (
declstmt -> const type ID = lit ; ·, this
declstmt -> const type ID = lit ; ·, new
declstmt -> const type ID = lit ; ·, LITBOOL
declstmt -> const type ID = lit ; ·, LITINT
declstmt -> const type ID = lit ; ·, LITLONG
declstmt -> const type ID = lit ; ·, LITFLOAT
declstmt -> const type ID = lit ; ·, LITDOUBLE
declstmt -> const type ID = lit ; ·, LITCHAR
declstmt -> const type ID = lit ; ·, LITSTRING
declstmt -> const type ID = lit ; ·, null
declstmt -> const type ID = lit ; ·, ++
declstmt -> const type ID = lit ; ·, --
declstmt -> const type ID = lit ; ·, break
declstmt -> const type ID = lit ; ·, return
declstmt -> const type ID = lit ; ·, delete
declstmt -> const type ID = lit ; ·, while
declstmt -> const type ID = lit ; ·, for
declstmt -> const type ID = lit ; ·, if
declstmt -> const type ID = lit ; ·, }
declstmt -> const type ID = lit ; ·, &&
declstmt -> const type ID = lit ; ·, ||
declstmt -> const type ID = lit ; ·, +
declstmt -> const type ID = lit ; ·, -
declstmt -> const type ID = lit ; ·, *
declstmt -> const type ID = lit ; ·, /
declstmt -> const type ID = lit ; ·, %
declstmt -> const type ID = lit ; ·, !
declstmt -> const type ID = lit ; ·, else
***EndSet***
***EndState***
***State***
245
I_1047_1400_1482_1666_1697_1762_1779
***Set***
declstmt -> class own ID inherit { declstatements · }, $
declstmt -> class own ID inherit { declstatements · }, namespace
declstmt -> class own ID inherit { declstatements · }, {
declstmt -> class own ID inherit { declstatements · }, ID
declstmt -> class own ID inherit { declstatements · }, void
declstmt -> class own ID inherit { declstatements · }, bool
declstmt -> class own ID inherit { declstatements · }, int
declstmt -> class own ID inherit { declstatements · }, long
declstmt -> class own ID inherit { declstatements · }, float
declstmt -> class own ID inherit { declstatements · }, double
declstmt -> class own ID inherit { declstatements · }, char
declstmt -> class own ID inherit { declstatements · }, string
declstmt -> class own ID inherit { declstatements · }, var
declstmt -> class own ID inherit { declstatements · }, own
declstmt -> class own ID inherit { declstatements · }, bor
declstmt -> class own ID inherit { declstatements · }, const
declstmt -> class own ID inherit { declstatements · }, extern
declstmt -> class own ID inherit { declstatements · }, class
declstmt -> class own ID inherit { declstatements · }, (
declstmt -> class own ID inherit { declstatements · }, this
declstmt -> class own ID inherit { declstatements · }, new
declstmt -> class own ID inherit { declstatements · }, LITBOOL
declstmt -> class own ID inherit { declstatements · }, LITINT
declstmt -> class own ID inherit { declstatements · }, LITLONG
declstmt -> class own ID inherit { declstatements · }, LITFLOAT
declstmt -> class own ID inherit { declstatements · }, LITDOUBLE
declstmt -> class own ID inherit { declstatements · }, LITCHAR
declstmt -> class own ID inherit { declstatements · }, LITSTRING
declstmt -> class own ID inherit { declstatements · }, null
declstmt -> class own ID inherit { declstatements · }, ++
declstmt -> class own ID inherit { declstatements · }, --
declstmt -> class own ID inherit { declstatements · }, break
declstmt -> class own ID inherit { declstatements · }, return
declstmt -> class own ID inherit { declstatements · }, delete
declstmt -> class own ID inherit { declstatements · }, while
declstmt -> class own ID inherit { declstatements · }, for
declstmt -> class own ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, long
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, double
declstatements -> declstatements · declstmt, char
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, var
declstatements -> declstatements · declstmt, own
declstatements -> declstatements · declstmt, bor
declstatements -> declstatements · declstmt, const
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class own ID inherit { declstatements · }, }
declstmt -> class own ID inherit { declstatements · }, &&
declstmt -> class own ID inherit { declstatements · }, ||
declstmt -> class own ID inherit { declstatements · }, +
declstmt -> class own ID inherit { declstatements · }, -
declstmt -> class own ID inherit { declstatements · }, *
declstmt -> class own ID inherit { declstatements · }, /
declstmt -> class own ID inherit { declstatements · }, %
declstmt -> class own ID inherit { declstatements · }, !
declstmt -> class own ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
246
I_1052_1401_1483_1667_1698_1763_1780
***Set***
declstmt -> class ID inherit { declstatements } ·, $
declstmt -> class ID inherit { declstatements } ·, namespace
declstmt -> class ID inherit { declstatements } ·, {
declstmt -> class ID inherit { declstatements } ·, ID
declstmt -> class ID inherit { declstatements } ·, void
declstmt -> class ID inherit { declstatements } ·, bool
declstmt -> class ID inherit { declstatements } ·, int
declstmt -> class ID inherit { declstatements } ·, long
declstmt -> class ID inherit { declstatements } ·, float
declstmt -> class ID inherit { declstatements } ·, double
declstmt -> class ID inherit { declstatements } ·, char
declstmt -> class ID inherit { declstatements } ·, string
declstmt -> class ID inherit { declstatements } ·, var
declstmt -> class ID inherit { declstatements } ·, own
declstmt -> class ID inherit { declstatements } ·, bor
declstmt -> class ID inherit { declstatements } ·, const
declstmt -> class ID inherit { declstatements } ·, extern
declstmt -> class ID inherit { declstatements } ·, class
declstmt -> class ID inherit { declstatements } ·, (
declstmt -> class ID inherit { declstatements } ·, this
declstmt -> class ID inherit { declstatements } ·, new
declstmt -> class ID inherit { declstatements } ·, LITBOOL
declstmt -> class ID inherit { declstatements } ·, LITINT
declstmt -> class ID inherit { declstatements } ·, LITLONG
declstmt -> class ID inherit { declstatements } ·, LITFLOAT
declstmt -> class ID inherit { declstatements } ·, LITDOUBLE
declstmt -> class ID inherit { declstatements } ·, LITCHAR
declstmt -> class ID inherit { declstatements } ·, LITSTRING
declstmt -> class ID inherit { declstatements } ·, null
declstmt -> class ID inherit { declstatements } ·, ++
declstmt -> class ID inherit { declstatements } ·, --
declstmt -> class ID inherit { declstatements } ·, break
declstmt -> class ID inherit { declstatements } ·, return
declstmt -> class ID inherit { declstatements } ·, delete
declstmt -> class ID inherit { declstatements } ·, while
declstmt -> class ID inherit { declstatements } ·, for
declstmt -> class ID inherit { declstatements } ·, if
declstmt -> class ID inherit { declstatements } ·, }
declstmt -> class ID inherit { declstatements } ·, &&
declstmt -> class ID inherit { declstatements } ·, ||
declstmt -> class ID inherit { declstatements } ·, +
declstmt -> class ID inherit { declstatements } ·, -
declstmt -> class ID inherit { declstatements } ·, *
declstmt -> class ID inherit { declstatements } ·, /
declstmt -> class ID inherit { declstatements } ·, %
declstmt -> class ID inherit { declstatements } ·, !
declstmt -> class ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
247
I_1053
***Set***
declstatements -> declstatements declstmt ·, }
declstatements -> declstatements declstmt ·, ID
declstatements -> declstatements declstmt ·, void
declstatements -> declstatements declstmt ·, bool
declstatements -> declstatements declstmt ·, int
declstatements -> declstatements declstmt ·, long
declstatements -> declstatements declstmt ·, float
declstatements -> declstatements declstmt ·, double
declstatements -> declstatements declstmt ·, char
declstatements -> declstatements declstmt ·, string
declstatements -> declstatements declstmt ·, var
declstatements -> declstatements declstmt ·, own
declstatements -> declstatements declstmt ·, bor
declstatements -> declstatements declstmt ·, const
declstatements -> declstatements declstmt ·, extern
declstatements -> declstatements declstmt ·, class
***EndSet***
***EndState***
***State***
248
I_1128_1402_1484_1699_1764_1781
***Set***
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, $
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, {
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, void
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, int
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, long
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, float
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, double
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, char
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, string
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, var
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, own
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bor
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, const
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, class
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, (
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, this
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, new
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, null
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, --
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, break
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, return
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, while
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, for
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, if
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, }
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, +
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, -
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, *
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, /
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, %
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, !
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, else
***EndSet***
***EndState***
***State***
249
I_1154_1416_1498_1700_1765_1782
***Set***
stmt -> if ( expr ) stmt elifclauselist · elseclause, $
stmt -> if ( expr ) stmt elifclauselist · elseclause, namespace
stmt -> if ( expr ) stmt elifclauselist · elseclause, {
stmt -> if ( expr ) stmt elifclauselist · elseclause, ID
stmt -> if ( expr ) stmt elifclauselist · elseclause, void
stmt -> if ( expr ) stmt elifclauselist · elseclause, bool
stmt -> if ( expr ) stmt elifclauselist · elseclause, int
stmt -> if ( expr ) stmt elifclauselist · elseclause, long
stmt -> if ( expr ) stmt elifclauselist · elseclause, float
stmt -> if ( expr ) stmt elifclauselist · elseclause, double
stmt -> if ( expr ) stmt elifclauselist · elseclause, char
stmt -> if ( expr ) stmt elifclauselist · elseclause, string
stmt -> if ( expr ) stmt elifclauselist · elseclause, var
stmt -> if ( expr ) stmt elifclauselist · elseclause, own
stmt -> if ( expr ) stmt elifclauselist · elseclause, bor
stmt -> if ( expr ) stmt elifclauselist · elseclause, const
stmt -> if ( expr ) stmt elifclauselist · elseclause, extern
stmt -> if ( expr ) stmt elifclauselist · elseclause, class
stmt -> if ( expr ) stmt elifclauselist · elseclause, (
stmt -> if ( expr ) stmt elifclauselist · elseclause, this
stmt -> if ( expr ) stmt elifclauselist · elseclause, new
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITBOOL
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITINT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITLONG
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITCHAR
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITSTRING
stmt -> if ( expr ) stmt elifclauselist · elseclause, null
stmt -> if ( expr ) stmt elifclauselist · elseclause, ++
stmt -> if ( expr ) stmt elifclauselist · elseclause, --
stmt -> if ( expr ) stmt elifclauselist · elseclause, break
stmt -> if ( expr ) stmt elifclauselist · elseclause, return
stmt -> if ( expr ) stmt elifclauselist · elseclause, delete
stmt -> if ( expr ) stmt elifclauselist · elseclause, while
stmt -> if ( expr ) stmt elifclauselist · elseclause, for
stmt -> if ( expr ) stmt elifclauselist · elseclause, if
elifclauselist -> elifclauselist · elifclause, else
elifclauselist -> elifclauselist · elifclause, $
elifclauselist -> elifclauselist · elifclause, namespace
elifclauselist -> elifclauselist · elifclause, {
elifclauselist -> elifclauselist · elifclause, ID
elifclauselist -> elifclauselist · elifclause, void
elifclauselist -> elifclauselist · elifclause, bool
elifclauselist -> elifclauselist · elifclause, int
elifclauselist -> elifclauselist · elifclause, long
elifclauselist -> elifclauselist · elifclause, float
elifclauselist -> elifclauselist · elifclause, double
elifclauselist -> elifclauselist · elifclause, char
elifclauselist -> elifclauselist · elifclause, string
elifclauselist -> elifclauselist · elifclause, var
elifclauselist -> elifclauselist · elifclause, own
elifclauselist -> elifclauselist · elifclause, bor
elifclauselist -> elifclauselist · elifclause, const
elifclauselist -> elifclauselist · elifclause, extern
elifclauselist -> elifclauselist · elifclause, class
elifclauselist -> elifclauselist · elifclause, (
elifclauselist -> elifclauselist · elifclause, this
elifclauselist -> elifclauselist · elifclause, new
elifclauselist -> elifclauselist · elifclause, LITBOOL
elifclauselist -> elifclauselist · elifclause, LITINT
elifclauselist -> elifclauselist · elifclause, LITLONG
elifclauselist -> elifclauselist · elifclause, LITFLOAT
elifclauselist -> elifclauselist · elifclause, LITDOUBLE
elifclauselist -> elifclauselist · elifclause, LITCHAR
elifclauselist -> elifclauselist · elifclause, LITSTRING
elifclauselist -> elifclauselist · elifclause, null
elifclauselist -> elifclauselist · elifclause, ++
elifclauselist -> elifclauselist · elifclause, --
elifclauselist -> elifclauselist · elifclause, break
elifclauselist -> elifclauselist · elifclause, return
elifclauselist -> elifclauselist · elifclause, delete
elifclauselist -> elifclauselist · elifclause, while
elifclauselist -> elifclauselist · elifclause, for
elifclauselist -> elifclauselist · elifclause, if
elseclause -> ·, $
elseclause -> · else stmt, $
elseclause -> ·, namespace
elseclause -> · else stmt, namespace
elseclause -> ·, {
elseclause -> · else stmt, {
elseclause -> ·, ID
elseclause -> · else stmt, ID
elseclause -> ·, void
elseclause -> · else stmt, void
elseclause -> ·, bool
elseclause -> · else stmt, bool
elseclause -> ·, int
elseclause -> · else stmt, int
elseclause -> ·, long
elseclause -> · else stmt, long
elseclause -> ·, float
elseclause -> · else stmt, float
elseclause -> ·, double
elseclause -> · else stmt, double
elseclause -> ·, char
elseclause -> · else stmt, char
elseclause -> ·, string
elseclause -> · else stmt, string
elseclause -> ·, var
elseclause -> · else stmt, var
elseclause -> ·, own
elseclause -> · else stmt, own
elseclause -> ·, bor
elseclause -> · else stmt, bor
elseclause -> ·, const
elseclause -> · else stmt, const
elseclause -> ·, extern
elseclause -> · else stmt, extern
elseclause -> ·, class
elseclause -> · else stmt, class
elseclause -> ·, (
elseclause -> · else stmt, (
elseclause -> ·, this
elseclause -> · else stmt, this
elseclause -> ·, new
elseclause -> · else stmt, new
elseclause -> ·, LITBOOL
elseclause -> · else stmt, LITBOOL
elseclause -> ·, LITINT
elseclause -> · else stmt, LITINT
elseclause -> ·, LITLONG
elseclause -> · else stmt, LITLONG
elseclause -> ·, LITFLOAT
elseclause -> · else stmt, LITFLOAT
elseclause -> ·, LITDOUBLE
elseclause -> · else stmt, LITDOUBLE
elseclause -> ·, LITCHAR
elseclause -> · else stmt, LITCHAR
elseclause -> ·, LITSTRING
elseclause -> · else stmt, LITSTRING
elseclause -> ·, null
elseclause -> · else stmt, null
elseclause -> ·, ++
elseclause -> · else stmt, ++
elseclause -> ·, --
elseclause -> · else stmt, --
elseclause -> ·, break
elseclause -> · else stmt, break
elseclause -> ·, return
elseclause -> · else stmt, return
elseclause -> ·, delete
elseclause -> · else stmt, delete
elseclause -> ·, while
elseclause -> · else stmt, while
elseclause -> ·, for
elseclause -> · else stmt, for
elseclause -> ·, if
elseclause -> · else stmt, if
elifclause -> · else if ( expr ) stmt, else
elifclause -> · else if ( expr ) stmt, $
elifclause -> · else if ( expr ) stmt, namespace
elifclause -> · else if ( expr ) stmt, {
elifclause -> · else if ( expr ) stmt, ID
elifclause -> · else if ( expr ) stmt, void
elifclause -> · else if ( expr ) stmt, bool
elifclause -> · else if ( expr ) stmt, int
elifclause -> · else if ( expr ) stmt, long
elifclause -> · else if ( expr ) stmt, float
elifclause -> · else if ( expr ) stmt, double
elifclause -> · else if ( expr ) stmt, char
elifclause -> · else if ( expr ) stmt, string
elifclause -> · else if ( expr ) stmt, var
elifclause -> · else if ( expr ) stmt, own
elifclause -> · else if ( expr ) stmt, bor
elifclause -> · else if ( expr ) stmt, const
elifclause -> · else if ( expr ) stmt, extern
elifclause -> · else if ( expr ) stmt, class
elifclause -> · else if ( expr ) stmt, (
elifclause -> · else if ( expr ) stmt, this
elifclause -> · else if ( expr ) stmt, new
elifclause -> · else if ( expr ) stmt, LITBOOL
elifclause -> · else if ( expr ) stmt, LITINT
elifclause -> · else if ( expr ) stmt, LITLONG
elifclause -> · else if ( expr ) stmt, LITFLOAT
elifclause -> · else if ( expr ) stmt, LITDOUBLE
elifclause -> · else if ( expr ) stmt, LITCHAR
elifclause -> · else if ( expr ) stmt, LITSTRING
elifclause -> · else if ( expr ) stmt, null
elifclause -> · else if ( expr ) stmt, ++
elifclause -> · else if ( expr ) stmt, --
elifclause -> · else if ( expr ) stmt, break
elifclause -> · else if ( expr ) stmt, return
elifclause -> · else if ( expr ) stmt, delete
elifclause -> · else if ( expr ) stmt, while
elifclause -> · else if ( expr ) stmt, for
elifclause -> · else if ( expr ) stmt, if
stmt -> if ( expr ) stmt elifclauselist · elseclause, }
elifclauselist -> elifclauselist · elifclause, }
elseclause -> ·, }
elseclause -> · else stmt, }
elifclause -> · else if ( expr ) stmt, }
stmt -> if ( expr ) stmt elifclauselist · elseclause, &&
stmt -> if ( expr ) stmt elifclauselist · elseclause, ||
stmt -> if ( expr ) stmt elifclauselist · elseclause, +
stmt -> if ( expr ) stmt elifclauselist · elseclause, -
stmt -> if ( expr ) stmt elifclauselist · elseclause, *
stmt -> if ( expr ) stmt elifclauselist · elseclause, /
stmt -> if ( expr ) stmt elifclauselist · elseclause, %
stmt -> if ( expr ) stmt elifclauselist · elseclause, !
elifclauselist -> elifclauselist · elifclause, &&
elifclauselist -> elifclauselist · elifclause, ||
elifclauselist -> elifclauselist · elifclause, +
elifclauselist -> elifclauselist · elifclause, -
elifclauselist -> elifclauselist · elifclause, *
elifclauselist -> elifclauselist · elifclause, /
elifclauselist -> elifclauselist · elifclause, %
elifclauselist -> elifclauselist · elifclause, !
elseclause -> ·, &&
elseclause -> · else stmt, &&
elseclause -> ·, ||
elseclause -> · else stmt, ||
elseclause -> ·, +
elseclause -> · else stmt, +
elseclause -> ·, -
elseclause -> · else stmt, -
elseclause -> ·, *
elseclause -> · else stmt, *
elseclause -> ·, /
elseclause -> · else stmt, /
elseclause -> ·, %
elseclause -> · else stmt, %
elseclause -> ·, !
elseclause -> · else stmt, !
elifclause -> · else if ( expr ) stmt, &&
elifclause -> · else if ( expr ) stmt, ||
elifclause -> · else if ( expr ) stmt, +
elifclause -> · else if ( expr ) stmt, -
elifclause -> · else if ( expr ) stmt, *
elifclause -> · else if ( expr ) stmt, /
elifclause -> · else if ( expr ) stmt, %
elifclause -> · else if ( expr ) stmt, !
stmt -> if ( expr ) stmt elifclauselist · elseclause, else
elseclause -> ·, else
elseclause -> · else stmt, else
***EndSet***
***EndState***
***State***
250
I_1274_1421_1508_1668_1702_1767_1784
***Set***
declstmt -> tmodf type operator ID ( params · ) { statements }, $
declstmt -> tmodf type operator ID ( params · ) { statements }, namespace
declstmt -> tmodf type operator ID ( params · ) { statements }, {
declstmt -> tmodf type operator ID ( params · ) { statements }, ID
declstmt -> tmodf type operator ID ( params · ) { statements }, void
declstmt -> tmodf type operator ID ( params · ) { statements }, bool
declstmt -> tmodf type operator ID ( params · ) { statements }, int
declstmt -> tmodf type operator ID ( params · ) { statements }, long
declstmt -> tmodf type operator ID ( params · ) { statements }, float
declstmt -> tmodf type operator ID ( params · ) { statements }, double
declstmt -> tmodf type operator ID ( params · ) { statements }, char
declstmt -> tmodf type operator ID ( params · ) { statements }, string
declstmt -> tmodf type operator ID ( params · ) { statements }, var
declstmt -> tmodf type operator ID ( params · ) { statements }, own
declstmt -> tmodf type operator ID ( params · ) { statements }, bor
declstmt -> tmodf type operator ID ( params · ) { statements }, const
declstmt -> tmodf type operator ID ( params · ) { statements }, extern
declstmt -> tmodf type operator ID ( params · ) { statements }, class
declstmt -> tmodf type operator ID ( params · ) { statements }, (
declstmt -> tmodf type operator ID ( params · ) { statements }, this
declstmt -> tmodf type operator ID ( params · ) { statements }, new
declstmt -> tmodf type operator ID ( params · ) { statements }, LITBOOL
declstmt -> tmodf type operator ID ( params · ) { statements }, LITINT
declstmt -> tmodf type operator ID ( params · ) { statements }, LITLONG
declstmt -> tmodf type operator ID ( params · ) { statements }, LITFLOAT
declstmt -> tmodf type operator ID ( params · ) { statements }, LITDOUBLE
declstmt -> tmodf type operator ID ( params · ) { statements }, LITCHAR
declstmt -> tmodf type operator ID ( params · ) { statements }, LITSTRING
declstmt -> tmodf type operator ID ( params · ) { statements }, null
declstmt -> tmodf type operator ID ( params · ) { statements }, ++
declstmt -> tmodf type operator ID ( params · ) { statements }, --
declstmt -> tmodf type operator ID ( params · ) { statements }, break
declstmt -> tmodf type operator ID ( params · ) { statements }, return
declstmt -> tmodf type operator ID ( params · ) { statements }, delete
declstmt -> tmodf type operator ID ( params · ) { statements }, while
declstmt -> tmodf type operator ID ( params · ) { statements }, for
declstmt -> tmodf type operator ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , tmodf type ID, )
params -> params · , type ID, ,
params -> params · , tmodf type ID, ,
declstmt -> tmodf type operator ID ( params · ) { statements }, }
declstmt -> tmodf type operator ID ( params · ) { statements }, &&
declstmt -> tmodf type operator ID ( params · ) { statements }, ||
declstmt -> tmodf type operator ID ( params · ) { statements }, +
declstmt -> tmodf type operator ID ( params · ) { statements }, -
declstmt -> tmodf type operator ID ( params · ) { statements }, *
declstmt -> tmodf type operator ID ( params · ) { statements }, /
declstmt -> tmodf type operator ID ( params · ) { statements }, %
declstmt -> tmodf type operator ID ( params · ) { statements }, !
declstmt -> tmodf type operator ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
251
I_1275_1422_1509_1669_1703_1768_1785
***Set***
declstmt -> tmodf type ID ( params ) · { statements }, $
declstmt -> tmodf type ID ( params ) · { statements }, namespace
declstmt -> tmodf type ID ( params ) · { statements }, {
declstmt -> tmodf type ID ( params ) · { statements }, ID
declstmt -> tmodf type ID ( params ) · { statements }, void
declstmt -> tmodf type ID ( params ) · { statements }, bool
declstmt -> tmodf type ID ( params ) · { statements }, int
declstmt -> tmodf type ID ( params ) · { statements }, long
declstmt -> tmodf type ID ( params ) · { statements }, float
declstmt -> tmodf type ID ( params ) · { statements }, double
declstmt -> tmodf type ID ( params ) · { statements }, char
declstmt -> tmodf type ID ( params ) · { statements }, string
declstmt -> tmodf type ID ( params ) · { statements }, var
declstmt -> tmodf type ID ( params ) · { statements }, own
declstmt -> tmodf type ID ( params ) · { statements }, bor
declstmt -> tmodf type ID ( params ) · { statements }, const
declstmt -> tmodf type ID ( params ) · { statements }, extern
declstmt -> tmodf type ID ( params ) · { statements }, class
declstmt -> tmodf type ID ( params ) · { statements }, (
declstmt -> tmodf type ID ( params ) · { statements }, this
declstmt -> tmodf type ID ( params ) · { statements }, new
declstmt -> tmodf type ID ( params ) · { statements }, LITBOOL
declstmt -> tmodf type ID ( params ) · { statements }, LITINT
declstmt -> tmodf type ID ( params ) · { statements }, LITLONG
declstmt -> tmodf type ID ( params ) · { statements }, LITFLOAT
declstmt -> tmodf type ID ( params ) · { statements }, LITDOUBLE
declstmt -> tmodf type ID ( params ) · { statements }, LITCHAR
declstmt -> tmodf type ID ( params ) · { statements }, LITSTRING
declstmt -> tmodf type ID ( params ) · { statements }, null
declstmt -> tmodf type ID ( params ) · { statements }, ++
declstmt -> tmodf type ID ( params ) · { statements }, --
declstmt -> tmodf type ID ( params ) · { statements }, break
declstmt -> tmodf type ID ( params ) · { statements }, return
declstmt -> tmodf type ID ( params ) · { statements }, delete
declstmt -> tmodf type ID ( params ) · { statements }, while
declstmt -> tmodf type ID ( params ) · { statements }, for
declstmt -> tmodf type ID ( params ) · { statements }, if
declstmt -> tmodf type ID ( params ) · { statements }, }
declstmt -> tmodf type ID ( params ) · { statements }, &&
declstmt -> tmodf type ID ( params ) · { statements }, ||
declstmt -> tmodf type ID ( params ) · { statements }, +
declstmt -> tmodf type ID ( params ) · { statements }, -
declstmt -> tmodf type ID ( params ) · { statements }, *
declstmt -> tmodf type ID ( params ) · { statements }, /
declstmt -> tmodf type ID ( params ) · { statements }, %
declstmt -> tmodf type ID ( params ) · { statements }, !
declstmt -> tmodf type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
252
I_1276_1423_1510_1670_1704_1769_1786
***Set***
declstmt -> tmodf type ID = expr ; ·, $
declstmt -> tmodf type ID = expr ; ·, namespace
declstmt -> tmodf type ID = expr ; ·, {
declstmt -> tmodf type ID = expr ; ·, ID
declstmt -> tmodf type ID = expr ; ·, void
declstmt -> tmodf type ID = expr ; ·, bool
declstmt -> tmodf type ID = expr ; ·, int
declstmt -> tmodf type ID = expr ; ·, long
declstmt -> tmodf type ID = expr ; ·, float
declstmt -> tmodf type ID = expr ; ·, double
declstmt -> tmodf type ID = expr ; ·, char
declstmt -> tmodf type ID = expr ; ·, string
declstmt -> tmodf type ID = expr ; ·, var
declstmt -> tmodf type ID = expr ; ·, own
declstmt -> tmodf type ID = expr ; ·, bor
declstmt -> tmodf type ID = expr ; ·, const
declstmt -> tmodf type ID = expr ; ·, extern
declstmt -> tmodf type ID = expr ; ·, class
declstmt -> tmodf type ID = expr ; ·, (
declstmt -> tmodf type ID = expr ; ·, this
declstmt -> tmodf type ID = expr ; ·, new
declstmt -> tmodf type ID = expr ; ·, LITBOOL
declstmt -> tmodf type ID = expr ; ·, LITINT
declstmt -> tmodf type ID = expr ; ·, LITLONG
declstmt -> tmodf type ID = expr ; ·, LITFLOAT
declstmt -> tmodf type ID = expr ; ·, LITDOUBLE
declstmt -> tmodf type ID = expr ; ·, LITCHAR
declstmt -> tmodf type ID = expr ; ·, LITSTRING
declstmt -> tmodf type ID = expr ; ·, null
declstmt -> tmodf type ID = expr ; ·, ++
declstmt -> tmodf type ID = expr ; ·, --
declstmt -> tmodf type ID = expr ; ·, break
declstmt -> tmodf type ID = expr ; ·, return
declstmt -> tmodf type ID = expr ; ·, delete
declstmt -> tmodf type ID = expr ; ·, while
declstmt -> tmodf type ID = expr ; ·, for
declstmt -> tmodf type ID = expr ; ·, if
declstmt -> tmodf type ID = expr ; ·, }
declstmt -> tmodf type ID = expr ; ·, &&
declstmt -> tmodf type ID = expr ; ·, ||
declstmt -> tmodf type ID = expr ; ·, +
declstmt -> tmodf type ID = expr ; ·, -
declstmt -> tmodf type ID = expr ; ·, *
declstmt -> tmodf type ID = expr ; ·, /
declstmt -> tmodf type ID = expr ; ·, %
declstmt -> tmodf type ID = expr ; ·, !
declstmt -> tmodf type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
253
I_1277_1424_1511_1671_1705_1770_1787
***Set***
declstmt -> type operator ID ( params ) · { statements }, $
declstmt -> type operator ID ( params ) · { statements }, namespace
declstmt -> type operator ID ( params ) · { statements }, {
declstmt -> type operator ID ( params ) · { statements }, ID
declstmt -> type operator ID ( params ) · { statements }, void
declstmt -> type operator ID ( params ) · { statements }, bool
declstmt -> type operator ID ( params ) · { statements }, int
declstmt -> type operator ID ( params ) · { statements }, long
declstmt -> type operator ID ( params ) · { statements }, float
declstmt -> type operator ID ( params ) · { statements }, double
declstmt -> type operator ID ( params ) · { statements }, char
declstmt -> type operator ID ( params ) · { statements }, string
declstmt -> type operator ID ( params ) · { statements }, var
declstmt -> type operator ID ( params ) · { statements }, own
declstmt -> type operator ID ( params ) · { statements }, bor
declstmt -> type operator ID ( params ) · { statements }, const
declstmt -> type operator ID ( params ) · { statements }, extern
declstmt -> type operator ID ( params ) · { statements }, class
declstmt -> type operator ID ( params ) · { statements }, (
declstmt -> type operator ID ( params ) · { statements }, this
declstmt -> type operator ID ( params ) · { statements }, new
declstmt -> type operator ID ( params ) · { statements }, LITBOOL
declstmt -> type operator ID ( params ) · { statements }, LITINT
declstmt -> type operator ID ( params ) · { statements }, LITLONG
declstmt -> type operator ID ( params ) · { statements }, LITFLOAT
declstmt -> type operator ID ( params ) · { statements }, LITDOUBLE
declstmt -> type operator ID ( params ) · { statements }, LITCHAR
declstmt -> type operator ID ( params ) · { statements }, LITSTRING
declstmt -> type operator ID ( params ) · { statements }, null
declstmt -> type operator ID ( params ) · { statements }, ++
declstmt -> type operator ID ( params ) · { statements }, --
declstmt -> type operator ID ( params ) · { statements }, break
declstmt -> type operator ID ( params ) · { statements }, return
declstmt -> type operator ID ( params ) · { statements }, delete
declstmt -> type operator ID ( params ) · { statements }, while
declstmt -> type operator ID ( params ) · { statements }, for
declstmt -> type operator ID ( params ) · { statements }, if
declstmt -> type operator ID ( params ) · { statements }, }
declstmt -> type operator ID ( params ) · { statements }, &&
declstmt -> type operator ID ( params ) · { statements }, ||
declstmt -> type operator ID ( params ) · { statements }, +
declstmt -> type operator ID ( params ) · { statements }, -
declstmt -> type operator ID ( params ) · { statements }, *
declstmt -> type operator ID ( params ) · { statements }, /
declstmt -> type operator ID ( params ) · { statements }, %
declstmt -> type operator ID ( params ) · { statements }, !
declstmt -> type operator ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
254
I_1278
***Set***
params -> tmodf type ID ·, )
params -> tmodf type ID ·, ,
***EndSet***
***EndState***
***State***
255
I_1279
***Set***
params -> params , tmodf · type ID, )
params -> params , tmodf · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
256
I_1280_1456_1457_1574
***Set***
params -> params , type · ID, )
params -> params , type · ID, ,
params -> params , tmodf type · ID, )
params -> params , tmodf type · ID, ,
params -> params , type ID ·, )
params -> params , type ID ·, ,
params -> params , tmodf type ID ·, )
params -> params , tmodf type ID ·, ,
***EndSet***
***EndState***
***State***
257
I_1281_1425_1512_1672_1706_1771_1788
***Set***
declstmt -> type ID ( params ) { · statements }, $
declstmt -> type ID ( params ) { · statements }, namespace
declstmt -> type ID ( params ) { · statements }, {
declstmt -> type ID ( params ) { · statements }, ID
declstmt -> type ID ( params ) { · statements }, void
declstmt -> type ID ( params ) { · statements }, bool
declstmt -> type ID ( params ) { · statements }, int
declstmt -> type ID ( params ) { · statements }, long
declstmt -> type ID ( params ) { · statements }, float
declstmt -> type ID ( params ) { · statements }, double
declstmt -> type ID ( params ) { · statements }, char
declstmt -> type ID ( params ) { · statements }, string
declstmt -> type ID ( params ) { · statements }, var
declstmt -> type ID ( params ) { · statements }, own
declstmt -> type ID ( params ) { · statements }, bor
declstmt -> type ID ( params ) { · statements }, const
declstmt -> type ID ( params ) { · statements }, extern
declstmt -> type ID ( params ) { · statements }, class
declstmt -> type ID ( params ) { · statements }, (
declstmt -> type ID ( params ) { · statements }, this
declstmt -> type ID ( params ) { · statements }, new
declstmt -> type ID ( params ) { · statements }, LITBOOL
declstmt -> type ID ( params ) { · statements }, LITINT
declstmt -> type ID ( params ) { · statements }, LITLONG
declstmt -> type ID ( params ) { · statements }, LITFLOAT
declstmt -> type ID ( params ) { · statements }, LITDOUBLE
declstmt -> type ID ( params ) { · statements }, LITCHAR
declstmt -> type ID ( params ) { · statements }, LITSTRING
declstmt -> type ID ( params ) { · statements }, null
declstmt -> type ID ( params ) { · statements }, ++
declstmt -> type ID ( params ) { · statements }, --
declstmt -> type ID ( params ) { · statements }, break
declstmt -> type ID ( params ) { · statements }, return
declstmt -> type ID ( params ) { · statements }, delete
declstmt -> type ID ( params ) { · statements }, while
declstmt -> type ID ( params ) { · statements }, for
declstmt -> type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { · statements }, }
declstmt -> type ID ( params ) { · statements }, &&
declstmt -> type ID ( params ) { · statements }, ||
declstmt -> type ID ( params ) { · statements }, +
declstmt -> type ID ( params ) { · statements }, -
declstmt -> type ID ( params ) { · statements }, *
declstmt -> type ID ( params ) { · statements }, /
declstmt -> type ID ( params ) { · statements }, %
declstmt -> type ID ( params ) { · statements }, !
declstmt -> type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
258
I_1282_1531_1593_1726_1750_1798_1811
***Set***
declstmt -> extern type ID ( params ) ; ·, $
declstmt -> extern type ID ( params ) ; ·, namespace
declstmt -> extern type ID ( params ) ; ·, {
declstmt -> extern type ID ( params ) ; ·, ID
declstmt -> extern type ID ( params ) ; ·, void
declstmt -> extern type ID ( params ) ; ·, bool
declstmt -> extern type ID ( params ) ; ·, int
declstmt -> extern type ID ( params ) ; ·, long
declstmt -> extern type ID ( params ) ; ·, float
declstmt -> extern type ID ( params ) ; ·, double
declstmt -> extern type ID ( params ) ; ·, char
declstmt -> extern type ID ( params ) ; ·, string
declstmt -> extern type ID ( params ) ; ·, var
declstmt -> extern type ID ( params ) ; ·, own
declstmt -> extern type ID ( params ) ; ·, bor
declstmt -> extern type ID ( params ) ; ·, const
declstmt -> extern type ID ( params ) ; ·, extern
declstmt -> extern type ID ( params ) ; ·, class
declstmt -> extern type ID ( params ) ; ·, (
declstmt -> extern type ID ( params ) ; ·, this
declstmt -> extern type ID ( params ) ; ·, new
declstmt -> extern type ID ( params ) ; ·, LITBOOL
declstmt -> extern type ID ( params ) ; ·, LITINT
declstmt -> extern type ID ( params ) ; ·, LITLONG
declstmt -> extern type ID ( params ) ; ·, LITFLOAT
declstmt -> extern type ID ( params ) ; ·, LITDOUBLE
declstmt -> extern type ID ( params ) ; ·, LITCHAR
declstmt -> extern type ID ( params ) ; ·, LITSTRING
declstmt -> extern type ID ( params ) ; ·, null
declstmt -> extern type ID ( params ) ; ·, ++
declstmt -> extern type ID ( params ) ; ·, --
declstmt -> extern type ID ( params ) ; ·, break
declstmt -> extern type ID ( params ) ; ·, return
declstmt -> extern type ID ( params ) ; ·, delete
declstmt -> extern type ID ( params ) ; ·, while
declstmt -> extern type ID ( params ) ; ·, for
declstmt -> extern type ID ( params ) ; ·, if
declstmt -> extern type ID ( params ) ; ·, }
declstmt -> extern type ID ( params ) ; ·, &&
declstmt -> extern type ID ( params ) ; ·, ||
declstmt -> extern type ID ( params ) ; ·, +
declstmt -> extern type ID ( params ) ; ·, -
declstmt -> extern type ID ( params ) ; ·, *
declstmt -> extern type ID ( params ) ; ·, /
declstmt -> extern type ID ( params ) ; ·, %
declstmt -> extern type ID ( params ) ; ·, !
declstmt -> extern type ID ( params ) ; ·, else
***EndSet***
***EndState***
***State***
259
I_1283_1532_1594_1727_1751_1799_1812
***Set***
declstmt -> class own ID inherit { declstatements } ·, $
declstmt -> class own ID inherit { declstatements } ·, namespace
declstmt -> class own ID inherit { declstatements } ·, {
declstmt -> class own ID inherit { declstatements } ·, ID
declstmt -> class own ID inherit { declstatements } ·, void
declstmt -> class own ID inherit { declstatements } ·, bool
declstmt -> class own ID inherit { declstatements } ·, int
declstmt -> class own ID inherit { declstatements } ·, long
declstmt -> class own ID inherit { declstatements } ·, float
declstmt -> class own ID inherit { declstatements } ·, double
declstmt -> class own ID inherit { declstatements } ·, char
declstmt -> class own ID inherit { declstatements } ·, string
declstmt -> class own ID inherit { declstatements } ·, var
declstmt -> class own ID inherit { declstatements } ·, own
declstmt -> class own ID inherit { declstatements } ·, bor
declstmt -> class own ID inherit { declstatements } ·, const
declstmt -> class own ID inherit { declstatements } ·, extern
declstmt -> class own ID inherit { declstatements } ·, class
declstmt -> class own ID inherit { declstatements } ·, (
declstmt -> class own ID inherit { declstatements } ·, this
declstmt -> class own ID inherit { declstatements } ·, new
declstmt -> class own ID inherit { declstatements } ·, LITBOOL
declstmt -> class own ID inherit { declstatements } ·, LITINT
declstmt -> class own ID inherit { declstatements } ·, LITLONG
declstmt -> class own ID inherit { declstatements } ·, LITFLOAT
declstmt -> class own ID inherit { declstatements } ·, LITDOUBLE
declstmt -> class own ID inherit { declstatements } ·, LITCHAR
declstmt -> class own ID inherit { declstatements } ·, LITSTRING
declstmt -> class own ID inherit { declstatements } ·, null
declstmt -> class own ID inherit { declstatements } ·, ++
declstmt -> class own ID inherit { declstatements } ·, --
declstmt -> class own ID inherit { declstatements } ·, break
declstmt -> class own ID inherit { declstatements } ·, return
declstmt -> class own ID inherit { declstatements } ·, delete
declstmt -> class own ID inherit { declstatements } ·, while
declstmt -> class own ID inherit { declstatements } ·, for
declstmt -> class own ID inherit { declstatements } ·, if
declstmt -> class own ID inherit { declstatements } ·, }
declstmt -> class own ID inherit { declstatements } ·, &&
declstmt -> class own ID inherit { declstatements } ·, ||
declstmt -> class own ID inherit { declstatements } ·, +
declstmt -> class own ID inherit { declstatements } ·, -
declstmt -> class own ID inherit { declstatements } ·, *
declstmt -> class own ID inherit { declstatements } ·, /
declstmt -> class own ID inherit { declstatements } ·, %
declstmt -> class own ID inherit { declstatements } ·, !
declstmt -> class own ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
260
I_1357_1533_1595_1752_1800_1813
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, $
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, {
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, void
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, int
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, long
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, float
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, double
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, char
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, string
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, var
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, own
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bor
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, const
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, class
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, (
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, this
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, new
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, null
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, --
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, break
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, return
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, while
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, for
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, +
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, -
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, *
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, /
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, %
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · tmodf type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · tmodf type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · tmodf type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · class own ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
261
I_1376_1545_1607_1753_1801_1814
***Set***
elseclause -> else · stmt, $
elseclause -> else · stmt, namespace
elseclause -> else · stmt, {
elseclause -> else · stmt, ID
elseclause -> else · stmt, void
elseclause -> else · stmt, bool
elseclause -> else · stmt, int
elseclause -> else · stmt, long
elseclause -> else · stmt, float
elseclause -> else · stmt, double
elseclause -> else · stmt, char
elseclause -> else · stmt, string
elseclause -> else · stmt, var
elseclause -> else · stmt, own
elseclause -> else · stmt, bor
elseclause -> else · stmt, const
elseclause -> else · stmt, extern
elseclause -> else · stmt, class
elseclause -> else · stmt, (
elseclause -> else · stmt, this
elseclause -> else · stmt, new
elseclause -> else · stmt, LITBOOL
elseclause -> else · stmt, LITINT
elseclause -> else · stmt, LITLONG
elseclause -> else · stmt, LITFLOAT
elseclause -> else · stmt, LITDOUBLE
elseclause -> else · stmt, LITCHAR
elseclause -> else · stmt, LITSTRING
elseclause -> else · stmt, null
elseclause -> else · stmt, ++
elseclause -> else · stmt, --
elseclause -> else · stmt, break
elseclause -> else · stmt, return
elseclause -> else · stmt, delete
elseclause -> else · stmt, while
elseclause -> else · stmt, for
elseclause -> else · stmt, if
elifclause -> else · if ( expr ) stmt, else
elifclause -> else · if ( expr ) stmt, $
elifclause -> else · if ( expr ) stmt, namespace
elifclause -> else · if ( expr ) stmt, {
elifclause -> else · if ( expr ) stmt, ID
elifclause -> else · if ( expr ) stmt, void
elifclause -> else · if ( expr ) stmt, bool
elifclause -> else · if ( expr ) stmt, int
elifclause -> else · if ( expr ) stmt, long
elifclause -> else · if ( expr ) stmt, float
elifclause -> else · if ( expr ) stmt, double
elifclause -> else · if ( expr ) stmt, char
elifclause -> else · if ( expr ) stmt, string
elifclause -> else · if ( expr ) stmt, var
elifclause -> else · if ( expr ) stmt, own
elifclause -> else · if ( expr ) stmt, bor
elifclause -> else · if ( expr ) stmt, const
elifclause -> else · if ( expr ) stmt, extern
elifclause -> else · if ( expr ) stmt, class
elifclause -> else · if ( expr ) stmt, (
elifclause -> else · if ( expr ) stmt, this
elifclause -> else · if ( expr ) stmt, new
elifclause -> else · if ( expr ) stmt, LITBOOL
elifclause -> else · if ( expr ) stmt, LITINT
elifclause -> else · if ( expr ) stmt, LITLONG
elifclause -> else · if ( expr ) stmt, LITFLOAT
elifclause -> else · if ( expr ) stmt, LITDOUBLE
elifclause -> else · if ( expr ) stmt, LITCHAR
elifclause -> else · if ( expr ) stmt, LITSTRING
elifclause -> else · if ( expr ) stmt, null
elifclause -> else · if ( expr ) stmt, ++
elifclause -> else · if ( expr ) stmt, --
elifclause -> else · if ( expr ) stmt, break
elifclause -> else · if ( expr ) stmt, return
elifclause -> else · if ( expr ) stmt, delete
elifclause -> else · if ( expr ) stmt, while
elifclause -> else · if ( expr ) stmt, for
elifclause -> else · if ( expr ) stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elseclause -> else · stmt, }
elifclause -> else · if ( expr ) stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
elseclause -> else · stmt, &&
elseclause -> else · stmt, ||
elseclause -> else · stmt, +
elseclause -> else · stmt, -
elseclause -> else · stmt, *
elseclause -> else · stmt, /
elseclause -> else · stmt, %
elseclause -> else · stmt, !
elifclause -> else · if ( expr ) stmt, &&
elifclause -> else · if ( expr ) stmt, ||
elifclause -> else · if ( expr ) stmt, +
elifclause -> else · if ( expr ) stmt, -
elifclause -> else · if ( expr ) stmt, *
elifclause -> else · if ( expr ) stmt, /
elifclause -> else · if ( expr ) stmt, %
elifclause -> else · if ( expr ) stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
elseclause -> else · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · tmodf type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · tmodf type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · tmodf type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · class own ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
262
I_1377_1546_1608
***Set***
elifclauselist -> elifclauselist elifclause ·, else
elifclauselist -> elifclauselist elifclause ·, $
elifclauselist -> elifclauselist elifclause ·, namespace
elifclauselist -> elifclauselist elifclause ·, {
elifclauselist -> elifclauselist elifclause ·, ID
elifclauselist -> elifclauselist elifclause ·, void
elifclauselist -> elifclauselist elifclause ·, bool
elifclauselist -> elifclauselist elifclause ·, int
elifclauselist -> elifclauselist elifclause ·, long
elifclauselist -> elifclauselist elifclause ·, float
elifclauselist -> elifclauselist elifclause ·, double
elifclauselist -> elifclauselist elifclause ·, char
elifclauselist -> elifclauselist elifclause ·, string
elifclauselist -> elifclauselist elifclause ·, var
elifclauselist -> elifclauselist elifclause ·, own
elifclauselist -> elifclauselist elifclause ·, bor
elifclauselist -> elifclauselist elifclause ·, const
elifclauselist -> elifclauselist elifclause ·, extern
elifclauselist -> elifclauselist elifclause ·, class
elifclauselist -> elifclauselist elifclause ·, (
elifclauselist -> elifclauselist elifclause ·, this
elifclauselist -> elifclauselist elifclause ·, new
elifclauselist -> elifclauselist elifclause ·, LITBOOL
elifclauselist -> elifclauselist elifclause ·, LITINT
elifclauselist -> elifclauselist elifclause ·, LITLONG
elifclauselist -> elifclauselist elifclause ·, LITFLOAT
elifclauselist -> elifclauselist elifclause ·, LITDOUBLE
elifclauselist -> elifclauselist elifclause ·, LITCHAR
elifclauselist -> elifclauselist elifclause ·, LITSTRING
elifclauselist -> elifclauselist elifclause ·, null
elifclauselist -> elifclauselist elifclause ·, ++
elifclauselist -> elifclauselist elifclause ·, --
elifclauselist -> elifclauselist elifclause ·, break
elifclauselist -> elifclauselist elifclause ·, return
elifclauselist -> elifclauselist elifclause ·, delete
elifclauselist -> elifclauselist elifclause ·, while
elifclauselist -> elifclauselist elifclause ·, for
elifclauselist -> elifclauselist elifclause ·, if
elifclauselist -> elifclauselist elifclause ·, }
elifclauselist -> elifclauselist elifclause ·, &&
elifclauselist -> elifclauselist elifclause ·, ||
elifclauselist -> elifclauselist elifclause ·, +
elifclauselist -> elifclauselist elifclause ·, -
elifclauselist -> elifclauselist elifclause ·, *
elifclauselist -> elifclauselist elifclause ·, /
elifclauselist -> elifclauselist elifclause ·, %
elifclauselist -> elifclauselist elifclause ·, !
***EndSet***
***EndState***
***State***
263
I_1378_1547_1609_1754_1802_1815
***Set***
stmt -> if ( expr ) stmt elifclauselist elseclause ·, $
stmt -> if ( expr ) stmt elifclauselist elseclause ·, namespace
stmt -> if ( expr ) stmt elifclauselist elseclause ·, {
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ID
stmt -> if ( expr ) stmt elifclauselist elseclause ·, void
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bool
stmt -> if ( expr ) stmt elifclauselist elseclause ·, int
stmt -> if ( expr ) stmt elifclauselist elseclause ·, long
stmt -> if ( expr ) stmt elifclauselist elseclause ·, float
stmt -> if ( expr ) stmt elifclauselist elseclause ·, double
stmt -> if ( expr ) stmt elifclauselist elseclause ·, char
stmt -> if ( expr ) stmt elifclauselist elseclause ·, string
stmt -> if ( expr ) stmt elifclauselist elseclause ·, var
stmt -> if ( expr ) stmt elifclauselist elseclause ·, own
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bor
stmt -> if ( expr ) stmt elifclauselist elseclause ·, const
stmt -> if ( expr ) stmt elifclauselist elseclause ·, extern
stmt -> if ( expr ) stmt elifclauselist elseclause ·, class
stmt -> if ( expr ) stmt elifclauselist elseclause ·, (
stmt -> if ( expr ) stmt elifclauselist elseclause ·, this
stmt -> if ( expr ) stmt elifclauselist elseclause ·, new
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITBOOL
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITINT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITLONG
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITCHAR
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITSTRING
stmt -> if ( expr ) stmt elifclauselist elseclause ·, null
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ++
stmt -> if ( expr ) stmt elifclauselist elseclause ·, --
stmt -> if ( expr ) stmt elifclauselist elseclause ·, break
stmt -> if ( expr ) stmt elifclauselist elseclause ·, return
stmt -> if ( expr ) stmt elifclauselist elseclause ·, delete
stmt -> if ( expr ) stmt elifclauselist elseclause ·, while
stmt -> if ( expr ) stmt elifclauselist elseclause ·, for
stmt -> if ( expr ) stmt elifclauselist elseclause ·, if
stmt -> if ( expr ) stmt elifclauselist elseclause ·, }
stmt -> if ( expr ) stmt elifclauselist elseclause ·, &&
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ||
stmt -> if ( expr ) stmt elifclauselist elseclause ·, +
stmt -> if ( expr ) stmt elifclauselist elseclause ·, -
stmt -> if ( expr ) stmt elifclauselist elseclause ·, *
stmt -> if ( expr ) stmt elifclauselist elseclause ·, /
stmt -> if ( expr ) stmt elifclauselist elseclause ·, %
stmt -> if ( expr ) stmt elifclauselist elseclause ·, !
stmt -> if ( expr ) stmt elifclauselist elseclause ·, else
***EndSet***
***EndState***
***State***
264
I_1453_1553_1619_1728_1756_1804_1817
***Set***
declstmt -> tmodf type operator ID ( params ) · { statements }, $
declstmt -> tmodf type operator ID ( params ) · { statements }, namespace
declstmt -> tmodf type operator ID ( params ) · { statements }, {
declstmt -> tmodf type operator ID ( params ) · { statements }, ID
declstmt -> tmodf type operator ID ( params ) · { statements }, void
declstmt -> tmodf type operator ID ( params ) · { statements }, bool
declstmt -> tmodf type operator ID ( params ) · { statements }, int
declstmt -> tmodf type operator ID ( params ) · { statements }, long
declstmt -> tmodf type operator ID ( params ) · { statements }, float
declstmt -> tmodf type operator ID ( params ) · { statements }, double
declstmt -> tmodf type operator ID ( params ) · { statements }, char
declstmt -> tmodf type operator ID ( params ) · { statements }, string
declstmt -> tmodf type operator ID ( params ) · { statements }, var
declstmt -> tmodf type operator ID ( params ) · { statements }, own
declstmt -> tmodf type operator ID ( params ) · { statements }, bor
declstmt -> tmodf type operator ID ( params ) · { statements }, const
declstmt -> tmodf type operator ID ( params ) · { statements }, extern
declstmt -> tmodf type operator ID ( params ) · { statements }, class
declstmt -> tmodf type operator ID ( params ) · { statements }, (
declstmt -> tmodf type operator ID ( params ) · { statements }, this
declstmt -> tmodf type operator ID ( params ) · { statements }, new
declstmt -> tmodf type operator ID ( params ) · { statements }, LITBOOL
declstmt -> tmodf type operator ID ( params ) · { statements }, LITINT
declstmt -> tmodf type operator ID ( params ) · { statements }, LITLONG
declstmt -> tmodf type operator ID ( params ) · { statements }, LITFLOAT
declstmt -> tmodf type operator ID ( params ) · { statements }, LITDOUBLE
declstmt -> tmodf type operator ID ( params ) · { statements }, LITCHAR
declstmt -> tmodf type operator ID ( params ) · { statements }, LITSTRING
declstmt -> tmodf type operator ID ( params ) · { statements }, null
declstmt -> tmodf type operator ID ( params ) · { statements }, ++
declstmt -> tmodf type operator ID ( params ) · { statements }, --
declstmt -> tmodf type operator ID ( params ) · { statements }, break
declstmt -> tmodf type operator ID ( params ) · { statements }, return
declstmt -> tmodf type operator ID ( params ) · { statements }, delete
declstmt -> tmodf type operator ID ( params ) · { statements }, while
declstmt -> tmodf type operator ID ( params ) · { statements }, for
declstmt -> tmodf type operator ID ( params ) · { statements }, if
declstmt -> tmodf type operator ID ( params ) · { statements }, }
declstmt -> tmodf type operator ID ( params ) · { statements }, &&
declstmt -> tmodf type operator ID ( params ) · { statements }, ||
declstmt -> tmodf type operator ID ( params ) · { statements }, +
declstmt -> tmodf type operator ID ( params ) · { statements }, -
declstmt -> tmodf type operator ID ( params ) · { statements }, *
declstmt -> tmodf type operator ID ( params ) · { statements }, /
declstmt -> tmodf type operator ID ( params ) · { statements }, %
declstmt -> tmodf type operator ID ( params ) · { statements }, !
declstmt -> tmodf type operator ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
265
I_1454_1554_1620_1729_1757_1805_1818
***Set***
declstmt -> tmodf type ID ( params ) { · statements }, $
declstmt -> tmodf type ID ( params ) { · statements }, namespace
declstmt -> tmodf type ID ( params ) { · statements }, {
declstmt -> tmodf type ID ( params ) { · statements }, ID
declstmt -> tmodf type ID ( params ) { · statements }, void
declstmt -> tmodf type ID ( params ) { · statements }, bool
declstmt -> tmodf type ID ( params ) { · statements }, int
declstmt -> tmodf type ID ( params ) { · statements }, long
declstmt -> tmodf type ID ( params ) { · statements }, float
declstmt -> tmodf type ID ( params ) { · statements }, double
declstmt -> tmodf type ID ( params ) { · statements }, char
declstmt -> tmodf type ID ( params ) { · statements }, string
declstmt -> tmodf type ID ( params ) { · statements }, var
declstmt -> tmodf type ID ( params ) { · statements }, own
declstmt -> tmodf type ID ( params ) { · statements }, bor
declstmt -> tmodf type ID ( params ) { · statements }, const
declstmt -> tmodf type ID ( params ) { · statements }, extern
declstmt -> tmodf type ID ( params ) { · statements }, class
declstmt -> tmodf type ID ( params ) { · statements }, (
declstmt -> tmodf type ID ( params ) { · statements }, this
declstmt -> tmodf type ID ( params ) { · statements }, new
declstmt -> tmodf type ID ( params ) { · statements }, LITBOOL
declstmt -> tmodf type ID ( params ) { · statements }, LITINT
declstmt -> tmodf type ID ( params ) { · statements }, LITLONG
declstmt -> tmodf type ID ( params ) { · statements }, LITFLOAT
declstmt -> tmodf type ID ( params ) { · statements }, LITDOUBLE
declstmt -> tmodf type ID ( params ) { · statements }, LITCHAR
declstmt -> tmodf type ID ( params ) { · statements }, LITSTRING
declstmt -> tmodf type ID ( params ) { · statements }, null
declstmt -> tmodf type ID ( params ) { · statements }, ++
declstmt -> tmodf type ID ( params ) { · statements }, --
declstmt -> tmodf type ID ( params ) { · statements }, break
declstmt -> tmodf type ID ( params ) { · statements }, return
declstmt -> tmodf type ID ( params ) { · statements }, delete
declstmt -> tmodf type ID ( params ) { · statements }, while
declstmt -> tmodf type ID ( params ) { · statements }, for
declstmt -> tmodf type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> tmodf type ID ( params ) { · statements }, }
declstmt -> tmodf type ID ( params ) { · statements }, &&
declstmt -> tmodf type ID ( params ) { · statements }, ||
declstmt -> tmodf type ID ( params ) { · statements }, +
declstmt -> tmodf type ID ( params ) { · statements }, -
declstmt -> tmodf type ID ( params ) { · statements }, *
declstmt -> tmodf type ID ( params ) { · statements }, /
declstmt -> tmodf type ID ( params ) { · statements }, %
declstmt -> tmodf type ID ( params ) { · statements }, !
declstmt -> tmodf type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
266
I_1455_1555_1621_1730_1758_1806_1819
***Set***
declstmt -> type operator ID ( params ) { · statements }, $
declstmt -> type operator ID ( params ) { · statements }, namespace
declstmt -> type operator ID ( params ) { · statements }, {
declstmt -> type operator ID ( params ) { · statements }, ID
declstmt -> type operator ID ( params ) { · statements }, void
declstmt -> type operator ID ( params ) { · statements }, bool
declstmt -> type operator ID ( params ) { · statements }, int
declstmt -> type operator ID ( params ) { · statements }, long
declstmt -> type operator ID ( params ) { · statements }, float
declstmt -> type operator ID ( params ) { · statements }, double
declstmt -> type operator ID ( params ) { · statements }, char
declstmt -> type operator ID ( params ) { · statements }, string
declstmt -> type operator ID ( params ) { · statements }, var
declstmt -> type operator ID ( params ) { · statements }, own
declstmt -> type operator ID ( params ) { · statements }, bor
declstmt -> type operator ID ( params ) { · statements }, const
declstmt -> type operator ID ( params ) { · statements }, extern
declstmt -> type operator ID ( params ) { · statements }, class
declstmt -> type operator ID ( params ) { · statements }, (
declstmt -> type operator ID ( params ) { · statements }, this
declstmt -> type operator ID ( params ) { · statements }, new
declstmt -> type operator ID ( params ) { · statements }, LITBOOL
declstmt -> type operator ID ( params ) { · statements }, LITINT
declstmt -> type operator ID ( params ) { · statements }, LITLONG
declstmt -> type operator ID ( params ) { · statements }, LITFLOAT
declstmt -> type operator ID ( params ) { · statements }, LITDOUBLE
declstmt -> type operator ID ( params ) { · statements }, LITCHAR
declstmt -> type operator ID ( params ) { · statements }, LITSTRING
declstmt -> type operator ID ( params ) { · statements }, null
declstmt -> type operator ID ( params ) { · statements }, ++
declstmt -> type operator ID ( params ) { · statements }, --
declstmt -> type operator ID ( params ) { · statements }, break
declstmt -> type operator ID ( params ) { · statements }, return
declstmt -> type operator ID ( params ) { · statements }, delete
declstmt -> type operator ID ( params ) { · statements }, while
declstmt -> type operator ID ( params ) { · statements }, for
declstmt -> type operator ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type operator ID ( params ) { · statements }, }
declstmt -> type operator ID ( params ) { · statements }, &&
declstmt -> type operator ID ( params ) { · statements }, ||
declstmt -> type operator ID ( params ) { · statements }, +
declstmt -> type operator ID ( params ) { · statements }, -
declstmt -> type operator ID ( params ) { · statements }, *
declstmt -> type operator ID ( params ) { · statements }, /
declstmt -> type operator ID ( params ) { · statements }, %
declstmt -> type operator ID ( params ) { · statements }, !
declstmt -> type operator ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
267
I_1458_1556_1622_1731_1759_1807_1820
***Set***
declstmt -> type ID ( params ) { statements · }, $
declstmt -> type ID ( params ) { statements · }, namespace
declstmt -> type ID ( params ) { statements · }, {
declstmt -> type ID ( params ) { statements · }, ID
declstmt -> type ID ( params ) { statements · }, void
declstmt -> type ID ( params ) { statements · }, bool
declstmt -> type ID ( params ) { statements · }, int
declstmt -> type ID ( params ) { statements · }, long
declstmt -> type ID ( params ) { statements · }, float
declstmt -> type ID ( params ) { statements · }, double
declstmt -> type ID ( params ) { statements · }, char
declstmt -> type ID ( params ) { statements · }, string
declstmt -> type ID ( params ) { statements · }, var
declstmt -> type ID ( params ) { statements · }, own
declstmt -> type ID ( params ) { statements · }, bor
declstmt -> type ID ( params ) { statements · }, const
declstmt -> type ID ( params ) { statements · }, extern
declstmt -> type ID ( params ) { statements · }, class
declstmt -> type ID ( params ) { statements · }, (
declstmt -> type ID ( params ) { statements · }, this
declstmt -> type ID ( params ) { statements · }, new
declstmt -> type ID ( params ) { statements · }, LITBOOL
declstmt -> type ID ( params ) { statements · }, LITINT
declstmt -> type ID ( params ) { statements · }, LITLONG
declstmt -> type ID ( params ) { statements · }, LITFLOAT
declstmt -> type ID ( params ) { statements · }, LITDOUBLE
declstmt -> type ID ( params ) { statements · }, LITCHAR
declstmt -> type ID ( params ) { statements · }, LITSTRING
declstmt -> type ID ( params ) { statements · }, null
declstmt -> type ID ( params ) { statements · }, ++
declstmt -> type ID ( params ) { statements · }, --
declstmt -> type ID ( params ) { statements · }, break
declstmt -> type ID ( params ) { statements · }, return
declstmt -> type ID ( params ) { statements · }, delete
declstmt -> type ID ( params ) { statements · }, while
declstmt -> type ID ( params ) { statements · }, for
declstmt -> type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { statements · }, }
declstmt -> type ID ( params ) { statements · }, &&
declstmt -> type ID ( params ) { statements · }, ||
declstmt -> type ID ( params ) { statements · }, +
declstmt -> type ID ( params ) { statements · }, -
declstmt -> type ID ( params ) { statements · }, *
declstmt -> type ID ( params ) { statements · }, /
declstmt -> type ID ( params ) { statements · }, %
declstmt -> type ID ( params ) { statements · }, !
declstmt -> type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
268
I_1506_1638_1674_1790_1825_1834
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, $
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, {
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ID
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, void
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bool
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, int
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, long
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, float
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, double
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, char
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, string
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, var
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, own
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bor
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, const
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, extern
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, class
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, (
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, this
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, new
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, null
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ++
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, --
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, break
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, return
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, delete
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, while
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, for
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, if
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, }
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, &&
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ||
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, +
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, -
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, *
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, /
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, %
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, !
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, else
***EndSet***
***EndState***
***State***
269
I_1521_1647_1683_1791_1826_1835
***Set***
elifclause -> else if · ( expr ) stmt, else
elifclause -> else if · ( expr ) stmt, $
elifclause -> else if · ( expr ) stmt, namespace
elifclause -> else if · ( expr ) stmt, {
elifclause -> else if · ( expr ) stmt, ID
elifclause -> else if · ( expr ) stmt, void
elifclause -> else if · ( expr ) stmt, bool
elifclause -> else if · ( expr ) stmt, int
elifclause -> else if · ( expr ) stmt, long
elifclause -> else if · ( expr ) stmt, float
elifclause -> else if · ( expr ) stmt, double
elifclause -> else if · ( expr ) stmt, char
elifclause -> else if · ( expr ) stmt, string
elifclause -> else if · ( expr ) stmt, var
elifclause -> else if · ( expr ) stmt, own
elifclause -> else if · ( expr ) stmt, bor
elifclause -> else if · ( expr ) stmt, const
elifclause -> else if · ( expr ) stmt, extern
elifclause -> else if · ( expr ) stmt, class
elifclause -> else if · ( expr ) stmt, (
elifclause -> else if · ( expr ) stmt, this
elifclause -> else if · ( expr ) stmt, new
elifclause -> else if · ( expr ) stmt, LITBOOL
elifclause -> else if · ( expr ) stmt, LITINT
elifclause -> else if · ( expr ) stmt, LITLONG
elifclause -> else if · ( expr ) stmt, LITFLOAT
elifclause -> else if · ( expr ) stmt, LITDOUBLE
elifclause -> else if · ( expr ) stmt, LITCHAR
elifclause -> else if · ( expr ) stmt, LITSTRING
elifclause -> else if · ( expr ) stmt, null
elifclause -> else if · ( expr ) stmt, ++
elifclause -> else if · ( expr ) stmt, --
elifclause -> else if · ( expr ) stmt, break
elifclause -> else if · ( expr ) stmt, return
elifclause -> else if · ( expr ) stmt, delete
elifclause -> else if · ( expr ) stmt, while
elifclause -> else if · ( expr ) stmt, for
elifclause -> else if · ( expr ) stmt, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, long
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, var
stmt -> if · ( expr ) stmt elifclauselist elseclause, own
stmt -> if · ( expr ) stmt elifclauselist elseclause, bor
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
elifclause -> else if · ( expr ) stmt, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
elifclause -> else if · ( expr ) stmt, &&
elifclause -> else if · ( expr ) stmt, ||
elifclause -> else if · ( expr ) stmt, +
elifclause -> else if · ( expr ) stmt, -
elifclause -> else if · ( expr ) stmt, *
elifclause -> else if · ( expr ) stmt, /
elifclause -> else if · ( expr ) stmt, %
elifclause -> else if · ( expr ) stmt, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
270
I_1522_1648_1684_1792_1827_1836
***Set***
elseclause -> else stmt ·, $
elseclause -> else stmt ·, namespace
elseclause -> else stmt ·, {
elseclause -> else stmt ·, ID
elseclause -> else stmt ·, void
elseclause -> else stmt ·, bool
elseclause -> else stmt ·, int
elseclause -> else stmt ·, long
elseclause -> else stmt ·, float
elseclause -> else stmt ·, double
elseclause -> else stmt ·, char
elseclause -> else stmt ·, string
elseclause -> else stmt ·, var
elseclause -> else stmt ·, own
elseclause -> else stmt ·, bor
elseclause -> else stmt ·, const
elseclause -> else stmt ·, extern
elseclause -> else stmt ·, class
elseclause -> else stmt ·, (
elseclause -> else stmt ·, this
elseclause -> else stmt ·, new
elseclause -> else stmt ·, LITBOOL
elseclause -> else stmt ·, LITINT
elseclause -> else stmt ·, LITLONG
elseclause -> else stmt ·, LITFLOAT
elseclause -> else stmt ·, LITDOUBLE
elseclause -> else stmt ·, LITCHAR
elseclause -> else stmt ·, LITSTRING
elseclause -> else stmt ·, null
elseclause -> else stmt ·, ++
elseclause -> else stmt ·, --
elseclause -> else stmt ·, break
elseclause -> else stmt ·, return
elseclause -> else stmt ·, delete
elseclause -> else stmt ·, while
elseclause -> else stmt ·, for
elseclause -> else stmt ·, if
elseclause -> else stmt ·, }
elseclause -> else stmt ·, &&
elseclause -> else stmt ·, ||
elseclause -> else stmt ·, +
elseclause -> else stmt ·, -
elseclause -> else stmt ·, *
elseclause -> else stmt ·, /
elseclause -> else stmt ·, %
elseclause -> else stmt ·, !
elseclause -> else stmt ·, else
***EndSet***
***EndState***
***State***
271
I_1571_1655_1691_1773_1794_1829_1838
***Set***
declstmt -> tmodf type operator ID ( params ) { · statements }, $
declstmt -> tmodf type operator ID ( params ) { · statements }, namespace
declstmt -> tmodf type operator ID ( params ) { · statements }, {
declstmt -> tmodf type operator ID ( params ) { · statements }, ID
declstmt -> tmodf type operator ID ( params ) { · statements }, void
declstmt -> tmodf type operator ID ( params ) { · statements }, bool
declstmt -> tmodf type operator ID ( params ) { · statements }, int
declstmt -> tmodf type operator ID ( params ) { · statements }, long
declstmt -> tmodf type operator ID ( params ) { · statements }, float
declstmt -> tmodf type operator ID ( params ) { · statements }, double
declstmt -> tmodf type operator ID ( params ) { · statements }, char
declstmt -> tmodf type operator ID ( params ) { · statements }, string
declstmt -> tmodf type operator ID ( params ) { · statements }, var
declstmt -> tmodf type operator ID ( params ) { · statements }, own
declstmt -> tmodf type operator ID ( params ) { · statements }, bor
declstmt -> tmodf type operator ID ( params ) { · statements }, const
declstmt -> tmodf type operator ID ( params ) { · statements }, extern
declstmt -> tmodf type operator ID ( params ) { · statements }, class
declstmt -> tmodf type operator ID ( params ) { · statements }, (
declstmt -> tmodf type operator ID ( params ) { · statements }, this
declstmt -> tmodf type operator ID ( params ) { · statements }, new
declstmt -> tmodf type operator ID ( params ) { · statements }, LITBOOL
declstmt -> tmodf type operator ID ( params ) { · statements }, LITINT
declstmt -> tmodf type operator ID ( params ) { · statements }, LITLONG
declstmt -> tmodf type operator ID ( params ) { · statements }, LITFLOAT
declstmt -> tmodf type operator ID ( params ) { · statements }, LITDOUBLE
declstmt -> tmodf type operator ID ( params ) { · statements }, LITCHAR
declstmt -> tmodf type operator ID ( params ) { · statements }, LITSTRING
declstmt -> tmodf type operator ID ( params ) { · statements }, null
declstmt -> tmodf type operator ID ( params ) { · statements }, ++
declstmt -> tmodf type operator ID ( params ) { · statements }, --
declstmt -> tmodf type operator ID ( params ) { · statements }, break
declstmt -> tmodf type operator ID ( params ) { · statements }, return
declstmt -> tmodf type operator ID ( params ) { · statements }, delete
declstmt -> tmodf type operator ID ( params ) { · statements }, while
declstmt -> tmodf type operator ID ( params ) { · statements }, for
declstmt -> tmodf type operator ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> tmodf type operator ID ( params ) { · statements }, }
declstmt -> tmodf type operator ID ( params ) { · statements }, &&
declstmt -> tmodf type operator ID ( params ) { · statements }, ||
declstmt -> tmodf type operator ID ( params ) { · statements }, +
declstmt -> tmodf type operator ID ( params ) { · statements }, -
declstmt -> tmodf type operator ID ( params ) { · statements }, *
declstmt -> tmodf type operator ID ( params ) { · statements }, /
declstmt -> tmodf type operator ID ( params ) { · statements }, %
declstmt -> tmodf type operator ID ( params ) { · statements }, !
declstmt -> tmodf type operator ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
272
I_1572_1656_1692_1774_1795_1830_1839
***Set***
declstmt -> tmodf type ID ( params ) { statements · }, $
declstmt -> tmodf type ID ( params ) { statements · }, namespace
declstmt -> tmodf type ID ( params ) { statements · }, {
declstmt -> tmodf type ID ( params ) { statements · }, ID
declstmt -> tmodf type ID ( params ) { statements · }, void
declstmt -> tmodf type ID ( params ) { statements · }, bool
declstmt -> tmodf type ID ( params ) { statements · }, int
declstmt -> tmodf type ID ( params ) { statements · }, long
declstmt -> tmodf type ID ( params ) { statements · }, float
declstmt -> tmodf type ID ( params ) { statements · }, double
declstmt -> tmodf type ID ( params ) { statements · }, char
declstmt -> tmodf type ID ( params ) { statements · }, string
declstmt -> tmodf type ID ( params ) { statements · }, var
declstmt -> tmodf type ID ( params ) { statements · }, own
declstmt -> tmodf type ID ( params ) { statements · }, bor
declstmt -> tmodf type ID ( params ) { statements · }, const
declstmt -> tmodf type ID ( params ) { statements · }, extern
declstmt -> tmodf type ID ( params ) { statements · }, class
declstmt -> tmodf type ID ( params ) { statements · }, (
declstmt -> tmodf type ID ( params ) { statements · }, this
declstmt -> tmodf type ID ( params ) { statements · }, new
declstmt -> tmodf type ID ( params ) { statements · }, LITBOOL
declstmt -> tmodf type ID ( params ) { statements · }, LITINT
declstmt -> tmodf type ID ( params ) { statements · }, LITLONG
declstmt -> tmodf type ID ( params ) { statements · }, LITFLOAT
declstmt -> tmodf type ID ( params ) { statements · }, LITDOUBLE
declstmt -> tmodf type ID ( params ) { statements · }, LITCHAR
declstmt -> tmodf type ID ( params ) { statements · }, LITSTRING
declstmt -> tmodf type ID ( params ) { statements · }, null
declstmt -> tmodf type ID ( params ) { statements · }, ++
declstmt -> tmodf type ID ( params ) { statements · }, --
declstmt -> tmodf type ID ( params ) { statements · }, break
declstmt -> tmodf type ID ( params ) { statements · }, return
declstmt -> tmodf type ID ( params ) { statements · }, delete
declstmt -> tmodf type ID ( params ) { statements · }, while
declstmt -> tmodf type ID ( params ) { statements · }, for
declstmt -> tmodf type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> tmodf type ID ( params ) { statements · }, }
declstmt -> tmodf type ID ( params ) { statements · }, &&
declstmt -> tmodf type ID ( params ) { statements · }, ||
declstmt -> tmodf type ID ( params ) { statements · }, +
declstmt -> tmodf type ID ( params ) { statements · }, -
declstmt -> tmodf type ID ( params ) { statements · }, *
declstmt -> tmodf type ID ( params ) { statements · }, /
declstmt -> tmodf type ID ( params ) { statements · }, %
declstmt -> tmodf type ID ( params ) { statements · }, !
declstmt -> tmodf type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
273
I_1573_1657_1693_1775_1796_1831_1840
***Set***
declstmt -> type operator ID ( params ) { statements · }, $
declstmt -> type operator ID ( params ) { statements · }, namespace
declstmt -> type operator ID ( params ) { statements · }, {
declstmt -> type operator ID ( params ) { statements · }, ID
declstmt -> type operator ID ( params ) { statements · }, void
declstmt -> type operator ID ( params ) { statements · }, bool
declstmt -> type operator ID ( params ) { statements · }, int
declstmt -> type operator ID ( params ) { statements · }, long
declstmt -> type operator ID ( params ) { statements · }, float
declstmt -> type operator ID ( params ) { statements · }, double
declstmt -> type operator ID ( params ) { statements · }, char
declstmt -> type operator ID ( params ) { statements · }, string
declstmt -> type operator ID ( params ) { statements · }, var
declstmt -> type operator ID ( params ) { statements · }, own
declstmt -> type operator ID ( params ) { statements · }, bor
declstmt -> type operator ID ( params ) { statements · }, const
declstmt -> type operator ID ( params ) { statements · }, extern
declstmt -> type operator ID ( params ) { statements · }, class
declstmt -> type operator ID ( params ) { statements · }, (
declstmt -> type operator ID ( params ) { statements · }, this
declstmt -> type operator ID ( params ) { statements · }, new
declstmt -> type operator ID ( params ) { statements · }, LITBOOL
declstmt -> type operator ID ( params ) { statements · }, LITINT
declstmt -> type operator ID ( params ) { statements · }, LITLONG
declstmt -> type operator ID ( params ) { statements · }, LITFLOAT
declstmt -> type operator ID ( params ) { statements · }, LITDOUBLE
declstmt -> type operator ID ( params ) { statements · }, LITCHAR
declstmt -> type operator ID ( params ) { statements · }, LITSTRING
declstmt -> type operator ID ( params ) { statements · }, null
declstmt -> type operator ID ( params ) { statements · }, ++
declstmt -> type operator ID ( params ) { statements · }, --
declstmt -> type operator ID ( params ) { statements · }, break
declstmt -> type operator ID ( params ) { statements · }, return
declstmt -> type operator ID ( params ) { statements · }, delete
declstmt -> type operator ID ( params ) { statements · }, while
declstmt -> type operator ID ( params ) { statements · }, for
declstmt -> type operator ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type operator ID ( params ) { statements · }, }
declstmt -> type operator ID ( params ) { statements · }, &&
declstmt -> type operator ID ( params ) { statements · }, ||
declstmt -> type operator ID ( params ) { statements · }, +
declstmt -> type operator ID ( params ) { statements · }, -
declstmt -> type operator ID ( params ) { statements · }, *
declstmt -> type operator ID ( params ) { statements · }, /
declstmt -> type operator ID ( params ) { statements · }, %
declstmt -> type operator ID ( params ) { statements · }, !
declstmt -> type operator ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
274
I_1575_1658_1694_1776_1797_1832_1841
***Set***
declstmt -> type ID ( params ) { statements } ·, $
declstmt -> type ID ( params ) { statements } ·, namespace
declstmt -> type ID ( params ) { statements } ·, {
declstmt -> type ID ( params ) { statements } ·, ID
declstmt -> type ID ( params ) { statements } ·, void
declstmt -> type ID ( params ) { statements } ·, bool
declstmt -> type ID ( params ) { statements } ·, int
declstmt -> type ID ( params ) { statements } ·, long
declstmt -> type ID ( params ) { statements } ·, float
declstmt -> type ID ( params ) { statements } ·, double
declstmt -> type ID ( params ) { statements } ·, char
declstmt -> type ID ( params ) { statements } ·, string
declstmt -> type ID ( params ) { statements } ·, var
declstmt -> type ID ( params ) { statements } ·, own
declstmt -> type ID ( params ) { statements } ·, bor
declstmt -> type ID ( params ) { statements } ·, const
declstmt -> type ID ( params ) { statements } ·, extern
declstmt -> type ID ( params ) { statements } ·, class
declstmt -> type ID ( params ) { statements } ·, (
declstmt -> type ID ( params ) { statements } ·, this
declstmt -> type ID ( params ) { statements } ·, new
declstmt -> type ID ( params ) { statements } ·, LITBOOL
declstmt -> type ID ( params ) { statements } ·, LITINT
declstmt -> type ID ( params ) { statements } ·, LITLONG
declstmt -> type ID ( params ) { statements } ·, LITFLOAT
declstmt -> type ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type ID ( params ) { statements } ·, LITCHAR
declstmt -> type ID ( params ) { statements } ·, LITSTRING
declstmt -> type ID ( params ) { statements } ·, null
declstmt -> type ID ( params ) { statements } ·, ++
declstmt -> type ID ( params ) { statements } ·, --
declstmt -> type ID ( params ) { statements } ·, break
declstmt -> type ID ( params ) { statements } ·, return
declstmt -> type ID ( params ) { statements } ·, delete
declstmt -> type ID ( params ) { statements } ·, while
declstmt -> type ID ( params ) { statements } ·, for
declstmt -> type ID ( params ) { statements } ·, if
declstmt -> type ID ( params ) { statements } ·, }
declstmt -> type ID ( params ) { statements } ·, &&
declstmt -> type ID ( params ) { statements } ·, ||
declstmt -> type ID ( params ) { statements } ·, +
declstmt -> type ID ( params ) { statements } ·, -
declstmt -> type ID ( params ) { statements } ·, *
declstmt -> type ID ( params ) { statements } ·, /
declstmt -> type ID ( params ) { statements } ·, %
declstmt -> type ID ( params ) { statements } ·, !
declstmt -> type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
275
I_1631_1715_1740_1821_1844_1848
***Set***
elifclause -> else if ( · expr ) stmt, else
elifclause -> else if ( · expr ) stmt, $
elifclause -> else if ( · expr ) stmt, namespace
elifclause -> else if ( · expr ) stmt, {
elifclause -> else if ( · expr ) stmt, ID
elifclause -> else if ( · expr ) stmt, void
elifclause -> else if ( · expr ) stmt, bool
elifclause -> else if ( · expr ) stmt, int
elifclause -> else if ( · expr ) stmt, long
elifclause -> else if ( · expr ) stmt, float
elifclause -> else if ( · expr ) stmt, double
elifclause -> else if ( · expr ) stmt, char
elifclause -> else if ( · expr ) stmt, string
elifclause -> else if ( · expr ) stmt, var
elifclause -> else if ( · expr ) stmt, own
elifclause -> else if ( · expr ) stmt, bor
elifclause -> else if ( · expr ) stmt, const
elifclause -> else if ( · expr ) stmt, extern
elifclause -> else if ( · expr ) stmt, class
elifclause -> else if ( · expr ) stmt, (
elifclause -> else if ( · expr ) stmt, this
elifclause -> else if ( · expr ) stmt, new
elifclause -> else if ( · expr ) stmt, LITBOOL
elifclause -> else if ( · expr ) stmt, LITINT
elifclause -> else if ( · expr ) stmt, LITLONG
elifclause -> else if ( · expr ) stmt, LITFLOAT
elifclause -> else if ( · expr ) stmt, LITDOUBLE
elifclause -> else if ( · expr ) stmt, LITCHAR
elifclause -> else if ( · expr ) stmt, LITSTRING
elifclause -> else if ( · expr ) stmt, null
elifclause -> else if ( · expr ) stmt, ++
elifclause -> else if ( · expr ) stmt, --
elifclause -> else if ( · expr ) stmt, break
elifclause -> else if ( · expr ) stmt, return
elifclause -> else if ( · expr ) stmt, delete
elifclause -> else if ( · expr ) stmt, while
elifclause -> else if ( · expr ) stmt, for
elifclause -> else if ( · expr ) stmt, if
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, long
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, var
stmt -> if ( · expr ) stmt elifclauselist elseclause, own
stmt -> if ( · expr ) stmt elifclauselist elseclause, bor
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
elifclause -> else if ( · expr ) stmt, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
elifclause -> else if ( · expr ) stmt, &&
elifclause -> else if ( · expr ) stmt, ||
elifclause -> else if ( · expr ) stmt, +
elifclause -> else if ( · expr ) stmt, -
elifclause -> else if ( · expr ) stmt, *
elifclause -> else if ( · expr ) stmt, /
elifclause -> else if ( · expr ) stmt, %
elifclause -> else if ( · expr ) stmt, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
276
I_1661_1722_1747_1808_1822_1845_1849
***Set***
declstmt -> tmodf type operator ID ( params ) { statements · }, $
declstmt -> tmodf type operator ID ( params ) { statements · }, namespace
declstmt -> tmodf type operator ID ( params ) { statements · }, {
declstmt -> tmodf type operator ID ( params ) { statements · }, ID
declstmt -> tmodf type operator ID ( params ) { statements · }, void
declstmt -> tmodf type operator ID ( params ) { statements · }, bool
declstmt -> tmodf type operator ID ( params ) { statements · }, int
declstmt -> tmodf type operator ID ( params ) { statements · }, long
declstmt -> tmodf type operator ID ( params ) { statements · }, float
declstmt -> tmodf type operator ID ( params ) { statements · }, double
declstmt -> tmodf type operator ID ( params ) { statements · }, char
declstmt -> tmodf type operator ID ( params ) { statements · }, string
declstmt -> tmodf type operator ID ( params ) { statements · }, var
declstmt -> tmodf type operator ID ( params ) { statements · }, own
declstmt -> tmodf type operator ID ( params ) { statements · }, bor
declstmt -> tmodf type operator ID ( params ) { statements · }, const
declstmt -> tmodf type operator ID ( params ) { statements · }, extern
declstmt -> tmodf type operator ID ( params ) { statements · }, class
declstmt -> tmodf type operator ID ( params ) { statements · }, (
declstmt -> tmodf type operator ID ( params ) { statements · }, this
declstmt -> tmodf type operator ID ( params ) { statements · }, new
declstmt -> tmodf type operator ID ( params ) { statements · }, LITBOOL
declstmt -> tmodf type operator ID ( params ) { statements · }, LITINT
declstmt -> tmodf type operator ID ( params ) { statements · }, LITLONG
declstmt -> tmodf type operator ID ( params ) { statements · }, LITFLOAT
declstmt -> tmodf type operator ID ( params ) { statements · }, LITDOUBLE
declstmt -> tmodf type operator ID ( params ) { statements · }, LITCHAR
declstmt -> tmodf type operator ID ( params ) { statements · }, LITSTRING
declstmt -> tmodf type operator ID ( params ) { statements · }, null
declstmt -> tmodf type operator ID ( params ) { statements · }, ++
declstmt -> tmodf type operator ID ( params ) { statements · }, --
declstmt -> tmodf type operator ID ( params ) { statements · }, break
declstmt -> tmodf type operator ID ( params ) { statements · }, return
declstmt -> tmodf type operator ID ( params ) { statements · }, delete
declstmt -> tmodf type operator ID ( params ) { statements · }, while
declstmt -> tmodf type operator ID ( params ) { statements · }, for
declstmt -> tmodf type operator ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> tmodf type operator ID ( params ) { statements · }, }
declstmt -> tmodf type operator ID ( params ) { statements · }, &&
declstmt -> tmodf type operator ID ( params ) { statements · }, ||
declstmt -> tmodf type operator ID ( params ) { statements · }, +
declstmt -> tmodf type operator ID ( params ) { statements · }, -
declstmt -> tmodf type operator ID ( params ) { statements · }, *
declstmt -> tmodf type operator ID ( params ) { statements · }, /
declstmt -> tmodf type operator ID ( params ) { statements · }, %
declstmt -> tmodf type operator ID ( params ) { statements · }, !
declstmt -> tmodf type operator ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
277
I_1662_1723_1748_1809_1823_1846_1850
***Set***
declstmt -> tmodf type ID ( params ) { statements } ·, $
declstmt -> tmodf type ID ( params ) { statements } ·, namespace
declstmt -> tmodf type ID ( params ) { statements } ·, {
declstmt -> tmodf type ID ( params ) { statements } ·, ID
declstmt -> tmodf type ID ( params ) { statements } ·, void
declstmt -> tmodf type ID ( params ) { statements } ·, bool
declstmt -> tmodf type ID ( params ) { statements } ·, int
declstmt -> tmodf type ID ( params ) { statements } ·, long
declstmt -> tmodf type ID ( params ) { statements } ·, float
declstmt -> tmodf type ID ( params ) { statements } ·, double
declstmt -> tmodf type ID ( params ) { statements } ·, char
declstmt -> tmodf type ID ( params ) { statements } ·, string
declstmt -> tmodf type ID ( params ) { statements } ·, var
declstmt -> tmodf type ID ( params ) { statements } ·, own
declstmt -> tmodf type ID ( params ) { statements } ·, bor
declstmt -> tmodf type ID ( params ) { statements } ·, const
declstmt -> tmodf type ID ( params ) { statements } ·, extern
declstmt -> tmodf type ID ( params ) { statements } ·, class
declstmt -> tmodf type ID ( params ) { statements } ·, (
declstmt -> tmodf type ID ( params ) { statements } ·, this
declstmt -> tmodf type ID ( params ) { statements } ·, new
declstmt -> tmodf type ID ( params ) { statements } ·, LITBOOL
declstmt -> tmodf type ID ( params ) { statements } ·, LITINT
declstmt -> tmodf type ID ( params ) { statements } ·, LITLONG
declstmt -> tmodf type ID ( params ) { statements } ·, LITFLOAT
declstmt -> tmodf type ID ( params ) { statements } ·, LITDOUBLE
declstmt -> tmodf type ID ( params ) { statements } ·, LITCHAR
declstmt -> tmodf type ID ( params ) { statements } ·, LITSTRING
declstmt -> tmodf type ID ( params ) { statements } ·, null
declstmt -> tmodf type ID ( params ) { statements } ·, ++
declstmt -> tmodf type ID ( params ) { statements } ·, --
declstmt -> tmodf type ID ( params ) { statements } ·, break
declstmt -> tmodf type ID ( params ) { statements } ·, return
declstmt -> tmodf type ID ( params ) { statements } ·, delete
declstmt -> tmodf type ID ( params ) { statements } ·, while
declstmt -> tmodf type ID ( params ) { statements } ·, for
declstmt -> tmodf type ID ( params ) { statements } ·, if
declstmt -> tmodf type ID ( params ) { statements } ·, }
declstmt -> tmodf type ID ( params ) { statements } ·, &&
declstmt -> tmodf type ID ( params ) { statements } ·, ||
declstmt -> tmodf type ID ( params ) { statements } ·, +
declstmt -> tmodf type ID ( params ) { statements } ·, -
declstmt -> tmodf type ID ( params ) { statements } ·, *
declstmt -> tmodf type ID ( params ) { statements } ·, /
declstmt -> tmodf type ID ( params ) { statements } ·, %
declstmt -> tmodf type ID ( params ) { statements } ·, !
declstmt -> tmodf type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
278
I_1663_1724_1749_1810_1824_1847_1851
***Set***
declstmt -> type operator ID ( params ) { statements } ·, $
declstmt -> type operator ID ( params ) { statements } ·, namespace
declstmt -> type operator ID ( params ) { statements } ·, {
declstmt -> type operator ID ( params ) { statements } ·, ID
declstmt -> type operator ID ( params ) { statements } ·, void
declstmt -> type operator ID ( params ) { statements } ·, bool
declstmt -> type operator ID ( params ) { statements } ·, int
declstmt -> type operator ID ( params ) { statements } ·, long
declstmt -> type operator ID ( params ) { statements } ·, float
declstmt -> type operator ID ( params ) { statements } ·, double
declstmt -> type operator ID ( params ) { statements } ·, char
declstmt -> type operator ID ( params ) { statements } ·, string
declstmt -> type operator ID ( params ) { statements } ·, var
declstmt -> type operator ID ( params ) { statements } ·, own
declstmt -> type operator ID ( params ) { statements } ·, bor
declstmt -> type operator ID ( params ) { statements } ·, const
declstmt -> type operator ID ( params ) { statements } ·, extern
declstmt -> type operator ID ( params ) { statements } ·, class
declstmt -> type operator ID ( params ) { statements } ·, (
declstmt -> type operator ID ( params ) { statements } ·, this
declstmt -> type operator ID ( params ) { statements } ·, new
declstmt -> type operator ID ( params ) { statements } ·, LITBOOL
declstmt -> type operator ID ( params ) { statements } ·, LITINT
declstmt -> type operator ID ( params ) { statements } ·, LITLONG
declstmt -> type operator ID ( params ) { statements } ·, LITFLOAT
declstmt -> type operator ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type operator ID ( params ) { statements } ·, LITCHAR
declstmt -> type operator ID ( params ) { statements } ·, LITSTRING
declstmt -> type operator ID ( params ) { statements } ·, null
declstmt -> type operator ID ( params ) { statements } ·, ++
declstmt -> type operator ID ( params ) { statements } ·, --
declstmt -> type operator ID ( params ) { statements } ·, break
declstmt -> type operator ID ( params ) { statements } ·, return
declstmt -> type operator ID ( params ) { statements } ·, delete
declstmt -> type operator ID ( params ) { statements } ·, while
declstmt -> type operator ID ( params ) { statements } ·, for
declstmt -> type operator ID ( params ) { statements } ·, if
declstmt -> type operator ID ( params ) { statements } ·, }
declstmt -> type operator ID ( params ) { statements } ·, &&
declstmt -> type operator ID ( params ) { statements } ·, ||
declstmt -> type operator ID ( params ) { statements } ·, +
declstmt -> type operator ID ( params ) { statements } ·, -
declstmt -> type operator ID ( params ) { statements } ·, *
declstmt -> type operator ID ( params ) { statements } ·, /
declstmt -> type operator ID ( params ) { statements } ·, %
declstmt -> type operator ID ( params ) { statements } ·, !
declstmt -> type operator ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
279
I_1701_1766_1783_1842_1853_1855
***Set***
elifclause -> else if ( expr · ) stmt, else
elifclause -> else if ( expr · ) stmt, $
elifclause -> else if ( expr · ) stmt, namespace
elifclause -> else if ( expr · ) stmt, {
elifclause -> else if ( expr · ) stmt, ID
elifclause -> else if ( expr · ) stmt, void
elifclause -> else if ( expr · ) stmt, bool
elifclause -> else if ( expr · ) stmt, int
elifclause -> else if ( expr · ) stmt, long
elifclause -> else if ( expr · ) stmt, float
elifclause -> else if ( expr · ) stmt, double
elifclause -> else if ( expr · ) stmt, char
elifclause -> else if ( expr · ) stmt, string
elifclause -> else if ( expr · ) stmt, var
elifclause -> else if ( expr · ) stmt, own
elifclause -> else if ( expr · ) stmt, bor
elifclause -> else if ( expr · ) stmt, const
elifclause -> else if ( expr · ) stmt, extern
elifclause -> else if ( expr · ) stmt, class
elifclause -> else if ( expr · ) stmt, (
elifclause -> else if ( expr · ) stmt, this
elifclause -> else if ( expr · ) stmt, new
elifclause -> else if ( expr · ) stmt, LITBOOL
elifclause -> else if ( expr · ) stmt, LITINT
elifclause -> else if ( expr · ) stmt, LITLONG
elifclause -> else if ( expr · ) stmt, LITFLOAT
elifclause -> else if ( expr · ) stmt, LITDOUBLE
elifclause -> else if ( expr · ) stmt, LITCHAR
elifclause -> else if ( expr · ) stmt, LITSTRING
elifclause -> else if ( expr · ) stmt, null
elifclause -> else if ( expr · ) stmt, ++
elifclause -> else if ( expr · ) stmt, --
elifclause -> else if ( expr · ) stmt, break
elifclause -> else if ( expr · ) stmt, return
elifclause -> else if ( expr · ) stmt, delete
elifclause -> else if ( expr · ) stmt, while
elifclause -> else if ( expr · ) stmt, for
elifclause -> else if ( expr · ) stmt, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, long
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, var
stmt -> if ( expr · ) stmt elifclauselist elseclause, own
stmt -> if ( expr · ) stmt elifclauselist elseclause, bor
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
elifclause -> else if ( expr · ) stmt, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
elifclause -> else if ( expr · ) stmt, &&
elifclause -> else if ( expr · ) stmt, ||
elifclause -> else if ( expr · ) stmt, +
elifclause -> else if ( expr · ) stmt, -
elifclause -> else if ( expr · ) stmt, *
elifclause -> else if ( expr · ) stmt, /
elifclause -> else if ( expr · ) stmt, %
elifclause -> else if ( expr · ) stmt, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
280
I_1725_1772_1789_1833_1843_1854_1856
***Set***
declstmt -> tmodf type operator ID ( params ) { statements } ·, $
declstmt -> tmodf type operator ID ( params ) { statements } ·, namespace
declstmt -> tmodf type operator ID ( params ) { statements } ·, {
declstmt -> tmodf type operator ID ( params ) { statements } ·, ID
declstmt -> tmodf type operator ID ( params ) { statements } ·, void
declstmt -> tmodf type operator ID ( params ) { statements } ·, bool
declstmt -> tmodf type operator ID ( params ) { statements } ·, int
declstmt -> tmodf type operator ID ( params ) { statements } ·, long
declstmt -> tmodf type operator ID ( params ) { statements } ·, float
declstmt -> tmodf type operator ID ( params ) { statements } ·, double
declstmt -> tmodf type operator ID ( params ) { statements } ·, char
declstmt -> tmodf type operator ID ( params ) { statements } ·, string
declstmt -> tmodf type operator ID ( params ) { statements } ·, var
declstmt -> tmodf type operator ID ( params ) { statements } ·, own
declstmt -> tmodf type operator ID ( params ) { statements } ·, bor
declstmt -> tmodf type operator ID ( params ) { statements } ·, const
declstmt -> tmodf type operator ID ( params ) { statements } ·, extern
declstmt -> tmodf type operator ID ( params ) { statements } ·, class
declstmt -> tmodf type operator ID ( params ) { statements } ·, (
declstmt -> tmodf type operator ID ( params ) { statements } ·, this
declstmt -> tmodf type operator ID ( params ) { statements } ·, new
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITBOOL
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITINT
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITLONG
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITFLOAT
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITDOUBLE
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITCHAR
declstmt -> tmodf type operator ID ( params ) { statements } ·, LITSTRING
declstmt -> tmodf type operator ID ( params ) { statements } ·, null
declstmt -> tmodf type operator ID ( params ) { statements } ·, ++
declstmt -> tmodf type operator ID ( params ) { statements } ·, --
declstmt -> tmodf type operator ID ( params ) { statements } ·, break
declstmt -> tmodf type operator ID ( params ) { statements } ·, return
declstmt -> tmodf type operator ID ( params ) { statements } ·, delete
declstmt -> tmodf type operator ID ( params ) { statements } ·, while
declstmt -> tmodf type operator ID ( params ) { statements } ·, for
declstmt -> tmodf type operator ID ( params ) { statements } ·, if
declstmt -> tmodf type operator ID ( params ) { statements } ·, }
declstmt -> tmodf type operator ID ( params ) { statements } ·, &&
declstmt -> tmodf type operator ID ( params ) { statements } ·, ||
declstmt -> tmodf type operator ID ( params ) { statements } ·, +
declstmt -> tmodf type operator ID ( params ) { statements } ·, -
declstmt -> tmodf type operator ID ( params ) { statements } ·, *
declstmt -> tmodf type operator ID ( params ) { statements } ·, /
declstmt -> tmodf type operator ID ( params ) { statements } ·, %
declstmt -> tmodf type operator ID ( params ) { statements } ·, !
declstmt -> tmodf type operator ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
281
I_1755_1803_1816_1852_1858_1859
***Set***
elifclause -> else if ( expr ) · stmt, else
elifclause -> else if ( expr ) · stmt, $
elifclause -> else if ( expr ) · stmt, namespace
elifclause -> else if ( expr ) · stmt, {
elifclause -> else if ( expr ) · stmt, ID
elifclause -> else if ( expr ) · stmt, void
elifclause -> else if ( expr ) · stmt, bool
elifclause -> else if ( expr ) · stmt, int
elifclause -> else if ( expr ) · stmt, long
elifclause -> else if ( expr ) · stmt, float
elifclause -> else if ( expr ) · stmt, double
elifclause -> else if ( expr ) · stmt, char
elifclause -> else if ( expr ) · stmt, string
elifclause -> else if ( expr ) · stmt, var
elifclause -> else if ( expr ) · stmt, own
elifclause -> else if ( expr ) · stmt, bor
elifclause -> else if ( expr ) · stmt, const
elifclause -> else if ( expr ) · stmt, extern
elifclause -> else if ( expr ) · stmt, class
elifclause -> else if ( expr ) · stmt, (
elifclause -> else if ( expr ) · stmt, this
elifclause -> else if ( expr ) · stmt, new
elifclause -> else if ( expr ) · stmt, LITBOOL
elifclause -> else if ( expr ) · stmt, LITINT
elifclause -> else if ( expr ) · stmt, LITLONG
elifclause -> else if ( expr ) · stmt, LITFLOAT
elifclause -> else if ( expr ) · stmt, LITDOUBLE
elifclause -> else if ( expr ) · stmt, LITCHAR
elifclause -> else if ( expr ) · stmt, LITSTRING
elifclause -> else if ( expr ) · stmt, null
elifclause -> else if ( expr ) · stmt, ++
elifclause -> else if ( expr ) · stmt, --
elifclause -> else if ( expr ) · stmt, break
elifclause -> else if ( expr ) · stmt, return
elifclause -> else if ( expr ) · stmt, delete
elifclause -> else if ( expr ) · stmt, while
elifclause -> else if ( expr ) · stmt, for
elifclause -> else if ( expr ) · stmt, if
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, long
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, var
stmt -> if ( expr ) · stmt elifclauselist elseclause, own
stmt -> if ( expr ) · stmt elifclauselist elseclause, bor
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · tmodf type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · tmodf type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · tmodf type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · class own ID inherit { declstatements }, else
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · tmodf type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · tmodf type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · tmodf type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
declstmt -> · class own ID inherit { declstatements }, $
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · tmodf type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · tmodf type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · tmodf type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
declstmt -> · class own ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · tmodf type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · tmodf type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · tmodf type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
declstmt -> · class own ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · tmodf type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · tmodf type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · tmodf type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · class own ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · tmodf type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · tmodf type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · tmodf type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · class own ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · tmodf type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · tmodf type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · tmodf type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · class own ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · tmodf type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · tmodf type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · tmodf type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · class own ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · tmodf type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · tmodf type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · tmodf type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · class own ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · tmodf type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · tmodf type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · tmodf type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · class own ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · tmodf type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · tmodf type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · tmodf type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · class own ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · tmodf type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · tmodf type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · tmodf type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · class own ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · tmodf type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · tmodf type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · tmodf type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · class own ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · tmodf type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · tmodf type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · tmodf type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · class own ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · tmodf type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · tmodf type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · tmodf type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · class own ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · tmodf type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · tmodf type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · tmodf type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · class own ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · tmodf type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · tmodf type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · tmodf type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · class own ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · tmodf type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · tmodf type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · tmodf type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · class own ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · tmodf type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · tmodf type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · tmodf type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
declstmt -> · class own ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · tmodf type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · tmodf type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · tmodf type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · class own ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · tmodf type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · tmodf type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · tmodf type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · class own ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · tmodf type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · tmodf type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · tmodf type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · class own ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · tmodf type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · tmodf type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · class own ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · tmodf type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · tmodf type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · class own ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · tmodf type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · tmodf type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · class own ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · tmodf type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · tmodf type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · class own ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · tmodf type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · tmodf type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · class own ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · tmodf type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · tmodf type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · class own ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · tmodf type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · tmodf type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · class own ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · tmodf type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · tmodf type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · tmodf type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
declstmt -> · class own ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · tmodf type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · tmodf type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · tmodf type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · class own ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · tmodf type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · tmodf type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · tmodf type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · class own ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · tmodf type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · tmodf type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · tmodf type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
declstmt -> · class own ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · tmodf type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · tmodf type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · tmodf type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
declstmt -> · class own ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · tmodf type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · tmodf type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · tmodf type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
declstmt -> · class own ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · tmodf type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · tmodf type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · tmodf type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
declstmt -> · class own ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · tmodf type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · tmodf type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · tmodf type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
declstmt -> · class own ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · tmodf type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · tmodf type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · tmodf type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
declstmt -> · class own ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
tmodf -> · own, ID
tmodf -> · own, void
tmodf -> · own, bool
tmodf -> · own, int
tmodf -> · own, long
tmodf -> · own, float
tmodf -> · own, double
tmodf -> · own, char
tmodf -> · own, string
tmodf -> · own, var
tmodf -> · bor, ID
tmodf -> · bor, void
tmodf -> · bor, bool
tmodf -> · bor, int
tmodf -> · bor, long
tmodf -> · bor, float
tmodf -> · bor, double
tmodf -> · bor, char
tmodf -> · bor, string
tmodf -> · bor, var
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elifclause -> else if ( expr ) · stmt, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · tmodf type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · tmodf type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · tmodf type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · class own ID inherit { declstatements }, }
elifclause -> else if ( expr ) · stmt, &&
elifclause -> else if ( expr ) · stmt, ||
elifclause -> else if ( expr ) · stmt, +
elifclause -> else if ( expr ) · stmt, -
elifclause -> else if ( expr ) · stmt, *
elifclause -> else if ( expr ) · stmt, /
elifclause -> else if ( expr ) · stmt, %
elifclause -> else if ( expr ) · stmt, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · tmodf type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · tmodf type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · tmodf type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · class own ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · tmodf type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · tmodf type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · tmodf type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · class own ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · tmodf type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · tmodf type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · tmodf type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · class own ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · tmodf type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · tmodf type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · tmodf type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · class own ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · tmodf type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · tmodf type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · tmodf type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · class own ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · tmodf type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · tmodf type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · tmodf type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · class own ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · tmodf type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · tmodf type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · tmodf type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · class own ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · tmodf type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · tmodf type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · tmodf type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · class own ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
282
I_1793_1828_1837_1857_1860_1861
***Set***
elifclause -> else if ( expr ) stmt ·, else
elifclause -> else if ( expr ) stmt ·, $
elifclause -> else if ( expr ) stmt ·, namespace
elifclause -> else if ( expr ) stmt ·, {
elifclause -> else if ( expr ) stmt ·, ID
elifclause -> else if ( expr ) stmt ·, void
elifclause -> else if ( expr ) stmt ·, bool
elifclause -> else if ( expr ) stmt ·, int
elifclause -> else if ( expr ) stmt ·, long
elifclause -> else if ( expr ) stmt ·, float
elifclause -> else if ( expr ) stmt ·, double
elifclause -> else if ( expr ) stmt ·, char
elifclause -> else if ( expr ) stmt ·, string
elifclause -> else if ( expr ) stmt ·, var
elifclause -> else if ( expr ) stmt ·, own
elifclause -> else if ( expr ) stmt ·, bor
elifclause -> else if ( expr ) stmt ·, const
elifclause -> else if ( expr ) stmt ·, extern
elifclause -> else if ( expr ) stmt ·, class
elifclause -> else if ( expr ) stmt ·, (
elifclause -> else if ( expr ) stmt ·, this
elifclause -> else if ( expr ) stmt ·, new
elifclause -> else if ( expr ) stmt ·, LITBOOL
elifclause -> else if ( expr ) stmt ·, LITINT
elifclause -> else if ( expr ) stmt ·, LITLONG
elifclause -> else if ( expr ) stmt ·, LITFLOAT
elifclause -> else if ( expr ) stmt ·, LITDOUBLE
elifclause -> else if ( expr ) stmt ·, LITCHAR
elifclause -> else if ( expr ) stmt ·, LITSTRING
elifclause -> else if ( expr ) stmt ·, null
elifclause -> else if ( expr ) stmt ·, ++
elifclause -> else if ( expr ) stmt ·, --
elifclause -> else if ( expr ) stmt ·, break
elifclause -> else if ( expr ) stmt ·, return
elifclause -> else if ( expr ) stmt ·, delete
elifclause -> else if ( expr ) stmt ·, while
elifclause -> else if ( expr ) stmt ·, for
elifclause -> else if ( expr ) stmt ·, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, long
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, var
stmt -> if ( expr ) stmt · elifclauselist elseclause, own
stmt -> if ( expr ) stmt · elifclauselist elseclause, bor
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITLONG
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, long
elifclauselist -> · elifclauselist elifclause, long
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, var
elifclauselist -> · elifclauselist elifclause, var
elifclauselist -> ·, own
elifclauselist -> · elifclauselist elifclause, own
elifclauselist -> ·, bor
elifclauselist -> · elifclauselist elifclause, bor
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITLONG
elifclauselist -> · elifclauselist elifclause, LITLONG
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
elifclause -> else if ( expr ) stmt ·, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
elifclause -> else if ( expr ) stmt ·, &&
elifclause -> else if ( expr ) stmt ·, ||
elifclause -> else if ( expr ) stmt ·, +
elifclause -> else if ( expr ) stmt ·, -
elifclause -> else if ( expr ) stmt ·, *
elifclause -> else if ( expr ) stmt ·, /
elifclause -> else if ( expr ) stmt ·, %
elifclause -> else if ( expr ) stmt ·, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***Table***
ACTION_TABLE
0
r4,r4,r4,r4,r4,,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,,,r4,r4,r4,r4,r4,,r4,r4,r4,r4,,,,r4,,,,,,,,r4,r4,,,,,,,,,,,,,,,,,,r4,r4,r4,r4,r4,r4,r4,r4,r4
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s5,,,,,,,,,,,,,,,,,,,,
2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,acc
3
s1,r8,r8,r8,r8,,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,,,r8,r8,r8,r8,r8,,r8,r8,r8,r8,,,,r8,,,,,,,,r8,r8,,,,,,,,,,,,,,,,,,r8,r8,r8,r8,r8,r8,r8,r8,r8
4
r3,r3,r3,r3,r3,,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,,,r3,r3,r3,r3,r3,,r3,r3,r3,r3,,,,r3,,,,,,,,r3,r3,,,,,,,,,,,,,,,,,,r3,r3,r3,r3,r3,r3,r3,r3,r3
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s10,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s11,
7
r2,r2,r2,r2,r2,,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,,,r2,r2,r2,r2,r2,,r2,r2,r2,r2,,,,r2,,,,,,,,r2,r2,,,,,,,,,,,,,,,,,,r2,r2,r2,r2,r2,r2,r2,r2,r2
8
,s6,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,r12
9
,r7,r7,r7,r7,,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,,,r7,r7,r7,r7,r7,,r7,r7,r7,r7,,,,r7,,,,,,,,r7,r7,,,,,,,,,,,,,,,,,,r7,r7,r7,r7,r7,r7,r7,r7,r7
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s73,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,,,,,s74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
13
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
14
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
15
,,,,,,,,r39,,r39,r39,r39,r39,r39,r39,r39,r39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r39,
16
,,,,,,,,r40,,r40,r40,r40,r40,r40,r40,r40,r40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r40,
17
,,,,,r57,,,,,,,,,,,,,,,,,,,,,,,,,,r57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r57,
18
,,,,,,s80,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s81,
19
,,,,,r61,,,,,,,,,,,,,,,,,,,,,,,,,,r61,r61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r61,
20
,,,,,r62,,,,,,,,,,,,,,,,,,,,,,,,,,r62,r62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r62,
21
,,,,,r63,,,,,,,,,,,,,,,,,,,,,,,,,,r63,r63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r63,
22
,,,,,r64,,,,,,,,,,,,,,,,,,,,,,,,,,r64,r64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r64,
23
,,,,,r65,,,,,,,,,,,,,,,,,,,,,,,,,,r65,r65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r65,
24
,,,,,r66,,,,,,,,,,,,,,,,,,,,,,,,,,r66,r66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r66,
25
,,,,,r67,,,,,,,,,,,,,,,,,,,,,,,,,,r67,r67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r67,
26
,,,,,r68,,,,,,,,,,,,,,,,,,,,,,,,,,r68,r68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r68,
27
,,,,,,,,,,,,,,,,,,,r126,r126,,,,,,,,,,,r126,,r126,,,,,,,,,,,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,,,,r126,,,,,,,,,
28
,,,,,,,,,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s82,
29
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
30
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33
,,,,,,,,,,,,,,,,,,,,s105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34
,,,,,,,,,,,,,,,,,,s27,,s106,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
35
,,,,,,,,,,,,,,,,,,,r100,r100,,,,,,,,,,,r100,,r100,,,,,,,,,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,,,r100,,,,,,,,,
36
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
37
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
38
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s110,
39
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s111,
40
,,,,,,,,,,,,,,,,,,,r119,r119,,,,,,,,,,,r119,,r119,,,,,,,,,,,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,,,,r119,,,,,,,,,
41
,,,,,,,,,,,,,,,,,,,r120,r120,,,,,,,,,,,r120,,r120,,,,,,,,,,,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,,,,r120,,,,,,,,,
42
,,,,,,,,,,,,,,,,,,,r121,r121,,,,,,,,,,,r121,,r121,,,,,,,,,,,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,,,,r121,,,,,,,,,
43
,,,,,,,,,,,,,,,,,,,r122,r122,,,,,,,,,,,r122,,r122,,,,,,,,,,,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,,,,r122,,,,,,,,,
44
,,,,,,,,,,,,,,,,,,,r123,r123,,,,,,,,,,,r123,,r123,,,,,,,,,,,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,,,,r123,,,,,,,,,
45
,,,,,,,,,,,,,,,,,,,r124,r124,,,,,,,,,,,r124,,r124,,,,,,,,,,,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,,,,r124,,,,,,,,,
46
,,,,,,,,,,,,,,,,,,,r125,r125,,,,,,,,,,,r125,,r125,,,,,,,,,,,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,,,,r125,,,,,,,,,
47
,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,s112,r60,s113,,,,r52,r52,r52,r52,r52,r52,s114,s115,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,,,r99,,,,,,,,r60,
48
,r6,r6,r6,r6,,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,,,r6,r6,r6,r6,r6,,r6,r6,r6,r6,,,,r6,,,,,,,,r6,r6,,,,,,,,,,,,,,,,,,r6,r6,r6,r6,r6,r6,r6,r6,r6
49
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,r1
50
,,r18,r18,r18,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,,,,,,,r18,r18,,,,,,,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,r18,r18,r18,r18,r18,r18,r18
51
,,r19,r19,r19,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,,,,,,,r19,r19,,,,,,,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,r19,r19,r19,r19,r19,r19,r19
52
,,r11,r11,r11,,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,,,r11,r11,r11,r11,r11,,r11,r11,r11,r11,,,,r11,r11,,,,,,,r11,r11,,,,,,,,,,,,,,,,,,r11,r11,r11,r11,r11,r11,r11,r11,r11
53
,,r20,r20,r20,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,,,,,,,r20,r20,,,,,,,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,r20,r20,r20,r20,r20,r20,r20
54
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
55
,,,,,,,,,,,,,,,,,,,,s118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
56
,,,,,,,,,,,,,,,,,,,,r71,,,,,,,,,,,r71,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
57
,,,,,,,,,,,,,,,,,,,,r72,,,,,,,,,,,r72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r103,,,,,,,,,
58
,,,,,,,,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,,,,r54,r54,r54,r54,r54,r54,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,,,r102,,,,,,,,,
59
,,,,,,,,,,,,,,,,,,,,r74,,,,,,,,,,,r74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r104,,,,,,,,,
60
,,,,,,,,,,,,,,,,,,,r105,r105,,,,,,,,,,,r105,,r105,,,,,,,,,,,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,,,,r105,,,,,,,,,
61
,,,,,,,,,,,,,,,,,,,,r73,,,,,,,,,,,r73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
62
,,,,,s119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s120,
63
,,,,,r56,,,,,,,,,,,,,,,,,,,,,,,,,,r56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,
64
,,,,,r55,,,,,,,,,,,,,,,,,,,,,,,,,,r55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,
65
,,,,,r59,,,,,,,,,,,,,,,,,,,,,,,,,,r59,s121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r59,
66
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s122,,,,,,,,,
67
,,,,,,,,,,,,,,,,,,,r106,r106,,,,,,,,,,,r106,,r106,,,,,,,,,,,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,,,,r106,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s123,s124,s125,s126,s127,s128,,,,,,,,,,,,,,,,,,,,,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,r101,r101,,,,,,,,,,s129,r101,s130,,,,r53,r53,r53,r53,r53,r53,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,,,r101,,,,,,,,,
70
,,,,,r58,,,,,,,,,,,,,,,,,,,,,,,,,,r58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r58,
71
,,,,,r135,,,,,,,,,,,,,,,,,,,,,,,,,,r135,,,,,r113,r113,r113,r113,r113,r113,,,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,,,,r113,,,,,,,,r135,
72
,,,,,r136,,,,,,,,,,,,,,r136,r136,,,,,,,,,,,r136,,r136,,,,,,,,,,,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,,,,r136,,,,,,,,r136,
73
r5,r5,r5,r5,r5,,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,,,r5,r5,r5,r5,r5,,r5,r5,r5,r5,,,,r5,,,,,,,,r5,r5,,,,,,,,,,,,,,,,,,r5,r5,r5,r5,r5,r5,r5,r5,r5
74
,r9,r9,r9,r9,,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,,,r9,r9,r9,r9,r9,,r9,r9,r9,r9,,,,r9,,,,,,,,r9,r9,,,,,,,,,,,,,,,,,,r9,r9,r9,r9,r9,r9,r9,r9,r9
75
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,,,s113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r60,
77
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s132,
78
,,,,,r135,,,,,,,,,,,,,,r135,r135,,,,,,,,,,,r135,,r135,,,,,,,,,,,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,,,,r135,,,,,,,,r135,
79
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s133,
80
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s134,
81
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r142,,,,,,,,,,,,,,,,,,,,,,,,s135,,,,,,,,,,,
82
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s137,,s113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
84
,,,,,,,,,,,,,,,,,,,r116,r116,,,,,,,,,,,r116,,r116,,,,,,,,,,,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,,,,r116,,,,,,,,,
85
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s47,
86
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
87
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
88
,,,,,,,,,,,,,,,,,,,r99,r99,,,,,,,,,,s112,r99,s113,,,,r52,r52,r52,r52,r52,r52,s114,s115,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,,,r99,,,,,,,,,
89
,,,,,,,,,,,,,,,,,,,r69,r69,,,,,,,,,,,r69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
90
,,,,,,,,,,,,,,,,,,,r103,r103,,,,,,,,,,,r103,,r103,,,,,,,,,,,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,,,,r103,,,,,,,,,
91
,,,,,,,,,,,,,,,,,,,r104,r104,,,,,,,,,,,r104,,r104,,,,,,,,,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,,,r104,,,,,,,,,
92
,,,,,,,,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,r93,,,,,,,,,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,,,,,,,,,,,,
93
,,,,,,,,,,,,,,,,,,,,s144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
94
,,,,,,,,,,,,,,,,,,,r70,r70,,,,,,,,,,,r70,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,r75,r75,,,,,,,,,,,r75,,,,,,,,,,,,,,,,,,,,,,,,s145,s146,,,,,,,,,,,,,
96
,,,,,,,,,,,,,,,,,,,r76,r76,,,,,,,,,,,r76,,,,,,,,,,,,,s147,s148,s149,s150,s151,s152,s153,s154,,,,,,,,,,,,,,,,,,
97
,,,,,,,,,,,,,,,,,,,r88,r88,,,,,,,,,,,r88,,r88,,,,,,,,,,,r88,r88,r88,r88,r88,r88,r88,r88,s155,s156,s157,r88,r88,,,,,,,,,,,,,
98
,,,,,,,,,,,,,,,,,,,r85,r85,,,,,,,,,,,r85,,,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r85,r85,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,r97,r97,,,,,,,,,,,r97,,r97,,,,,,,,,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,,,s122,,,,,,,,,
100
,,,,,,,,,,,,,,,,,,,r96,r96,,,,,,,,,,,r96,,r96,,,,,,,,,,,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,,,,,,,,,,,,,
101
,,,,,,,,,,,,,,,,,,,r113,r113,,,,,,,,,,,r113,,r113,,,r113,r113,r113,r113,r113,r113,,,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,,,,r113,,,,,,,,,
102
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
103
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
104
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
105
,,r22,r22,r22,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,,,,,,,r22,r22,,,,,,,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,r22,r22,r22,r22,r22,r22,r22
106
,,r24,r24,r24,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,,,,,,,r24,r24,,,,,,,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,r24,r24,r24,r24,r24,r24,r24
107
,,,,,,,,,,,,,,,,,,,,s161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
108
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
109
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s163,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
110
,,,,,,,,,,,,,,,,,,,r108,r108,,,,,,,,,,,r108,,r108,,,,,,,,,,,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,,,,,,,,,,,,,
111
,,,,,,,,,,,,,,,,,,,r107,r107,,,,,,,,,,,r107,,r107,,,,,,,,,,,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,,,,,,,,,,,,,
112
,,,,,,,,,,,,,,,,,,s27,r132,,s28,,,,,,,,s35,s85,r132,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
113
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,r140,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
114
,,,,,,,,,,,,,,,,,,,r110,r110,,,,,,,,,,,r110,,r110,,,,,,,,,,,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,,,,,,,,,,,,,
115
,,,,,,,,,,,,,,,,,,,r109,r109,,,,,,,,,,,r109,,r109,,,,,,,,,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,,,,,,,,,,,,
116
,,r10,r10,r10,,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,,,r10,r10,r10,r10,r10,,r10,r10,r10,r10,,,,r10,r10,,,,,,,r10,r10,,,,,,,,,,,,,,,,,,r10,r10,r10,r10,r10,r10,r10,r10,r10
117
,,,,,s169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s170,
118
,,r21,r21,r21,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,,,,,,,r21,r21,,,,,,,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,r21,r21,r21,r21,r21,r21,r21
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s171,
120
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s172,,,,,,s173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
121
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,r140,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
122
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s175,
123
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
124
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
125
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
126
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
127
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
128
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
129
,,,,,,,,,,,,,,,,,,s27,r132,,s28,,,,,,,,s35,s85,r132,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
130
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
131
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
132
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
134
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r142,,,,,,,,,,,,,,,,,,,,,,,,s135,,,,,,,,,,,
135
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s188,
136
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
137
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
138
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
139
,,,,,,,,,,,,,,,,,,,r99,r99,,,,,,,,,,s112,r99,s113,r99,,,,,,,,,s114,s115,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,,,r99,,,,,,,,,
140
,,,,,,,,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,r102,,,,,,,,,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,,,r102,,,,,,,,,
141
,,,,,,,,,,,,,,,,,,,r95,r95,,,,,,,,,,,r95,,r95,,,,,,,,,,,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,,,,,,,,,,,,
142
,,,,,,,,,,,,,,,,,,,r101,r101,,,,,,,,,,s129,r101,s130,r101,,,,,,,,,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,,,r101,,,,,,,,,
143
,,,,,,,,,,,,,,,,,,,r94,r94,,,,,,,,,,,r94,,r94,,,,,,,,,,,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,,,,,,,,,,,,,
144
,,r25,r25,r25,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,,,,,,,r25,r25,,,,,,,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,r25,r25,r25,r25,r25,r25,r25
145
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
146
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
147
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
148
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
149
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
150
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
151
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
152
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
153
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
154
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
155
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
156
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
157
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
160
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
161
,,r23,r23,r23,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,,,,,,,r23,r23,,,,,,,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,r23,r23,r23,r23,r23,r23,r23
162
,,,,,,,,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,r98,,,,,,,,,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,,,r98,,,,,,,,,
163
,,r14,r14,r14,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,,,,,,,r14,r14,,,,,,,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,r14,r14,r14,r14,r14,r14,r14
164
,,,,,,,,,,,,,,,,,,,r133,,,,,,,,,,,,r133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,,,,,,s209,,,,,,,,,,,,s210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r139,,,,,,,,,,,,,,,,,s153,s154,,,,,,,,,,,,,,,,,,
167
,,,,,,,,,,,,,,,,,,,r92,r92,,,,,,,,,,,r92,,r92,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,,,,,,,,,,,,
168
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s212,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s213,,,,,,s214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
171
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
172
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
173
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
175
,,,,,,,,,,,,,,,,,,,r118,r118,,,,,,,,,,r118,r118,r118,r118,,,r118,r118,r118,r118,r118,r118,,,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,,,,r118,,,,,,,,,
176
,,,,,,,,,,,,,,,,,,,r46,r46,,,,,,,,,,,r46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
177
,,,,,,,,,,,,,,,,,,,r47,r47,,,,,,,,,,,r47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
178
,,,,,,,,,,,,,,,,,,,r48,r48,,,,,,,,,,,r48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,r49,r49,,,,,,,,,,,r49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,,,,,r50,r50,,,,,,,,,,,r50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,,,,,r51,r51,,,,,,,,,,,r51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,,,,,,,,,,,,,,,,,,s209,,,,,,,,,,,,s221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
183
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s222,,,,,,,,,,,,,,,,,s153,s154,,,,,,,,,,,,,,,,,,
184
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s223,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
185
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
186
,,,,,,,,,,,,,,,,,,s27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,,
187
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
188
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
189
,,,r17,r17,,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
190
,,,,,,,,,,,,,,,,,,,r115,r115,,,,,,,,,,,r115,,r115,,,,,,,,,,,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,,,,r115,,,,,,,,,
191
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
192
,,,,,,,,,,,,,,,,,,,r78,r78,,,,,,,,,,,r78,,,,,,,,,,,,,,,,,,,,,,,,r78,r78,,,,,,,,,,,,,
193
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s147,s148,s149,s150,s151,s152,s153,s154,,,,,,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,,,,,r77,r77,,,,,,,,,,,r77,,,,,,,,,,,,,,,,,,,,,,,,r77,r77,,,,,,,,,,,,,
195
,,,,,,,,,,,,,,,,,,,r83,r83,,,,,,,,,,,r83,,,,,,,,,,,,,,,,,,,s153,s154,,,,r83,r83,,,,,,,,,,,,,
196
,,,,,,,,,,,,,,,,,,,r84,r84,,,,,,,,,,,r84,,,,,,,,,,,,,,,,,,,s153,s154,,,,r84,r84,,,,,,,,,,,,,
197
,,,,,,,,,,,,,,,,,,,r82,r82,,,,,,,,,,,r82,,,,,,,,,,,,,,,,,,,s153,s154,,,,r82,r82,,,,,,,,,,,,,
198
,,,,,,,,,,,,,,,,,,,r81,r81,,,,,,,,,,,r81,,,,,,,,,,,,,,,,,,,s153,s154,,,,r81,r81,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,,,,,,r79,r79,,,,,,,,,,,r79,,,,,,,,,,,,,,,,,,,s153,s154,,,,r79,r79,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,,,,r80,r80,,,,,,,,,,,r80,,,,,,,,,,,,,,,,,,,s153,s154,,,,r80,r80,,,,,,,,,,,,,
201
,,,,,,,,,,,,,,,,,,,r86,r86,,,,,,,,,,,r86,,r86,,,,,,,,,,,r86,r86,r86,r86,r86,r86,r86,r86,s155,s156,s157,r86,r86,,,,,,,,,,,,,
202
,,,,,,,,,,,,,,,,,,,r87,r87,,,,,,,,,,,r87,,r87,,,,,,,,,,,r87,r87,r87,r87,r87,r87,r87,r87,s155,s156,s157,r87,r87,,,,,,,,,,,,,
203
,,,,,,,,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,r89,,,,,,,,,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,,,,,,,,,,,,
204
,,,,,,,,,,,,,,,,,,,r90,r90,,,,,,,,,,,r90,,r90,,,,,,,,,,,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,,,,,,,,,,,,
205
,,,,,,,,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,r91,,,,,,,,,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,,,,,,,,,,,,
206
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
207
,,,,,,,,,,,,,,,,,,,,s231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s145,s146,,,,,,,,,,,,,
208
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
209
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
210
,,,,,,,,,,,,,,,,,,,r111,r111,,,,,,,,,,,r111,,r111,,,,,,,,,,,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,,,,r111,,,,,,,,,
211
,,,,,r137,,,,,,,,,,,,,,r137,r137,,,,,,,,,,,r137,,r137,,,r137,r137,r137,r137,r137,r137,,,r137,r137,r137,r137,r137,r137,r137,r137,r137,r137,r137,r137,r137,,,,r137,,,,,,,,r137,
212
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
213
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
214
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
215
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
216
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
217
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s239,
218
,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,s241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
219
,,,,,,,,,,,,,,,,,,,,s242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
220
,,,,,r138,,,,,,,,,,,,,,r138,r138,,,,,,,,,,,r138,,r138,,,,,,,,,,,r138,r138,r138,r138,r138,r138,r138,r138,r138,r138,r138,r138,r138,,,,r138,,,,,,,,r138,
221
,,,,,,,,,,,,,,,,,,,r112,r112,,,,,,,,,,,r112,,r112,,,,,,,,,,,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,,,,r112,,,,,,,,,
222
,,,,,,,,,,,,,,,,,,,r114,r114,,,,,,,,,,,r114,,r114,,,r114,r114,r114,r114,r114,r114,,,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,,,,r114,,,,,,,,,
223
,,r13,r13,r13,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,,,,,,,r13,r13,,,,,,,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,r13,r13,r13,r13,r13,r13,r13
224
,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,s243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
225
,,,,,,,,,,,,,,,,,,,,s244,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
226
,,,r17,r17,,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
227
,,,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,s246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
228
,,,r16,r16,,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,,,,,,,,,,,,,,,,,,r16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r16,
229
,,,,,,,,,,,,,,,,,,,r117,r117,,,,,,,,,,,r117,,r117,,,,,,,,,,,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,,,,,,,,,,,,,
230
,,r26,r26,r26,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,,,,,,,r26,r26,,,,,,,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,r26,r26,r26,r26,r26,r26,r26
231
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s36,,,,,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s88,
232
,,r41,r41,r41,,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,,,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,,,,r41,r41,,,,,,,r41,r41,,,,,,,r41,r41,r41,r41,r41,r41,r41,r41,,,,r41,r41,r41,r41,r41,r41,r41,r41,r41
233
,,,,,,,,,,,,,,,,,,,r134,,,,,,,,,,,,r134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
234
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
235
,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,s251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
236
,,,,,,,,,,,,,,,,,,,,s252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
237
,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,s253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
238
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s254,
239
,,,,,,,,,,,,,,,,,,,r128,,,,,,,,,,,,r128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
240
,,,,,,s15,s16,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
241
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
242
,,r29,r29,r29,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,,,,,,,r29,r29,,,,,,,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,r29,r29,r29,r29,r29,r29,r29
243
,,,,,,,,,,,,,,,,,,,,s258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
244
,,r31,r31,r31,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,,,,,,,r31,r31,,,,,,,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,r31,r31,r31,r31,r31,r31,r31
245
,,,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,s259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
246
,,r37,r37,r37,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,,,,,,,r37,r37,,,,,,,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,r37,r37,r37,r37,r37,r37,r37
247
,,,r15,r15,,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,,,,,,,,,,,,,,,,,,r15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r15,
248
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s260,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
249
,,r44,r44,r44,,r44,r44,r44,r44,r44,r44,r44,r44,r44,r44,r44,r44,r44,,,r44,r44,r44,r44,r44,s261,r44,r44,r44,r44,,,,r44,r44,,,,,,,r44,r44,,,,,,,r44,r44,r44,r44,r44,r44,r44,r44,,,,r44,r44,r44,r44,r44,r44,r44,r44,r44
250
,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,s264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
251
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s265,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
252
,,r30,r30,r30,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,,,,,,,r30,r30,,,,,,,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,r30,r30,r30,r30,r30,r30,r30
253
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
254
,,,,,,,,,,,,,,,,,,,r129,,,,,,,,,,,,r129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
255
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s76,
256
,,,,,,,,,,,,,,,,,,,r130,,,,,,,,,,,,r130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s256,
257
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
258
,,r36,r36,r36,,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,,,,,,,r36,r36,,,,,,,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,r36,r36,r36,r36,r36,r36,r36
259
,,r38,r38,r38,,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,,,,,,,r38,r38,,,,,,,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,r38,r38,r38,r38,r38,r38,r38
260
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
261
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s269,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
262
,,r42,r42,r42,,r42,r42,r42,r42,r42,r42,r42,r42,r42,r42,r42,r42,r42,,,r42,r42,r42,r42,r42,r42,r42,r42,r42,r42,,,,r42,r42,,,,,,,r42,r42,,,,,,,r42,r42,r42,r42,r42,r42,r42,r42,,,,r42,r42,r42,r42,r42,r42,r42,r42,r42
263
,,r28,r28,r28,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,,,,,,,r28,r28,,,,,,,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,r28,r28,r28,r28,r28,r28,r28
264
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
265
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
266
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
267
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s274,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
268
,,r27,r27,r27,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,,,,,,,r27,r27,,,,,,,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,r27,r27,r27,r27,r27,r27,r27
269
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
270
,,r45,r45,r45,,r45,r45,r45,r45,r45,r45,r45,r45,r45,r45,r45,r45,r45,,,r45,r45,r45,r45,r45,r45,r45,r45,r45,r45,,,,r45,r45,,,,,,,r45,r45,,,,,,,r45,r45,r45,r45,r45,r45,r45,r45,,,,r45,r45,r45,r45,r45,r45,r45,r45,r45
271
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
272
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s277,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
273
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s278,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
274
,,r32,r32,r32,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,,,,,,,r32,r32,,,,,,,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,r32,r32,r32,r32,r32,r32,r32
275
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
276
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s280,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
277
,,r33,r33,r33,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,,,,,,,r33,r33,,,,,,,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,r33,r33,r33,r33,r33,r33,r33
278
,,r34,r34,r34,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,,,,,,,r34,r34,,,,,,,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,r34,r34,r34,r34,r34,r34,r34
279
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
280
,,r35,r35,r35,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,,,,,,,r35,r35,,,,,,,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,r35,r35,r35,r35,r35,r35,r35
281
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
282
,,r43,r43,r43,,r43,r43,r43,r43,r43,r43,r43,r43,r43,r43,r43,r43,r43,,,r43,r43,r43,r43,r43,r43,r43,r43,r43,r43,,,,r43,r43,,,,,,,r43,r43,,,,,,,r43,r43,r43,r43,r43,r43,r43,r43,,,,r43,r43,r43,r43,r43,r43,r43,r43,r43
GOTO_TABLE
0
1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3
1,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8
,6,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,48,49,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,,,,,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,77,63,64,65,,,,,,,,,,,,,,70,78,72,,,
14
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,79,63,64,65,,,,,,,,,,,,,,70,78,72,,,
18
,,,,,,80,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,,83,,,,,,,,,,,,,,84,78,72,,,
29
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,93,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
30
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33
,,,,,,,,,,,,,,,,,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34
,,,,,,,,,,,,,,,,,,27,,106,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,107,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
36
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,108,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
37
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,109,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
38
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
47
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
49
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
54
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,117,63,64,65,,,,,,,,,,,,,,70,78,72,,,
55
,,,,,,,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
62
,,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
65
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
66
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,124,125,126,127,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,,130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
75
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
77
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
79
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
80
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
81
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,
82
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
85
,,,,,,,,17,,19,20,21,22,23,24,25,26,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,47,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,138,63,64,65,108,94,95,96,97,98,99,67,100,68,69,,,70,71,72,,,
86
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,141,99,67,100,,142,,,,101,,,,
87
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,143,99,67,100,,142,,,,101,,,,
88
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
93
,,,,,,,,,,,,,,,,,,,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
96
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,147,148,149,150,151,152,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
97
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
102
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,158,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
103
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,159,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
104
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,160,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
107
,,,,,,,,,,,,,,,,,,,,161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
108
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
109
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,163,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
112
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,164,94,95,96,97,98,99,67,100,68,69,,165,,101,,,,
113
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,166,97,167,99,67,100,,142,,,,101,,168,,
117
,,,,,169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
120
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,172,,,,,,173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
121
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,166,97,167,99,67,100,,142,,,,101,,174,,
122
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
123
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,176,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
124
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,177,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
125
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,178,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
126
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,179,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
127
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,180,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
128
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,181,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
129
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,164,94,95,96,97,98,99,67,100,68,69,,182,,101,,,,
130
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,183,97,167,99,67,100,,142,,,,101,,,,
131
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,184,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
132
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
134
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,187,
135
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
136
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
137
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
138
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
139
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
142
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,,130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
145
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,192,193,97,98,99,67,100,,142,,,,101,,,,
146
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,194,193,97,98,99,67,100,,142,,,,101,,,,
147
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,195,97,167,99,67,100,,142,,,,101,,,,
148
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,196,97,167,99,67,100,,142,,,,101,,,,
149
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,197,97,167,99,67,100,,142,,,,101,,,,
150
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,198,97,167,99,67,100,,142,,,,101,,,,
151
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,199,97,167,99,67,100,,142,,,,101,,,,
152
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,200,97,167,99,67,100,,142,,,,101,,,,
153
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,201,167,99,67,100,,142,,,,101,,,,
154
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,202,167,99,67,100,,142,,,,101,,,,
155
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,203,99,67,100,,142,,,,101,,,,
156
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,204,99,67,100,,142,,,,101,,,,
157
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,205,99,67,100,,142,,,,101,,,,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,207,193,97,98,99,67,100,,142,,,,101,,,,
160
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,,,,,,209,,,,,,,,,,,,210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
168
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,213,,,,,,214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
171
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
172
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,216,,,,,,,,,,,217,63,64,65,,,,,,,,,,,,218,,70,78,72,,,
173
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,219,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,,,,,,,,,,,,,,,,,,209,,,,,,,,,,,,221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
183
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,222,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
184
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,223,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
185
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,216,,,,,,,,,,,217,63,64,65,,,,,,,,,,,,224,,70,78,72,,,
186
,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,225,,,,,,,,,,,
187
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
189
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,227,,228,54,,,,,,,,,,,62,63,64,65,,,,,,,,,,,,,,70,78,72,,,
191
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,,90,140,91,60,92,,,,,,,,,,229,99,67,100,,142,,,,101,,,,
192
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
193
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,147,148,149,150,151,152,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
195
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
196
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
197
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
198
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
201
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
202
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
206
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,230,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
207
,,,,,,,,,,,,,,,,,,,,231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
208
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,232,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
209
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,233,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
212
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
213
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,216,,,,,,,,,,,217,63,64,65,,,,,,,,,,,,235,,70,78,72,,,
214
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,236,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
215
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,216,,,,,,,,,,,217,63,64,65,,,,,,,,,,,,237,,70,78,72,,,
216
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,238,63,64,65,,,,,,,,,,,,,,70,78,72,,,
217
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
218
,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
219
,,,,,,,,,,,,,,,,,,,,242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
224
,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
225
,,,,,,,,,,,,,,,,,,,,244,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
226
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,245,,228,54,,,,,,,,,,,62,63,64,65,,,,,,,,,,,,,,70,78,72,,,
227
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,247,54,,,,,,,,,,,62,63,64,65,,,,,,,,,,,,,,70,78,72,,,
231
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,36,,,,,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,248,56,57,58,59,60,61,,,,,,,,,,,66,67,,68,69,,,,101,,,,
232
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
234
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,216,,,,,,,,,,,217,63,64,65,,,,,,,,,,,,250,,70,78,72,,,
235
,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
236
,,,,,,,,,,,,,,,,,,,,252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
237
,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
238
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
240
,,,,,,15,16,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,255,,,,,,,,,,,256,63,64,65,,,,,,,,,,,,,,70,78,72,,,
241
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
243
,,,,,,,,,,,,,,,,,,,,258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
245
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,247,54,,,,,,,,,,,62,63,64,65,,,,,,,,,,,,,,70,78,72,,,
248
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,260,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
249
,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,262,263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
250
,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
251
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,265,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
253
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
255
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,256,63,64,65,,,,,,,,,,,,,,70,78,72,,,
256
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
257
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,267,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
260
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,268,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
261
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,269,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,270,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
264
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
265
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,272,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
266
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,273,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
267
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,274,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
269
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
271
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,276,50,51,,52,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
272
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,277,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
273
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,278,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
275
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,,89,90,58,91,60,92,,,,,279,94,95,96,97,98,99,67,100,68,69,,,,101,,,,
276
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,280,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
279
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
281
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,282,53,54,,,,55,56,57,58,59,60,61,62,63,64,65,,,,,,,66,67,,68,69,,,70,71,72,,,
282
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENDTABLE
