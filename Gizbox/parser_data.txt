***Raw Terminals***
import
using
namespace
extern
const
operator
own
bor
var
class
void
bool
int
long
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITLONG
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
***Raw Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
***Raw Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> own type ID = expr ;
declstmt -> bor type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> type operator ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
type -> var
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> long
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITLONG
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> own type ID
params -> bor type ID
params -> params , type ID
params -> params , own type ID
params -> params , bor type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε



***Data***
***Terminals***
import
using
namespace
extern
const
operator
own
bor
var
class
void
bool
int
long
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITLONG
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
$
***Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
S'
***Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> own type ID = expr ;
declstmt -> bor type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> type operator ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
type -> var
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> long
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITLONG
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> own type ID
params -> bor type ID
params -> params , type ID
params -> params , own type ID
params -> params , bor type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε
S' -> S
***States***
***State***
0
I_0
***Set***
S' -> · S, $
S -> · importations namespaceusings statements, $
importations -> · importations importation, using
importations -> · importations importation, namespace
importations -> · importations importation, {
importations -> · importations importation, ID
importations -> · importations importation, void
importations -> · importations importation, bool
importations -> · importations importation, int
importations -> · importations importation, long
importations -> · importations importation, float
importations -> · importations importation, double
importations -> · importations importation, char
importations -> · importations importation, string
importations -> · importations importation, var
importations -> · importations importation, own
importations -> · importations importation, bor
importations -> · importations importation, const
importations -> · importations importation, extern
importations -> · importations importation, class
importations -> · importations importation, (
importations -> · importations importation, this
importations -> · importations importation, new
importations -> · importations importation, LITBOOL
importations -> · importations importation, LITINT
importations -> · importations importation, LITLONG
importations -> · importations importation, LITFLOAT
importations -> · importations importation, LITDOUBLE
importations -> · importations importation, LITCHAR
importations -> · importations importation, LITSTRING
importations -> · importations importation, null
importations -> · importations importation, ++
importations -> · importations importation, --
importations -> · importations importation, break
importations -> · importations importation, return
importations -> · importations importation, delete
importations -> · importations importation, while
importations -> · importations importation, for
importations -> · importations importation, if
importations -> · importations importation, $
importations -> · importation, using
importations -> · importation, namespace
importations -> · importation, {
importations -> · importation, ID
importations -> · importation, void
importations -> · importation, bool
importations -> · importation, int
importations -> · importation, long
importations -> · importation, float
importations -> · importation, double
importations -> · importation, char
importations -> · importation, string
importations -> · importation, var
importations -> · importation, own
importations -> · importation, bor
importations -> · importation, const
importations -> · importation, extern
importations -> · importation, class
importations -> · importation, (
importations -> · importation, this
importations -> · importation, new
importations -> · importation, LITBOOL
importations -> · importation, LITINT
importations -> · importation, LITLONG
importations -> · importation, LITFLOAT
importations -> · importation, LITDOUBLE
importations -> · importation, LITCHAR
importations -> · importation, LITSTRING
importations -> · importation, null
importations -> · importation, ++
importations -> · importation, --
importations -> · importation, break
importations -> · importation, return
importations -> · importation, delete
importations -> · importation, while
importations -> · importation, for
importations -> · importation, if
importations -> · importation, $
importations -> ·, using
importations -> ·, namespace
importations -> ·, {
importations -> ·, ID
importations -> ·, void
importations -> ·, bool
importations -> ·, int
importations -> ·, long
importations -> ·, float
importations -> ·, double
importations -> ·, char
importations -> ·, string
importations -> ·, var
importations -> ·, own
importations -> ·, bor
importations -> ·, const
importations -> ·, extern
importations -> ·, class
importations -> ·, (
importations -> ·, this
importations -> ·, new
importations -> ·, LITBOOL
importations -> ·, LITINT
importations -> ·, LITLONG
importations -> ·, LITFLOAT
importations -> ·, LITDOUBLE
importations -> ·, LITCHAR
importations -> ·, LITSTRING
importations -> ·, null
importations -> ·, ++
importations -> ·, --
importations -> ·, break
importations -> ·, return
importations -> ·, delete
importations -> ·, while
importations -> ·, for
importations -> ·, if
importations -> ·, $
importations -> · importations importation, import
importations -> · importation, import
importations -> ·, import
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, long
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, var
importation -> · import < LITSTRING >, own
importation -> · import < LITSTRING >, bor
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITLONG
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
***EndSet***
***EndState***
***State***
1
I_1
***Set***
importation -> import · < LITSTRING >, using
importation -> import · < LITSTRING >, namespace
importation -> import · < LITSTRING >, {
importation -> import · < LITSTRING >, ID
importation -> import · < LITSTRING >, void
importation -> import · < LITSTRING >, bool
importation -> import · < LITSTRING >, int
importation -> import · < LITSTRING >, long
importation -> import · < LITSTRING >, float
importation -> import · < LITSTRING >, double
importation -> import · < LITSTRING >, char
importation -> import · < LITSTRING >, string
importation -> import · < LITSTRING >, var
importation -> import · < LITSTRING >, own
importation -> import · < LITSTRING >, bor
importation -> import · < LITSTRING >, const
importation -> import · < LITSTRING >, extern
importation -> import · < LITSTRING >, class
importation -> import · < LITSTRING >, (
importation -> import · < LITSTRING >, this
importation -> import · < LITSTRING >, new
importation -> import · < LITSTRING >, LITBOOL
importation -> import · < LITSTRING >, LITINT
importation -> import · < LITSTRING >, LITLONG
importation -> import · < LITSTRING >, LITFLOAT
importation -> import · < LITSTRING >, LITDOUBLE
importation -> import · < LITSTRING >, LITCHAR
importation -> import · < LITSTRING >, LITSTRING
importation -> import · < LITSTRING >, null
importation -> import · < LITSTRING >, ++
importation -> import · < LITSTRING >, --
importation -> import · < LITSTRING >, break
importation -> import · < LITSTRING >, return
importation -> import · < LITSTRING >, delete
importation -> import · < LITSTRING >, while
importation -> import · < LITSTRING >, for
importation -> import · < LITSTRING >, if
importation -> import · < LITSTRING >, $
importation -> import · < LITSTRING >, import
***EndSet***
***EndState***
***State***
2
I_2
***Set***
S' -> S ·, $
***EndSet***
***EndState***
***State***
3
I_3
***Set***
S -> importations · namespaceusings statements, $
importations -> importations · importation, using
importations -> importations · importation, namespace
importations -> importations · importation, {
importations -> importations · importation, ID
importations -> importations · importation, void
importations -> importations · importation, bool
importations -> importations · importation, int
importations -> importations · importation, long
importations -> importations · importation, float
importations -> importations · importation, double
importations -> importations · importation, char
importations -> importations · importation, string
importations -> importations · importation, var
importations -> importations · importation, own
importations -> importations · importation, bor
importations -> importations · importation, const
importations -> importations · importation, extern
importations -> importations · importation, class
importations -> importations · importation, (
importations -> importations · importation, this
importations -> importations · importation, new
importations -> importations · importation, LITBOOL
importations -> importations · importation, LITINT
importations -> importations · importation, LITLONG
importations -> importations · importation, LITFLOAT
importations -> importations · importation, LITDOUBLE
importations -> importations · importation, LITCHAR
importations -> importations · importation, LITSTRING
importations -> importations · importation, null
importations -> importations · importation, ++
importations -> importations · importation, --
importations -> importations · importation, break
importations -> importations · importation, return
importations -> importations · importation, delete
importations -> importations · importation, while
importations -> importations · importation, for
importations -> importations · importation, if
importations -> importations · importation, $
importations -> importations · importation, import
namespaceusings -> · namespaceusings namespaceusing, namespace
namespaceusings -> · namespaceusings namespaceusing, {
namespaceusings -> · namespaceusings namespaceusing, ID
namespaceusings -> · namespaceusings namespaceusing, void
namespaceusings -> · namespaceusings namespaceusing, bool
namespaceusings -> · namespaceusings namespaceusing, int
namespaceusings -> · namespaceusings namespaceusing, long
namespaceusings -> · namespaceusings namespaceusing, float
namespaceusings -> · namespaceusings namespaceusing, double
namespaceusings -> · namespaceusings namespaceusing, char
namespaceusings -> · namespaceusings namespaceusing, string
namespaceusings -> · namespaceusings namespaceusing, var
namespaceusings -> · namespaceusings namespaceusing, own
namespaceusings -> · namespaceusings namespaceusing, bor
namespaceusings -> · namespaceusings namespaceusing, const
namespaceusings -> · namespaceusings namespaceusing, extern
namespaceusings -> · namespaceusings namespaceusing, class
namespaceusings -> · namespaceusings namespaceusing, (
namespaceusings -> · namespaceusings namespaceusing, this
namespaceusings -> · namespaceusings namespaceusing, new
namespaceusings -> · namespaceusings namespaceusing, LITBOOL
namespaceusings -> · namespaceusings namespaceusing, LITINT
namespaceusings -> · namespaceusings namespaceusing, LITLONG
namespaceusings -> · namespaceusings namespaceusing, LITFLOAT
namespaceusings -> · namespaceusings namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusings namespaceusing, LITCHAR
namespaceusings -> · namespaceusings namespaceusing, LITSTRING
namespaceusings -> · namespaceusings namespaceusing, null
namespaceusings -> · namespaceusings namespaceusing, ++
namespaceusings -> · namespaceusings namespaceusing, --
namespaceusings -> · namespaceusings namespaceusing, break
namespaceusings -> · namespaceusings namespaceusing, return
namespaceusings -> · namespaceusings namespaceusing, delete
namespaceusings -> · namespaceusings namespaceusing, while
namespaceusings -> · namespaceusings namespaceusing, for
namespaceusings -> · namespaceusings namespaceusing, if
namespaceusings -> · namespaceusings namespaceusing, $
namespaceusings -> · namespaceusing, namespace
namespaceusings -> · namespaceusing, {
namespaceusings -> · namespaceusing, ID
namespaceusings -> · namespaceusing, void
namespaceusings -> · namespaceusing, bool
namespaceusings -> · namespaceusing, int
namespaceusings -> · namespaceusing, long
namespaceusings -> · namespaceusing, float
namespaceusings -> · namespaceusing, double
namespaceusings -> · namespaceusing, char
namespaceusings -> · namespaceusing, string
namespaceusings -> · namespaceusing, var
namespaceusings -> · namespaceusing, own
namespaceusings -> · namespaceusing, bor
namespaceusings -> · namespaceusing, const
namespaceusings -> · namespaceusing, extern
namespaceusings -> · namespaceusing, class
namespaceusings -> · namespaceusing, (
namespaceusings -> · namespaceusing, this
namespaceusings -> · namespaceusing, new
namespaceusings -> · namespaceusing, LITBOOL
namespaceusings -> · namespaceusing, LITINT
namespaceusings -> · namespaceusing, LITLONG
namespaceusings -> · namespaceusing, LITFLOAT
namespaceusings -> · namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusing, LITCHAR
namespaceusings -> · namespaceusing, LITSTRING
namespaceusings -> · namespaceusing, null
namespaceusings -> · namespaceusing, ++
namespaceusings -> · namespaceusing, --
namespaceusings -> · namespaceusing, break
namespaceusings -> · namespaceusing, return
namespaceusings -> · namespaceusing, delete
namespaceusings -> · namespaceusing, while
namespaceusings -> · namespaceusing, for
namespaceusings -> · namespaceusing, if
namespaceusings -> · namespaceusing, $
namespaceusings -> ·, namespace
namespaceusings -> ·, {
namespaceusings -> ·, ID
namespaceusings -> ·, void
namespaceusings -> ·, bool
namespaceusings -> ·, int
namespaceusings -> ·, long
namespaceusings -> ·, float
namespaceusings -> ·, double
namespaceusings -> ·, char
namespaceusings -> ·, string
namespaceusings -> ·, var
namespaceusings -> ·, own
namespaceusings -> ·, bor
namespaceusings -> ·, const
namespaceusings -> ·, extern
namespaceusings -> ·, class
namespaceusings -> ·, (
namespaceusings -> ·, this
namespaceusings -> ·, new
namespaceusings -> ·, LITBOOL
namespaceusings -> ·, LITINT
namespaceusings -> ·, LITLONG
namespaceusings -> ·, LITFLOAT
namespaceusings -> ·, LITDOUBLE
namespaceusings -> ·, LITCHAR
namespaceusings -> ·, LITSTRING
namespaceusings -> ·, null
namespaceusings -> ·, ++
namespaceusings -> ·, --
namespaceusings -> ·, break
namespaceusings -> ·, return
namespaceusings -> ·, delete
namespaceusings -> ·, while
namespaceusings -> ·, for
namespaceusings -> ·, if
namespaceusings -> ·, $
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, long
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, var
importation -> · import < LITSTRING >, own
importation -> · import < LITSTRING >, bor
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITLONG
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
namespaceusings -> · namespaceusings namespaceusing, using
namespaceusings -> · namespaceusing, using
namespaceusings -> ·, using
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, long
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, var
namespaceusing -> · using ID ;, own
namespaceusing -> · using ID ;, bor
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITLONG
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
***EndSet***
***EndState***
***State***
4
I_4
***Set***
importations -> importation ·, using
importations -> importation ·, namespace
importations -> importation ·, {
importations -> importation ·, ID
importations -> importation ·, void
importations -> importation ·, bool
importations -> importation ·, int
importations -> importation ·, long
importations -> importation ·, float
importations -> importation ·, double
importations -> importation ·, char
importations -> importation ·, string
importations -> importation ·, var
importations -> importation ·, own
importations -> importation ·, bor
importations -> importation ·, const
importations -> importation ·, extern
importations -> importation ·, class
importations -> importation ·, (
importations -> importation ·, this
importations -> importation ·, new
importations -> importation ·, LITBOOL
importations -> importation ·, LITINT
importations -> importation ·, LITLONG
importations -> importation ·, LITFLOAT
importations -> importation ·, LITDOUBLE
importations -> importation ·, LITCHAR
importations -> importation ·, LITSTRING
importations -> importation ·, null
importations -> importation ·, ++
importations -> importation ·, --
importations -> importation ·, break
importations -> importation ·, return
importations -> importation ·, delete
importations -> importation ·, while
importations -> importation ·, for
importations -> importation ·, if
importations -> importation ·, $
importations -> importation ·, import
***EndSet***
***EndState***
***State***
5
I_5
***Set***
importation -> import < · LITSTRING >, using
importation -> import < · LITSTRING >, namespace
importation -> import < · LITSTRING >, {
importation -> import < · LITSTRING >, ID
importation -> import < · LITSTRING >, void
importation -> import < · LITSTRING >, bool
importation -> import < · LITSTRING >, int
importation -> import < · LITSTRING >, long
importation -> import < · LITSTRING >, float
importation -> import < · LITSTRING >, double
importation -> import < · LITSTRING >, char
importation -> import < · LITSTRING >, string
importation -> import < · LITSTRING >, var
importation -> import < · LITSTRING >, own
importation -> import < · LITSTRING >, bor
importation -> import < · LITSTRING >, const
importation -> import < · LITSTRING >, extern
importation -> import < · LITSTRING >, class
importation -> import < · LITSTRING >, (
importation -> import < · LITSTRING >, this
importation -> import < · LITSTRING >, new
importation -> import < · LITSTRING >, LITBOOL
importation -> import < · LITSTRING >, LITINT
importation -> import < · LITSTRING >, LITLONG
importation -> import < · LITSTRING >, LITFLOAT
importation -> import < · LITSTRING >, LITDOUBLE
importation -> import < · LITSTRING >, LITCHAR
importation -> import < · LITSTRING >, LITSTRING
importation -> import < · LITSTRING >, null
importation -> import < · LITSTRING >, ++
importation -> import < · LITSTRING >, --
importation -> import < · LITSTRING >, break
importation -> import < · LITSTRING >, return
importation -> import < · LITSTRING >, delete
importation -> import < · LITSTRING >, while
importation -> import < · LITSTRING >, for
importation -> import < · LITSTRING >, if
importation -> import < · LITSTRING >, $
importation -> import < · LITSTRING >, import
***EndSet***
***EndState***
***State***
6
I_6
***Set***
namespaceusing -> using · ID ;, namespace
namespaceusing -> using · ID ;, {
namespaceusing -> using · ID ;, ID
namespaceusing -> using · ID ;, void
namespaceusing -> using · ID ;, bool
namespaceusing -> using · ID ;, int
namespaceusing -> using · ID ;, long
namespaceusing -> using · ID ;, float
namespaceusing -> using · ID ;, double
namespaceusing -> using · ID ;, char
namespaceusing -> using · ID ;, string
namespaceusing -> using · ID ;, var
namespaceusing -> using · ID ;, own
namespaceusing -> using · ID ;, bor
namespaceusing -> using · ID ;, const
namespaceusing -> using · ID ;, extern
namespaceusing -> using · ID ;, class
namespaceusing -> using · ID ;, (
namespaceusing -> using · ID ;, this
namespaceusing -> using · ID ;, new
namespaceusing -> using · ID ;, LITBOOL
namespaceusing -> using · ID ;, LITINT
namespaceusing -> using · ID ;, LITLONG
namespaceusing -> using · ID ;, LITFLOAT
namespaceusing -> using · ID ;, LITDOUBLE
namespaceusing -> using · ID ;, LITCHAR
namespaceusing -> using · ID ;, LITSTRING
namespaceusing -> using · ID ;, null
namespaceusing -> using · ID ;, ++
namespaceusing -> using · ID ;, --
namespaceusing -> using · ID ;, break
namespaceusing -> using · ID ;, return
namespaceusing -> using · ID ;, delete
namespaceusing -> using · ID ;, while
namespaceusing -> using · ID ;, for
namespaceusing -> using · ID ;, if
namespaceusing -> using · ID ;, $
namespaceusing -> using · ID ;, using
***EndSet***
***EndState***
***State***
7
I_7
***Set***
importations -> importations importation ·, using
importations -> importations importation ·, namespace
importations -> importations importation ·, {
importations -> importations importation ·, ID
importations -> importations importation ·, void
importations -> importations importation ·, bool
importations -> importations importation ·, int
importations -> importations importation ·, long
importations -> importations importation ·, float
importations -> importations importation ·, double
importations -> importations importation ·, char
importations -> importations importation ·, string
importations -> importations importation ·, var
importations -> importations importation ·, own
importations -> importations importation ·, bor
importations -> importations importation ·, const
importations -> importations importation ·, extern
importations -> importations importation ·, class
importations -> importations importation ·, (
importations -> importations importation ·, this
importations -> importations importation ·, new
importations -> importations importation ·, LITBOOL
importations -> importations importation ·, LITINT
importations -> importations importation ·, LITLONG
importations -> importations importation ·, LITFLOAT
importations -> importations importation ·, LITDOUBLE
importations -> importations importation ·, LITCHAR
importations -> importations importation ·, LITSTRING
importations -> importations importation ·, null
importations -> importations importation ·, ++
importations -> importations importation ·, --
importations -> importations importation ·, break
importations -> importations importation ·, return
importations -> importations importation ·, delete
importations -> importations importation ·, while
importations -> importations importation ·, for
importations -> importations importation ·, if
importations -> importations importation ·, $
importations -> importations importation ·, import
***EndSet***
***EndState***
***State***
8
I_8
***Set***
S -> importations namespaceusings · statements, $
namespaceusings -> namespaceusings · namespaceusing, namespace
namespaceusings -> namespaceusings · namespaceusing, {
namespaceusings -> namespaceusings · namespaceusing, ID
namespaceusings -> namespaceusings · namespaceusing, void
namespaceusings -> namespaceusings · namespaceusing, bool
namespaceusings -> namespaceusings · namespaceusing, int
namespaceusings -> namespaceusings · namespaceusing, long
namespaceusings -> namespaceusings · namespaceusing, float
namespaceusings -> namespaceusings · namespaceusing, double
namespaceusings -> namespaceusings · namespaceusing, char
namespaceusings -> namespaceusings · namespaceusing, string
namespaceusings -> namespaceusings · namespaceusing, var
namespaceusings -> namespaceusings · namespaceusing, own
namespaceusings -> namespaceusings · namespaceusing, bor
namespaceusings -> namespaceusings · namespaceusing, const
namespaceusings -> namespaceusings · namespaceusing, extern
namespaceusings -> namespaceusings · namespaceusing, class
namespaceusings -> namespaceusings · namespaceusing, (
namespaceusings -> namespaceusings · namespaceusing, this
namespaceusings -> namespaceusings · namespaceusing, new
namespaceusings -> namespaceusings · namespaceusing, LITBOOL
namespaceusings -> namespaceusings · namespaceusing, LITINT
namespaceusings -> namespaceusings · namespaceusing, LITLONG
namespaceusings -> namespaceusings · namespaceusing, LITFLOAT
namespaceusings -> namespaceusings · namespaceusing, LITDOUBLE
namespaceusings -> namespaceusings · namespaceusing, LITCHAR
namespaceusings -> namespaceusings · namespaceusing, LITSTRING
namespaceusings -> namespaceusings · namespaceusing, null
namespaceusings -> namespaceusings · namespaceusing, ++
namespaceusings -> namespaceusings · namespaceusing, --
namespaceusings -> namespaceusings · namespaceusing, break
namespaceusings -> namespaceusings · namespaceusing, return
namespaceusings -> namespaceusings · namespaceusing, delete
namespaceusings -> namespaceusings · namespaceusing, while
namespaceusings -> namespaceusings · namespaceusing, for
namespaceusings -> namespaceusings · namespaceusing, if
namespaceusings -> namespaceusings · namespaceusing, $
namespaceusings -> namespaceusings · namespaceusing, using
statements -> · statements stmt, $
statements -> · stmt, $
statements -> ·, $
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, long
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, var
namespaceusing -> · using ID ;, own
namespaceusing -> · using ID ;, bor
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITLONG
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
9
I_9
***Set***
namespaceusings -> namespaceusing ·, namespace
namespaceusings -> namespaceusing ·, {
namespaceusings -> namespaceusing ·, ID
namespaceusings -> namespaceusing ·, void
namespaceusings -> namespaceusing ·, bool
namespaceusings -> namespaceusing ·, int
namespaceusings -> namespaceusing ·, long
namespaceusings -> namespaceusing ·, float
namespaceusings -> namespaceusing ·, double
namespaceusings -> namespaceusing ·, char
namespaceusings -> namespaceusing ·, string
namespaceusings -> namespaceusing ·, var
namespaceusings -> namespaceusing ·, own
namespaceusings -> namespaceusing ·, bor
namespaceusings -> namespaceusing ·, const
namespaceusings -> namespaceusing ·, extern
namespaceusings -> namespaceusing ·, class
namespaceusings -> namespaceusing ·, (
namespaceusings -> namespaceusing ·, this
namespaceusings -> namespaceusing ·, new
namespaceusings -> namespaceusing ·, LITBOOL
namespaceusings -> namespaceusing ·, LITINT
namespaceusings -> namespaceusing ·, LITLONG
namespaceusings -> namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusing ·, LITCHAR
namespaceusings -> namespaceusing ·, LITSTRING
namespaceusings -> namespaceusing ·, null
namespaceusings -> namespaceusing ·, ++
namespaceusings -> namespaceusing ·, --
namespaceusings -> namespaceusing ·, break
namespaceusings -> namespaceusing ·, return
namespaceusings -> namespaceusing ·, delete
namespaceusings -> namespaceusing ·, while
namespaceusings -> namespaceusing ·, for
namespaceusings -> namespaceusing ·, if
namespaceusings -> namespaceusing ·, $
namespaceusings -> namespaceusing ·, using
***EndSet***
***EndState***
***State***
10
I_10
***Set***
importation -> import < LITSTRING · >, using
importation -> import < LITSTRING · >, namespace
importation -> import < LITSTRING · >, {
importation -> import < LITSTRING · >, ID
importation -> import < LITSTRING · >, void
importation -> import < LITSTRING · >, bool
importation -> import < LITSTRING · >, int
importation -> import < LITSTRING · >, long
importation -> import < LITSTRING · >, float
importation -> import < LITSTRING · >, double
importation -> import < LITSTRING · >, char
importation -> import < LITSTRING · >, string
importation -> import < LITSTRING · >, var
importation -> import < LITSTRING · >, own
importation -> import < LITSTRING · >, bor
importation -> import < LITSTRING · >, const
importation -> import < LITSTRING · >, extern
importation -> import < LITSTRING · >, class
importation -> import < LITSTRING · >, (
importation -> import < LITSTRING · >, this
importation -> import < LITSTRING · >, new
importation -> import < LITSTRING · >, LITBOOL
importation -> import < LITSTRING · >, LITINT
importation -> import < LITSTRING · >, LITLONG
importation -> import < LITSTRING · >, LITFLOAT
importation -> import < LITSTRING · >, LITDOUBLE
importation -> import < LITSTRING · >, LITCHAR
importation -> import < LITSTRING · >, LITSTRING
importation -> import < LITSTRING · >, null
importation -> import < LITSTRING · >, ++
importation -> import < LITSTRING · >, --
importation -> import < LITSTRING · >, break
importation -> import < LITSTRING · >, return
importation -> import < LITSTRING · >, delete
importation -> import < LITSTRING · >, while
importation -> import < LITSTRING · >, for
importation -> import < LITSTRING · >, if
importation -> import < LITSTRING · >, $
importation -> import < LITSTRING · >, import
***EndSet***
***EndState***
***State***
11
I_11
***Set***
namespaceusing -> using ID · ;, namespace
namespaceusing -> using ID · ;, {
namespaceusing -> using ID · ;, ID
namespaceusing -> using ID · ;, void
namespaceusing -> using ID · ;, bool
namespaceusing -> using ID · ;, int
namespaceusing -> using ID · ;, long
namespaceusing -> using ID · ;, float
namespaceusing -> using ID · ;, double
namespaceusing -> using ID · ;, char
namespaceusing -> using ID · ;, string
namespaceusing -> using ID · ;, var
namespaceusing -> using ID · ;, own
namespaceusing -> using ID · ;, bor
namespaceusing -> using ID · ;, const
namespaceusing -> using ID · ;, extern
namespaceusing -> using ID · ;, class
namespaceusing -> using ID · ;, (
namespaceusing -> using ID · ;, this
namespaceusing -> using ID · ;, new
namespaceusing -> using ID · ;, LITBOOL
namespaceusing -> using ID · ;, LITINT
namespaceusing -> using ID · ;, LITLONG
namespaceusing -> using ID · ;, LITFLOAT
namespaceusing -> using ID · ;, LITDOUBLE
namespaceusing -> using ID · ;, LITCHAR
namespaceusing -> using ID · ;, LITSTRING
namespaceusing -> using ID · ;, null
namespaceusing -> using ID · ;, ++
namespaceusing -> using ID · ;, --
namespaceusing -> using ID · ;, break
namespaceusing -> using ID · ;, return
namespaceusing -> using ID · ;, delete
namespaceusing -> using ID · ;, while
namespaceusing -> using ID · ;, for
namespaceusing -> using ID · ;, if
namespaceusing -> using ID · ;, $
namespaceusing -> using ID · ;, using
***EndSet***
***EndState***
***State***
12
I_12_182_288_846_1186_1323
***Set***
namespaceblock -> namespace · ID { statements }, $
namespaceblock -> namespace · ID { statements }, namespace
namespaceblock -> namespace · ID { statements }, {
namespaceblock -> namespace · ID { statements }, ID
namespaceblock -> namespace · ID { statements }, void
namespaceblock -> namespace · ID { statements }, bool
namespaceblock -> namespace · ID { statements }, int
namespaceblock -> namespace · ID { statements }, long
namespaceblock -> namespace · ID { statements }, float
namespaceblock -> namespace · ID { statements }, double
namespaceblock -> namespace · ID { statements }, char
namespaceblock -> namespace · ID { statements }, string
namespaceblock -> namespace · ID { statements }, var
namespaceblock -> namespace · ID { statements }, own
namespaceblock -> namespace · ID { statements }, bor
namespaceblock -> namespace · ID { statements }, const
namespaceblock -> namespace · ID { statements }, extern
namespaceblock -> namespace · ID { statements }, class
namespaceblock -> namespace · ID { statements }, (
namespaceblock -> namespace · ID { statements }, this
namespaceblock -> namespace · ID { statements }, new
namespaceblock -> namespace · ID { statements }, LITBOOL
namespaceblock -> namespace · ID { statements }, LITINT
namespaceblock -> namespace · ID { statements }, LITLONG
namespaceblock -> namespace · ID { statements }, LITFLOAT
namespaceblock -> namespace · ID { statements }, LITDOUBLE
namespaceblock -> namespace · ID { statements }, LITCHAR
namespaceblock -> namespace · ID { statements }, LITSTRING
namespaceblock -> namespace · ID { statements }, null
namespaceblock -> namespace · ID { statements }, ++
namespaceblock -> namespace · ID { statements }, --
namespaceblock -> namespace · ID { statements }, break
namespaceblock -> namespace · ID { statements }, return
namespaceblock -> namespace · ID { statements }, delete
namespaceblock -> namespace · ID { statements }, while
namespaceblock -> namespace · ID { statements }, for
namespaceblock -> namespace · ID { statements }, if
namespaceblock -> namespace · ID { statements }, }
namespaceblock -> namespace · ID { statements }, &&
namespaceblock -> namespace · ID { statements }, ||
namespaceblock -> namespace · ID { statements }, +
namespaceblock -> namespace · ID { statements }, -
namespaceblock -> namespace · ID { statements }, *
namespaceblock -> namespace · ID { statements }, /
namespaceblock -> namespace · ID { statements }, %
namespaceblock -> namespace · ID { statements }, !
namespaceblock -> namespace · ID { statements }, else
***EndSet***
***EndState***
***State***
13
I_13_183_289_760_847_1187_1324
***Set***
declstmt -> extern · type ID ( params ) ;, $
declstmt -> extern · type ID ( params ) ;, namespace
declstmt -> extern · type ID ( params ) ;, {
declstmt -> extern · type ID ( params ) ;, ID
declstmt -> extern · type ID ( params ) ;, void
declstmt -> extern · type ID ( params ) ;, bool
declstmt -> extern · type ID ( params ) ;, int
declstmt -> extern · type ID ( params ) ;, long
declstmt -> extern · type ID ( params ) ;, float
declstmt -> extern · type ID ( params ) ;, double
declstmt -> extern · type ID ( params ) ;, char
declstmt -> extern · type ID ( params ) ;, string
declstmt -> extern · type ID ( params ) ;, var
declstmt -> extern · type ID ( params ) ;, own
declstmt -> extern · type ID ( params ) ;, bor
declstmt -> extern · type ID ( params ) ;, const
declstmt -> extern · type ID ( params ) ;, extern
declstmt -> extern · type ID ( params ) ;, class
declstmt -> extern · type ID ( params ) ;, (
declstmt -> extern · type ID ( params ) ;, this
declstmt -> extern · type ID ( params ) ;, new
declstmt -> extern · type ID ( params ) ;, LITBOOL
declstmt -> extern · type ID ( params ) ;, LITINT
declstmt -> extern · type ID ( params ) ;, LITLONG
declstmt -> extern · type ID ( params ) ;, LITFLOAT
declstmt -> extern · type ID ( params ) ;, LITDOUBLE
declstmt -> extern · type ID ( params ) ;, LITCHAR
declstmt -> extern · type ID ( params ) ;, LITSTRING
declstmt -> extern · type ID ( params ) ;, null
declstmt -> extern · type ID ( params ) ;, ++
declstmt -> extern · type ID ( params ) ;, --
declstmt -> extern · type ID ( params ) ;, break
declstmt -> extern · type ID ( params ) ;, return
declstmt -> extern · type ID ( params ) ;, delete
declstmt -> extern · type ID ( params ) ;, while
declstmt -> extern · type ID ( params ) ;, for
declstmt -> extern · type ID ( params ) ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern · type ID ( params ) ;, }
declstmt -> extern · type ID ( params ) ;, &&
declstmt -> extern · type ID ( params ) ;, ||
declstmt -> extern · type ID ( params ) ;, +
declstmt -> extern · type ID ( params ) ;, -
declstmt -> extern · type ID ( params ) ;, *
declstmt -> extern · type ID ( params ) ;, /
declstmt -> extern · type ID ( params ) ;, %
declstmt -> extern · type ID ( params ) ;, !
declstmt -> extern · type ID ( params ) ;, else
***EndSet***
***EndState***
***State***
14
I_14_184_290_761_848_1188_1325
***Set***
declstmt -> const · type ID = lit ;, $
declstmt -> const · type ID = lit ;, namespace
declstmt -> const · type ID = lit ;, {
declstmt -> const · type ID = lit ;, ID
declstmt -> const · type ID = lit ;, void
declstmt -> const · type ID = lit ;, bool
declstmt -> const · type ID = lit ;, int
declstmt -> const · type ID = lit ;, long
declstmt -> const · type ID = lit ;, float
declstmt -> const · type ID = lit ;, double
declstmt -> const · type ID = lit ;, char
declstmt -> const · type ID = lit ;, string
declstmt -> const · type ID = lit ;, var
declstmt -> const · type ID = lit ;, own
declstmt -> const · type ID = lit ;, bor
declstmt -> const · type ID = lit ;, const
declstmt -> const · type ID = lit ;, extern
declstmt -> const · type ID = lit ;, class
declstmt -> const · type ID = lit ;, (
declstmt -> const · type ID = lit ;, this
declstmt -> const · type ID = lit ;, new
declstmt -> const · type ID = lit ;, LITBOOL
declstmt -> const · type ID = lit ;, LITINT
declstmt -> const · type ID = lit ;, LITLONG
declstmt -> const · type ID = lit ;, LITFLOAT
declstmt -> const · type ID = lit ;, LITDOUBLE
declstmt -> const · type ID = lit ;, LITCHAR
declstmt -> const · type ID = lit ;, LITSTRING
declstmt -> const · type ID = lit ;, null
declstmt -> const · type ID = lit ;, ++
declstmt -> const · type ID = lit ;, --
declstmt -> const · type ID = lit ;, break
declstmt -> const · type ID = lit ;, return
declstmt -> const · type ID = lit ;, delete
declstmt -> const · type ID = lit ;, while
declstmt -> const · type ID = lit ;, for
declstmt -> const · type ID = lit ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> const · type ID = lit ;, }
declstmt -> const · type ID = lit ;, &&
declstmt -> const · type ID = lit ;, ||
declstmt -> const · type ID = lit ;, +
declstmt -> const · type ID = lit ;, -
declstmt -> const · type ID = lit ;, *
declstmt -> const · type ID = lit ;, /
declstmt -> const · type ID = lit ;, %
declstmt -> const · type ID = lit ;, !
declstmt -> const · type ID = lit ;, else
***EndSet***
***EndState***
***State***
15
I_15_185_291_762_849_1189_1326
***Set***
declstmt -> own · type ID = expr ;, $
declstmt -> own · type ID = expr ;, namespace
declstmt -> own · type ID = expr ;, {
declstmt -> own · type ID = expr ;, ID
declstmt -> own · type ID = expr ;, void
declstmt -> own · type ID = expr ;, bool
declstmt -> own · type ID = expr ;, int
declstmt -> own · type ID = expr ;, long
declstmt -> own · type ID = expr ;, float
declstmt -> own · type ID = expr ;, double
declstmt -> own · type ID = expr ;, char
declstmt -> own · type ID = expr ;, string
declstmt -> own · type ID = expr ;, var
declstmt -> own · type ID = expr ;, own
declstmt -> own · type ID = expr ;, bor
declstmt -> own · type ID = expr ;, const
declstmt -> own · type ID = expr ;, extern
declstmt -> own · type ID = expr ;, class
declstmt -> own · type ID = expr ;, (
declstmt -> own · type ID = expr ;, this
declstmt -> own · type ID = expr ;, new
declstmt -> own · type ID = expr ;, LITBOOL
declstmt -> own · type ID = expr ;, LITINT
declstmt -> own · type ID = expr ;, LITLONG
declstmt -> own · type ID = expr ;, LITFLOAT
declstmt -> own · type ID = expr ;, LITDOUBLE
declstmt -> own · type ID = expr ;, LITCHAR
declstmt -> own · type ID = expr ;, LITSTRING
declstmt -> own · type ID = expr ;, null
declstmt -> own · type ID = expr ;, ++
declstmt -> own · type ID = expr ;, --
declstmt -> own · type ID = expr ;, break
declstmt -> own · type ID = expr ;, return
declstmt -> own · type ID = expr ;, delete
declstmt -> own · type ID = expr ;, while
declstmt -> own · type ID = expr ;, for
declstmt -> own · type ID = expr ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> own · type ID = expr ;, }
declstmt -> own · type ID = expr ;, &&
declstmt -> own · type ID = expr ;, ||
declstmt -> own · type ID = expr ;, +
declstmt -> own · type ID = expr ;, -
declstmt -> own · type ID = expr ;, *
declstmt -> own · type ID = expr ;, /
declstmt -> own · type ID = expr ;, %
declstmt -> own · type ID = expr ;, !
declstmt -> own · type ID = expr ;, else
***EndSet***
***EndState***
***State***
16
I_16_186_292_763_850_1190_1327
***Set***
declstmt -> bor · type ID = expr ;, $
declstmt -> bor · type ID = expr ;, namespace
declstmt -> bor · type ID = expr ;, {
declstmt -> bor · type ID = expr ;, ID
declstmt -> bor · type ID = expr ;, void
declstmt -> bor · type ID = expr ;, bool
declstmt -> bor · type ID = expr ;, int
declstmt -> bor · type ID = expr ;, long
declstmt -> bor · type ID = expr ;, float
declstmt -> bor · type ID = expr ;, double
declstmt -> bor · type ID = expr ;, char
declstmt -> bor · type ID = expr ;, string
declstmt -> bor · type ID = expr ;, var
declstmt -> bor · type ID = expr ;, own
declstmt -> bor · type ID = expr ;, bor
declstmt -> bor · type ID = expr ;, const
declstmt -> bor · type ID = expr ;, extern
declstmt -> bor · type ID = expr ;, class
declstmt -> bor · type ID = expr ;, (
declstmt -> bor · type ID = expr ;, this
declstmt -> bor · type ID = expr ;, new
declstmt -> bor · type ID = expr ;, LITBOOL
declstmt -> bor · type ID = expr ;, LITINT
declstmt -> bor · type ID = expr ;, LITLONG
declstmt -> bor · type ID = expr ;, LITFLOAT
declstmt -> bor · type ID = expr ;, LITDOUBLE
declstmt -> bor · type ID = expr ;, LITCHAR
declstmt -> bor · type ID = expr ;, LITSTRING
declstmt -> bor · type ID = expr ;, null
declstmt -> bor · type ID = expr ;, ++
declstmt -> bor · type ID = expr ;, --
declstmt -> bor · type ID = expr ;, break
declstmt -> bor · type ID = expr ;, return
declstmt -> bor · type ID = expr ;, delete
declstmt -> bor · type ID = expr ;, while
declstmt -> bor · type ID = expr ;, for
declstmt -> bor · type ID = expr ;, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> bor · type ID = expr ;, }
declstmt -> bor · type ID = expr ;, &&
declstmt -> bor · type ID = expr ;, ||
declstmt -> bor · type ID = expr ;, +
declstmt -> bor · type ID = expr ;, -
declstmt -> bor · type ID = expr ;, *
declstmt -> bor · type ID = expr ;, /
declstmt -> bor · type ID = expr ;, %
declstmt -> bor · type ID = expr ;, !
declstmt -> bor · type ID = expr ;, else
***EndSet***
***EndState***
***State***
17
I_17_75_239
***Set***
type -> var ·, ID
type -> var ·, operator
type -> var ·, )
***EndSet***
***EndState***
***State***
18
I_18_187_293_764_851_1191_1328
***Set***
declstmt -> class · ID inherit { declstatements }, $
declstmt -> class · ID inherit { declstatements }, namespace
declstmt -> class · ID inherit { declstatements }, {
declstmt -> class · ID inherit { declstatements }, ID
declstmt -> class · ID inherit { declstatements }, void
declstmt -> class · ID inherit { declstatements }, bool
declstmt -> class · ID inherit { declstatements }, int
declstmt -> class · ID inherit { declstatements }, long
declstmt -> class · ID inherit { declstatements }, float
declstmt -> class · ID inherit { declstatements }, double
declstmt -> class · ID inherit { declstatements }, char
declstmt -> class · ID inherit { declstatements }, string
declstmt -> class · ID inherit { declstatements }, var
declstmt -> class · ID inherit { declstatements }, own
declstmt -> class · ID inherit { declstatements }, bor
declstmt -> class · ID inherit { declstatements }, const
declstmt -> class · ID inherit { declstatements }, extern
declstmt -> class · ID inherit { declstatements }, class
declstmt -> class · ID inherit { declstatements }, (
declstmt -> class · ID inherit { declstatements }, this
declstmt -> class · ID inherit { declstatements }, new
declstmt -> class · ID inherit { declstatements }, LITBOOL
declstmt -> class · ID inherit { declstatements }, LITINT
declstmt -> class · ID inherit { declstatements }, LITLONG
declstmt -> class · ID inherit { declstatements }, LITFLOAT
declstmt -> class · ID inherit { declstatements }, LITDOUBLE
declstmt -> class · ID inherit { declstatements }, LITCHAR
declstmt -> class · ID inherit { declstatements }, LITSTRING
declstmt -> class · ID inherit { declstatements }, null
declstmt -> class · ID inherit { declstatements }, ++
declstmt -> class · ID inherit { declstatements }, --
declstmt -> class · ID inherit { declstatements }, break
declstmt -> class · ID inherit { declstatements }, return
declstmt -> class · ID inherit { declstatements }, delete
declstmt -> class · ID inherit { declstatements }, while
declstmt -> class · ID inherit { declstatements }, for
declstmt -> class · ID inherit { declstatements }, if
declstmt -> class · ID inherit { declstatements }, }
declstmt -> class · ID inherit { declstatements }, &&
declstmt -> class · ID inherit { declstatements }, ||
declstmt -> class · ID inherit { declstatements }, +
declstmt -> class · ID inherit { declstatements }, -
declstmt -> class · ID inherit { declstatements }, *
declstmt -> class · ID inherit { declstatements }, /
declstmt -> class · ID inherit { declstatements }, %
declstmt -> class · ID inherit { declstatements }, !
declstmt -> class · ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
19
I_19_76_96_240
***Set***
primitive -> void ·, ID
primitive -> void ·, operator
primitive -> void ·, [
primitive -> void ·, )
***EndSet***
***EndState***
***State***
20
I_20_77_97_241
***Set***
primitive -> bool ·, ID
primitive -> bool ·, operator
primitive -> bool ·, [
primitive -> bool ·, )
***EndSet***
***EndState***
***State***
21
I_21_78_98_242
***Set***
primitive -> int ·, ID
primitive -> int ·, operator
primitive -> int ·, [
primitive -> int ·, )
***EndSet***
***EndState***
***State***
22
I_22_79_99_243
***Set***
primitive -> long ·, ID
primitive -> long ·, operator
primitive -> long ·, [
primitive -> long ·, )
***EndSet***
***EndState***
***State***
23
I_23_80_100_244
***Set***
primitive -> float ·, ID
primitive -> float ·, operator
primitive -> float ·, [
primitive -> float ·, )
***EndSet***
***EndState***
***State***
24
I_24_81_101_245
***Set***
primitive -> double ·, ID
primitive -> double ·, operator
primitive -> double ·, [
primitive -> double ·, )
***EndSet***
***EndState***
***State***
25
I_25_82_102_246
***Set***
primitive -> char ·, ID
primitive -> char ·, operator
primitive -> char ·, [
primitive -> char ·, )
***EndSet***
***EndState***
***State***
26
I_26_83_103_247
***Set***
primitive -> string ·, ID
primitive -> string ·, operator
primitive -> string ·, [
primitive -> string ·, )
***EndSet***
***EndState***
***State***
27
I_27_109_148_371_406_476_510_578_612_749_941_975_1056
***Set***
lit -> null ·, .
lit -> null ·, ;
lit -> null ·, &&
lit -> null ·, ||
lit -> null ·, >
lit -> null ·, <
lit -> null ·, >=
lit -> null ·, <=
lit -> null ·, ==
lit -> null ·, !=
lit -> null ·, +
lit -> null ·, -
lit -> null ·, *
lit -> null ·, /
lit -> null ·, %
lit -> null ·, )
lit -> null ·, ,
lit -> null ·, ]
***EndSet***
***EndState***
***State***
28
I_28_110_149_372_407_477_511_579_613_942_976_1057_1120
***Set***
newobj -> new · ID ( ), ;
newobj -> new · ID ( ), .
newarr -> new · stypeBracket, .
stypeBracket -> · idBracket, .
stypeBracket -> · primitiveBracket, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> · primitive [ optidx ], .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
newarr -> new · stypeBracket, ;
newobj -> new · ID ( ), &&
newarr -> new · stypeBracket, &&
newobj -> new · ID ( ), ||
newarr -> new · stypeBracket, ||
newobj -> new · ID ( ), >
newarr -> new · stypeBracket, >
newobj -> new · ID ( ), <
newarr -> new · stypeBracket, <
newobj -> new · ID ( ), >=
newarr -> new · stypeBracket, >=
newobj -> new · ID ( ), <=
newarr -> new · stypeBracket, <=
newobj -> new · ID ( ), ==
newarr -> new · stypeBracket, ==
newobj -> new · ID ( ), !=
newarr -> new · stypeBracket, !=
newobj -> new · ID ( ), +
newarr -> new · stypeBracket, +
newobj -> new · ID ( ), -
newarr -> new · stypeBracket, -
newobj -> new · ID ( ), *
newarr -> new · stypeBracket, *
newobj -> new · ID ( ), /
newarr -> new · stypeBracket, /
newobj -> new · ID ( ), %
newarr -> new · stypeBracket, %
stypeBracket -> · idBracket, ;
stypeBracket -> · primitiveBracket, ;
stypeBracket -> · idBracket, &&
stypeBracket -> · primitiveBracket, &&
stypeBracket -> · idBracket, ||
stypeBracket -> · primitiveBracket, ||
stypeBracket -> · idBracket, >
stypeBracket -> · primitiveBracket, >
stypeBracket -> · idBracket, <
stypeBracket -> · primitiveBracket, <
stypeBracket -> · idBracket, >=
stypeBracket -> · primitiveBracket, >=
stypeBracket -> · idBracket, <=
stypeBracket -> · primitiveBracket, <=
stypeBracket -> · idBracket, ==
stypeBracket -> · primitiveBracket, ==
stypeBracket -> · idBracket, !=
stypeBracket -> · primitiveBracket, !=
stypeBracket -> · idBracket, +
stypeBracket -> · primitiveBracket, +
stypeBracket -> · idBracket, -
stypeBracket -> · primitiveBracket, -
stypeBracket -> · idBracket, *
stypeBracket -> · primitiveBracket, *
stypeBracket -> · idBracket, /
stypeBracket -> · primitiveBracket, /
stypeBracket -> · idBracket, %
stypeBracket -> · primitiveBracket, %
idBracket -> · ID [ optidx ], ;
primitiveBracket -> · primitive [ optidx ], ;
idBracket -> · ID [ optidx ], &&
primitiveBracket -> · primitive [ optidx ], &&
idBracket -> · ID [ optidx ], ||
primitiveBracket -> · primitive [ optidx ], ||
idBracket -> · ID [ optidx ], >
primitiveBracket -> · primitive [ optidx ], >
idBracket -> · ID [ optidx ], <
primitiveBracket -> · primitive [ optidx ], <
idBracket -> · ID [ optidx ], >=
primitiveBracket -> · primitive [ optidx ], >=
idBracket -> · ID [ optidx ], <=
primitiveBracket -> · primitive [ optidx ], <=
idBracket -> · ID [ optidx ], ==
primitiveBracket -> · primitive [ optidx ], ==
idBracket -> · ID [ optidx ], !=
primitiveBracket -> · primitive [ optidx ], !=
idBracket -> · ID [ optidx ], +
primitiveBracket -> · primitive [ optidx ], +
idBracket -> · ID [ optidx ], -
primitiveBracket -> · primitive [ optidx ], -
idBracket -> · ID [ optidx ], *
primitiveBracket -> · primitive [ optidx ], *
idBracket -> · ID [ optidx ], /
primitiveBracket -> · primitive [ optidx ], /
idBracket -> · ID [ optidx ], %
primitiveBracket -> · primitive [ optidx ], %
newobj -> new · ID ( ), )
newarr -> new · stypeBracket, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
newobj -> new · ID ( ), ,
newarr -> new · stypeBracket, ,
stypeBracket -> · idBracket, ,
stypeBracket -> · primitiveBracket, ,
idBracket -> · ID [ optidx ], ,
primitiveBracket -> · primitive [ optidx ], ,
newobj -> new · ID ( ), ]
newarr -> new · stypeBracket, ]
stypeBracket -> · idBracket, ]
stypeBracket -> · primitiveBracket, ]
idBracket -> · ID [ optidx ], ]
primitiveBracket -> · primitive [ optidx ], ]
***EndSet***
***EndState***
***State***
29
I_29_188_294_852_1192_1329
***Set***
stmt -> delete · expr ;, $
stmt -> delete · expr ;, namespace
stmt -> delete · expr ;, {
stmt -> delete · expr ;, ID
stmt -> delete · expr ;, void
stmt -> delete · expr ;, bool
stmt -> delete · expr ;, int
stmt -> delete · expr ;, long
stmt -> delete · expr ;, float
stmt -> delete · expr ;, double
stmt -> delete · expr ;, char
stmt -> delete · expr ;, string
stmt -> delete · expr ;, var
stmt -> delete · expr ;, own
stmt -> delete · expr ;, bor
stmt -> delete · expr ;, const
stmt -> delete · expr ;, extern
stmt -> delete · expr ;, class
stmt -> delete · expr ;, (
stmt -> delete · expr ;, this
stmt -> delete · expr ;, new
stmt -> delete · expr ;, LITBOOL
stmt -> delete · expr ;, LITINT
stmt -> delete · expr ;, LITLONG
stmt -> delete · expr ;, LITFLOAT
stmt -> delete · expr ;, LITDOUBLE
stmt -> delete · expr ;, LITCHAR
stmt -> delete · expr ;, LITSTRING
stmt -> delete · expr ;, null
stmt -> delete · expr ;, ++
stmt -> delete · expr ;, --
stmt -> delete · expr ;, break
stmt -> delete · expr ;, return
stmt -> delete · expr ;, delete
stmt -> delete · expr ;, while
stmt -> delete · expr ;, for
stmt -> delete · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> delete · expr ;, }
stmt -> delete · expr ;, &&
stmt -> delete · expr ;, ||
stmt -> delete · expr ;, +
stmt -> delete · expr ;, -
stmt -> delete · expr ;, *
stmt -> delete · expr ;, /
stmt -> delete · expr ;, %
stmt -> delete · expr ;, !
stmt -> delete · expr ;, else
***EndSet***
***EndState***
***State***
30
I_30_189_295_853_1193_1330
***Set***
stmt -> while · ( expr ) stmt, $
stmt -> while · ( expr ) stmt, namespace
stmt -> while · ( expr ) stmt, {
stmt -> while · ( expr ) stmt, ID
stmt -> while · ( expr ) stmt, void
stmt -> while · ( expr ) stmt, bool
stmt -> while · ( expr ) stmt, int
stmt -> while · ( expr ) stmt, long
stmt -> while · ( expr ) stmt, float
stmt -> while · ( expr ) stmt, double
stmt -> while · ( expr ) stmt, char
stmt -> while · ( expr ) stmt, string
stmt -> while · ( expr ) stmt, var
stmt -> while · ( expr ) stmt, own
stmt -> while · ( expr ) stmt, bor
stmt -> while · ( expr ) stmt, const
stmt -> while · ( expr ) stmt, extern
stmt -> while · ( expr ) stmt, class
stmt -> while · ( expr ) stmt, (
stmt -> while · ( expr ) stmt, this
stmt -> while · ( expr ) stmt, new
stmt -> while · ( expr ) stmt, LITBOOL
stmt -> while · ( expr ) stmt, LITINT
stmt -> while · ( expr ) stmt, LITLONG
stmt -> while · ( expr ) stmt, LITFLOAT
stmt -> while · ( expr ) stmt, LITDOUBLE
stmt -> while · ( expr ) stmt, LITCHAR
stmt -> while · ( expr ) stmt, LITSTRING
stmt -> while · ( expr ) stmt, null
stmt -> while · ( expr ) stmt, ++
stmt -> while · ( expr ) stmt, --
stmt -> while · ( expr ) stmt, break
stmt -> while · ( expr ) stmt, return
stmt -> while · ( expr ) stmt, delete
stmt -> while · ( expr ) stmt, while
stmt -> while · ( expr ) stmt, for
stmt -> while · ( expr ) stmt, if
stmt -> while · ( expr ) stmt, }
stmt -> while · ( expr ) stmt, &&
stmt -> while · ( expr ) stmt, ||
stmt -> while · ( expr ) stmt, +
stmt -> while · ( expr ) stmt, -
stmt -> while · ( expr ) stmt, *
stmt -> while · ( expr ) stmt, /
stmt -> while · ( expr ) stmt, %
stmt -> while · ( expr ) stmt, !
stmt -> while · ( expr ) stmt, else
***EndSet***
***EndState***
***State***
31
I_31_190_296_854_1194_1331
***Set***
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
32
I_32_191_297_855_1195_1332
***Set***
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, long
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, var
stmt -> if · ( expr ) stmt elifclauselist elseclause, own
stmt -> if · ( expr ) stmt elifclauselist elseclause, bor
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
33
I_33_192_298_856_1196_1333
***Set***
stmt -> break · ;, $
stmt -> break · ;, namespace
stmt -> break · ;, {
stmt -> break · ;, ID
stmt -> break · ;, void
stmt -> break · ;, bool
stmt -> break · ;, int
stmt -> break · ;, long
stmt -> break · ;, float
stmt -> break · ;, double
stmt -> break · ;, char
stmt -> break · ;, string
stmt -> break · ;, var
stmt -> break · ;, own
stmt -> break · ;, bor
stmt -> break · ;, const
stmt -> break · ;, extern
stmt -> break · ;, class
stmt -> break · ;, (
stmt -> break · ;, this
stmt -> break · ;, new
stmt -> break · ;, LITBOOL
stmt -> break · ;, LITINT
stmt -> break · ;, LITLONG
stmt -> break · ;, LITFLOAT
stmt -> break · ;, LITDOUBLE
stmt -> break · ;, LITCHAR
stmt -> break · ;, LITSTRING
stmt -> break · ;, null
stmt -> break · ;, ++
stmt -> break · ;, --
stmt -> break · ;, break
stmt -> break · ;, return
stmt -> break · ;, delete
stmt -> break · ;, while
stmt -> break · ;, for
stmt -> break · ;, if
stmt -> break · ;, }
stmt -> break · ;, &&
stmt -> break · ;, ||
stmt -> break · ;, +
stmt -> break · ;, -
stmt -> break · ;, *
stmt -> break · ;, /
stmt -> break · ;, %
stmt -> break · ;, !
stmt -> break · ;, else
***EndSet***
***EndState***
***State***
34
I_34_193_299_857_1197_1334
***Set***
stmt -> return · expr ;, $
stmt -> return · ;, $
stmt -> return · expr ;, namespace
stmt -> return · ;, namespace
stmt -> return · expr ;, {
stmt -> return · ;, {
stmt -> return · expr ;, ID
stmt -> return · ;, ID
stmt -> return · expr ;, void
stmt -> return · ;, void
stmt -> return · expr ;, bool
stmt -> return · ;, bool
stmt -> return · expr ;, int
stmt -> return · ;, int
stmt -> return · expr ;, long
stmt -> return · ;, long
stmt -> return · expr ;, float
stmt -> return · ;, float
stmt -> return · expr ;, double
stmt -> return · ;, double
stmt -> return · expr ;, char
stmt -> return · ;, char
stmt -> return · expr ;, string
stmt -> return · ;, string
stmt -> return · expr ;, var
stmt -> return · ;, var
stmt -> return · expr ;, own
stmt -> return · ;, own
stmt -> return · expr ;, bor
stmt -> return · ;, bor
stmt -> return · expr ;, const
stmt -> return · ;, const
stmt -> return · expr ;, extern
stmt -> return · ;, extern
stmt -> return · expr ;, class
stmt -> return · ;, class
stmt -> return · expr ;, (
stmt -> return · ;, (
stmt -> return · expr ;, this
stmt -> return · ;, this
stmt -> return · expr ;, new
stmt -> return · ;, new
stmt -> return · expr ;, LITBOOL
stmt -> return · ;, LITBOOL
stmt -> return · expr ;, LITINT
stmt -> return · ;, LITINT
stmt -> return · expr ;, LITLONG
stmt -> return · ;, LITLONG
stmt -> return · expr ;, LITFLOAT
stmt -> return · ;, LITFLOAT
stmt -> return · expr ;, LITDOUBLE
stmt -> return · ;, LITDOUBLE
stmt -> return · expr ;, LITCHAR
stmt -> return · ;, LITCHAR
stmt -> return · expr ;, LITSTRING
stmt -> return · ;, LITSTRING
stmt -> return · expr ;, null
stmt -> return · ;, null
stmt -> return · expr ;, ++
stmt -> return · ;, ++
stmt -> return · expr ;, --
stmt -> return · ;, --
stmt -> return · expr ;, break
stmt -> return · ;, break
stmt -> return · expr ;, return
stmt -> return · ;, return
stmt -> return · expr ;, delete
stmt -> return · ;, delete
stmt -> return · expr ;, while
stmt -> return · ;, while
stmt -> return · expr ;, for
stmt -> return · ;, for
stmt -> return · expr ;, if
stmt -> return · ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> return · expr ;, }
stmt -> return · ;, }
stmt -> return · expr ;, &&
stmt -> return · expr ;, ||
stmt -> return · expr ;, +
stmt -> return · expr ;, -
stmt -> return · expr ;, *
stmt -> return · expr ;, /
stmt -> return · expr ;, %
stmt -> return · expr ;, !
stmt -> return · ;, &&
stmt -> return · ;, ||
stmt -> return · ;, +
stmt -> return · ;, -
stmt -> return · ;, *
stmt -> return · ;, /
stmt -> return · ;, %
stmt -> return · ;, !
stmt -> return · expr ;, else
stmt -> return · ;, else
***EndSet***
***EndState***
***State***
35
I_35_111_150_373_408_478_512_580_614_943_977_1058
***Set***
primary -> this ·, .
primary -> this ·, ;
primary -> this ·, &&
primary -> this ·, ||
primary -> this ·, >
primary -> this ·, <
primary -> this ·, >=
primary -> this ·, <=
primary -> this ·, ==
primary -> this ·, !=
primary -> this ·, +
primary -> this ·, -
primary -> this ·, *
primary -> this ·, /
primary -> this ·, %
primary -> this ·, )
primary -> this ·, ,
primary -> this ·, ]
***EndSet***
***EndState***
***State***
36
I_36
***Set***
primary -> ( · expr ), .
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
37
I_37_194_300_858_1198_1335
***Set***
statementblock -> { · statements }, $
statementblock -> { · statements }, namespace
statementblock -> { · statements }, {
statementblock -> { · statements }, ID
statementblock -> { · statements }, void
statementblock -> { · statements }, bool
statementblock -> { · statements }, int
statementblock -> { · statements }, long
statementblock -> { · statements }, float
statementblock -> { · statements }, double
statementblock -> { · statements }, char
statementblock -> { · statements }, string
statementblock -> { · statements }, var
statementblock -> { · statements }, own
statementblock -> { · statements }, bor
statementblock -> { · statements }, const
statementblock -> { · statements }, extern
statementblock -> { · statements }, class
statementblock -> { · statements }, (
statementblock -> { · statements }, this
statementblock -> { · statements }, new
statementblock -> { · statements }, LITBOOL
statementblock -> { · statements }, LITINT
statementblock -> { · statements }, LITLONG
statementblock -> { · statements }, LITFLOAT
statementblock -> { · statements }, LITDOUBLE
statementblock -> { · statements }, LITCHAR
statementblock -> { · statements }, LITSTRING
statementblock -> { · statements }, null
statementblock -> { · statements }, ++
statementblock -> { · statements }, --
statementblock -> { · statements }, break
statementblock -> { · statements }, return
statementblock -> { · statements }, delete
statementblock -> { · statements }, while
statementblock -> { · statements }, for
statementblock -> { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { · statements }, }
statementblock -> { · statements }, &&
statementblock -> { · statements }, ||
statementblock -> { · statements }, +
statementblock -> { · statements }, -
statementblock -> { · statements }, *
statementblock -> { · statements }, /
statementblock -> { · statements }, %
statementblock -> { · statements }, !
statementblock -> { · statements }, else
***EndSet***
***EndState***
***State***
38
I_38_113_152_375_410_480_514_582_616_945_979_1060_1121
***Set***
incdec -> -- · ID, ;
incdec -> -- · ID, &&
incdec -> -- · ID, ||
incdec -> -- · ID, >
incdec -> -- · ID, <
incdec -> -- · ID, >=
incdec -> -- · ID, <=
incdec -> -- · ID, ==
incdec -> -- · ID, !=
incdec -> -- · ID, +
incdec -> -- · ID, -
incdec -> -- · ID, *
incdec -> -- · ID, /
incdec -> -- · ID, %
incdec -> -- · ID, )
incdec -> -- · ID, ,
incdec -> -- · ID, ]
***EndSet***
***EndState***
***State***
39
I_39_114_153_376_411_481_515_583_617_946_980_1061_1122
***Set***
incdec -> ++ · ID, ;
incdec -> ++ · ID, &&
incdec -> ++ · ID, ||
incdec -> ++ · ID, >
incdec -> ++ · ID, <
incdec -> ++ · ID, >=
incdec -> ++ · ID, <=
incdec -> ++ · ID, ==
incdec -> ++ · ID, !=
incdec -> ++ · ID, +
incdec -> ++ · ID, -
incdec -> ++ · ID, *
incdec -> ++ · ID, /
incdec -> ++ · ID, %
incdec -> ++ · ID, )
incdec -> ++ · ID, ,
incdec -> ++ · ID, ]
***EndSet***
***EndState***
***State***
40
I_40_117_156_379_414_484_518_586_620_750_949_983_1064
***Set***
lit -> LITBOOL ·, .
lit -> LITBOOL ·, ;
lit -> LITBOOL ·, &&
lit -> LITBOOL ·, ||
lit -> LITBOOL ·, >
lit -> LITBOOL ·, <
lit -> LITBOOL ·, >=
lit -> LITBOOL ·, <=
lit -> LITBOOL ·, ==
lit -> LITBOOL ·, !=
lit -> LITBOOL ·, +
lit -> LITBOOL ·, -
lit -> LITBOOL ·, *
lit -> LITBOOL ·, /
lit -> LITBOOL ·, %
lit -> LITBOOL ·, )
lit -> LITBOOL ·, ,
lit -> LITBOOL ·, ]
***EndSet***
***EndState***
***State***
41
I_41_118_157_380_415_485_519_587_621_751_950_984_1065
***Set***
lit -> LITINT ·, .
lit -> LITINT ·, ;
lit -> LITINT ·, &&
lit -> LITINT ·, ||
lit -> LITINT ·, >
lit -> LITINT ·, <
lit -> LITINT ·, >=
lit -> LITINT ·, <=
lit -> LITINT ·, ==
lit -> LITINT ·, !=
lit -> LITINT ·, +
lit -> LITINT ·, -
lit -> LITINT ·, *
lit -> LITINT ·, /
lit -> LITINT ·, %
lit -> LITINT ·, )
lit -> LITINT ·, ,
lit -> LITINT ·, ]
***EndSet***
***EndState***
***State***
42
I_42_119_158_381_416_486_520_588_622_752_951_985_1066
***Set***
lit -> LITLONG ·, .
lit -> LITLONG ·, ;
lit -> LITLONG ·, &&
lit -> LITLONG ·, ||
lit -> LITLONG ·, >
lit -> LITLONG ·, <
lit -> LITLONG ·, >=
lit -> LITLONG ·, <=
lit -> LITLONG ·, ==
lit -> LITLONG ·, !=
lit -> LITLONG ·, +
lit -> LITLONG ·, -
lit -> LITLONG ·, *
lit -> LITLONG ·, /
lit -> LITLONG ·, %
lit -> LITLONG ·, )
lit -> LITLONG ·, ,
lit -> LITLONG ·, ]
***EndSet***
***EndState***
***State***
43
I_43_120_159_382_417_487_521_589_623_753_952_986_1067
***Set***
lit -> LITFLOAT ·, .
lit -> LITFLOAT ·, ;
lit -> LITFLOAT ·, &&
lit -> LITFLOAT ·, ||
lit -> LITFLOAT ·, >
lit -> LITFLOAT ·, <
lit -> LITFLOAT ·, >=
lit -> LITFLOAT ·, <=
lit -> LITFLOAT ·, ==
lit -> LITFLOAT ·, !=
lit -> LITFLOAT ·, +
lit -> LITFLOAT ·, -
lit -> LITFLOAT ·, *
lit -> LITFLOAT ·, /
lit -> LITFLOAT ·, %
lit -> LITFLOAT ·, )
lit -> LITFLOAT ·, ,
lit -> LITFLOAT ·, ]
***EndSet***
***EndState***
***State***
44
I_44_121_160_383_418_488_522_590_624_754_953_987_1068
***Set***
lit -> LITDOUBLE ·, .
lit -> LITDOUBLE ·, ;
lit -> LITDOUBLE ·, &&
lit -> LITDOUBLE ·, ||
lit -> LITDOUBLE ·, >
lit -> LITDOUBLE ·, <
lit -> LITDOUBLE ·, >=
lit -> LITDOUBLE ·, <=
lit -> LITDOUBLE ·, ==
lit -> LITDOUBLE ·, !=
lit -> LITDOUBLE ·, +
lit -> LITDOUBLE ·, -
lit -> LITDOUBLE ·, *
lit -> LITDOUBLE ·, /
lit -> LITDOUBLE ·, %
lit -> LITDOUBLE ·, )
lit -> LITDOUBLE ·, ,
lit -> LITDOUBLE ·, ]
***EndSet***
***EndState***
***State***
45
I_45_122_161_384_419_489_523_591_625_755_954_988_1069
***Set***
lit -> LITCHAR ·, .
lit -> LITCHAR ·, ;
lit -> LITCHAR ·, &&
lit -> LITCHAR ·, ||
lit -> LITCHAR ·, >
lit -> LITCHAR ·, <
lit -> LITCHAR ·, >=
lit -> LITCHAR ·, <=
lit -> LITCHAR ·, ==
lit -> LITCHAR ·, !=
lit -> LITCHAR ·, +
lit -> LITCHAR ·, -
lit -> LITCHAR ·, *
lit -> LITCHAR ·, /
lit -> LITCHAR ·, %
lit -> LITCHAR ·, )
lit -> LITCHAR ·, ,
lit -> LITCHAR ·, ]
***EndSet***
***EndState***
***State***
46
I_46_123_162_385_420_490_524_592_626_756_955_989_1070
***Set***
lit -> LITSTRING ·, .
lit -> LITSTRING ·, ;
lit -> LITSTRING ·, &&
lit -> LITSTRING ·, ||
lit -> LITSTRING ·, >
lit -> LITSTRING ·, <
lit -> LITSTRING ·, >=
lit -> LITSTRING ·, <=
lit -> LITSTRING ·, ==
lit -> LITSTRING ·, !=
lit -> LITSTRING ·, +
lit -> LITSTRING ·, -
lit -> LITSTRING ·, *
lit -> LITSTRING ·, /
lit -> LITSTRING ·, %
lit -> LITSTRING ·, )
lit -> LITSTRING ·, ,
lit -> LITSTRING ·, ]
***EndSet***
***EndState***
***State***
47
I_47_248
***Set***
call -> ID · ( args ), ;
incdec -> ID · ++, ;
incdec -> ID · --, ;
stype -> ID ·, ID
stype -> ID ·, operator
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], ID
idBracket -> ID · [ optidx ], operator
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
stype -> ID ·, )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), )
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
***EndSet***
***EndState***
***State***
48
I_48
***Set***
namespaceusings -> namespaceusings namespaceusing ·, namespace
namespaceusings -> namespaceusings namespaceusing ·, {
namespaceusings -> namespaceusings namespaceusing ·, ID
namespaceusings -> namespaceusings namespaceusing ·, void
namespaceusings -> namespaceusings namespaceusing ·, bool
namespaceusings -> namespaceusings namespaceusing ·, int
namespaceusings -> namespaceusings namespaceusing ·, long
namespaceusings -> namespaceusings namespaceusing ·, float
namespaceusings -> namespaceusings namespaceusing ·, double
namespaceusings -> namespaceusings namespaceusing ·, char
namespaceusings -> namespaceusings namespaceusing ·, string
namespaceusings -> namespaceusings namespaceusing ·, var
namespaceusings -> namespaceusings namespaceusing ·, own
namespaceusings -> namespaceusings namespaceusing ·, bor
namespaceusings -> namespaceusings namespaceusing ·, const
namespaceusings -> namespaceusings namespaceusing ·, extern
namespaceusings -> namespaceusings namespaceusing ·, class
namespaceusings -> namespaceusings namespaceusing ·, (
namespaceusings -> namespaceusings namespaceusing ·, this
namespaceusings -> namespaceusings namespaceusing ·, new
namespaceusings -> namespaceusings namespaceusing ·, LITBOOL
namespaceusings -> namespaceusings namespaceusing ·, LITINT
namespaceusings -> namespaceusings namespaceusing ·, LITLONG
namespaceusings -> namespaceusings namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusings namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusings namespaceusing ·, LITCHAR
namespaceusings -> namespaceusings namespaceusing ·, LITSTRING
namespaceusings -> namespaceusings namespaceusing ·, null
namespaceusings -> namespaceusings namespaceusing ·, ++
namespaceusings -> namespaceusings namespaceusing ·, --
namespaceusings -> namespaceusings namespaceusing ·, break
namespaceusings -> namespaceusings namespaceusing ·, return
namespaceusings -> namespaceusings namespaceusing ·, delete
namespaceusings -> namespaceusings namespaceusing ·, while
namespaceusings -> namespaceusings namespaceusing ·, for
namespaceusings -> namespaceusings namespaceusing ·, if
namespaceusings -> namespaceusings namespaceusing ·, $
namespaceusings -> namespaceusings namespaceusing ·, using
***EndSet***
***EndState***
***State***
49
I_49
***Set***
S -> importations namespaceusings statements ·, $
statements -> statements · stmt, $
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
50
I_50_196_301_859_1199_1336
***Set***
stmt -> namespaceblock ·, $
stmt -> namespaceblock ·, namespace
stmt -> namespaceblock ·, {
stmt -> namespaceblock ·, ID
stmt -> namespaceblock ·, void
stmt -> namespaceblock ·, bool
stmt -> namespaceblock ·, int
stmt -> namespaceblock ·, long
stmt -> namespaceblock ·, float
stmt -> namespaceblock ·, double
stmt -> namespaceblock ·, char
stmt -> namespaceblock ·, string
stmt -> namespaceblock ·, var
stmt -> namespaceblock ·, own
stmt -> namespaceblock ·, bor
stmt -> namespaceblock ·, const
stmt -> namespaceblock ·, extern
stmt -> namespaceblock ·, class
stmt -> namespaceblock ·, (
stmt -> namespaceblock ·, this
stmt -> namespaceblock ·, new
stmt -> namespaceblock ·, LITBOOL
stmt -> namespaceblock ·, LITINT
stmt -> namespaceblock ·, LITLONG
stmt -> namespaceblock ·, LITFLOAT
stmt -> namespaceblock ·, LITDOUBLE
stmt -> namespaceblock ·, LITCHAR
stmt -> namespaceblock ·, LITSTRING
stmt -> namespaceblock ·, null
stmt -> namespaceblock ·, ++
stmt -> namespaceblock ·, --
stmt -> namespaceblock ·, break
stmt -> namespaceblock ·, return
stmt -> namespaceblock ·, delete
stmt -> namespaceblock ·, while
stmt -> namespaceblock ·, for
stmt -> namespaceblock ·, if
stmt -> namespaceblock ·, }
stmt -> namespaceblock ·, &&
stmt -> namespaceblock ·, ||
stmt -> namespaceblock ·, +
stmt -> namespaceblock ·, -
stmt -> namespaceblock ·, *
stmt -> namespaceblock ·, /
stmt -> namespaceblock ·, %
stmt -> namespaceblock ·, !
stmt -> namespaceblock ·, else
***EndSet***
***EndState***
***State***
51
I_51_197_302_860_1200_1337
***Set***
stmt -> statementblock ·, $
stmt -> statementblock ·, namespace
stmt -> statementblock ·, {
stmt -> statementblock ·, ID
stmt -> statementblock ·, void
stmt -> statementblock ·, bool
stmt -> statementblock ·, int
stmt -> statementblock ·, long
stmt -> statementblock ·, float
stmt -> statementblock ·, double
stmt -> statementblock ·, char
stmt -> statementblock ·, string
stmt -> statementblock ·, var
stmt -> statementblock ·, own
stmt -> statementblock ·, bor
stmt -> statementblock ·, const
stmt -> statementblock ·, extern
stmt -> statementblock ·, class
stmt -> statementblock ·, (
stmt -> statementblock ·, this
stmt -> statementblock ·, new
stmt -> statementblock ·, LITBOOL
stmt -> statementblock ·, LITINT
stmt -> statementblock ·, LITLONG
stmt -> statementblock ·, LITFLOAT
stmt -> statementblock ·, LITDOUBLE
stmt -> statementblock ·, LITCHAR
stmt -> statementblock ·, LITSTRING
stmt -> statementblock ·, null
stmt -> statementblock ·, ++
stmt -> statementblock ·, --
stmt -> statementblock ·, break
stmt -> statementblock ·, return
stmt -> statementblock ·, delete
stmt -> statementblock ·, while
stmt -> statementblock ·, for
stmt -> statementblock ·, if
stmt -> statementblock ·, }
stmt -> statementblock ·, &&
stmt -> statementblock ·, ||
stmt -> statementblock ·, +
stmt -> statementblock ·, -
stmt -> statementblock ·, *
stmt -> statementblock ·, /
stmt -> statementblock ·, %
stmt -> statementblock ·, !
stmt -> statementblock ·, else
***EndSet***
***EndState***
***State***
52
I_52_198
***Set***
statements -> stmt ·, $
statements -> stmt ·, namespace
statements -> stmt ·, {
statements -> stmt ·, ID
statements -> stmt ·, void
statements -> stmt ·, bool
statements -> stmt ·, int
statements -> stmt ·, long
statements -> stmt ·, float
statements -> stmt ·, double
statements -> stmt ·, char
statements -> stmt ·, string
statements -> stmt ·, var
statements -> stmt ·, own
statements -> stmt ·, bor
statements -> stmt ·, const
statements -> stmt ·, extern
statements -> stmt ·, class
statements -> stmt ·, (
statements -> stmt ·, this
statements -> stmt ·, new
statements -> stmt ·, LITBOOL
statements -> stmt ·, LITINT
statements -> stmt ·, LITLONG
statements -> stmt ·, LITFLOAT
statements -> stmt ·, LITDOUBLE
statements -> stmt ·, LITCHAR
statements -> stmt ·, LITSTRING
statements -> stmt ·, null
statements -> stmt ·, ++
statements -> stmt ·, --
statements -> stmt ·, break
statements -> stmt ·, return
statements -> stmt ·, delete
statements -> stmt ·, while
statements -> stmt ·, for
statements -> stmt ·, if
statements -> stmt ·, }
***EndSet***
***EndState***
***State***
53
I_53_199_304_862_1202_1339
***Set***
stmt -> declstmt ·, $
stmt -> declstmt ·, namespace
stmt -> declstmt ·, {
stmt -> declstmt ·, ID
stmt -> declstmt ·, void
stmt -> declstmt ·, bool
stmt -> declstmt ·, int
stmt -> declstmt ·, long
stmt -> declstmt ·, float
stmt -> declstmt ·, double
stmt -> declstmt ·, char
stmt -> declstmt ·, string
stmt -> declstmt ·, var
stmt -> declstmt ·, own
stmt -> declstmt ·, bor
stmt -> declstmt ·, const
stmt -> declstmt ·, extern
stmt -> declstmt ·, class
stmt -> declstmt ·, (
stmt -> declstmt ·, this
stmt -> declstmt ·, new
stmt -> declstmt ·, LITBOOL
stmt -> declstmt ·, LITINT
stmt -> declstmt ·, LITLONG
stmt -> declstmt ·, LITFLOAT
stmt -> declstmt ·, LITDOUBLE
stmt -> declstmt ·, LITCHAR
stmt -> declstmt ·, LITSTRING
stmt -> declstmt ·, null
stmt -> declstmt ·, ++
stmt -> declstmt ·, --
stmt -> declstmt ·, break
stmt -> declstmt ·, return
stmt -> declstmt ·, delete
stmt -> declstmt ·, while
stmt -> declstmt ·, for
stmt -> declstmt ·, if
stmt -> declstmt ·, }
stmt -> declstmt ·, &&
stmt -> declstmt ·, ||
stmt -> declstmt ·, +
stmt -> declstmt ·, -
stmt -> declstmt ·, *
stmt -> declstmt ·, /
stmt -> declstmt ·, %
stmt -> declstmt ·, !
stmt -> declstmt ·, else
***EndSet***
***EndState***
***State***
54
I_54_200_305_863_1203_1340
***Set***
stmt -> stmtexpr · ;, $
stmt -> stmtexpr · ;, namespace
stmt -> stmtexpr · ;, {
stmt -> stmtexpr · ;, ID
stmt -> stmtexpr · ;, void
stmt -> stmtexpr · ;, bool
stmt -> stmtexpr · ;, int
stmt -> stmtexpr · ;, long
stmt -> stmtexpr · ;, float
stmt -> stmtexpr · ;, double
stmt -> stmtexpr · ;, char
stmt -> stmtexpr · ;, string
stmt -> stmtexpr · ;, var
stmt -> stmtexpr · ;, own
stmt -> stmtexpr · ;, bor
stmt -> stmtexpr · ;, const
stmt -> stmtexpr · ;, extern
stmt -> stmtexpr · ;, class
stmt -> stmtexpr · ;, (
stmt -> stmtexpr · ;, this
stmt -> stmtexpr · ;, new
stmt -> stmtexpr · ;, LITBOOL
stmt -> stmtexpr · ;, LITINT
stmt -> stmtexpr · ;, LITLONG
stmt -> stmtexpr · ;, LITFLOAT
stmt -> stmtexpr · ;, LITDOUBLE
stmt -> stmtexpr · ;, LITCHAR
stmt -> stmtexpr · ;, LITSTRING
stmt -> stmtexpr · ;, null
stmt -> stmtexpr · ;, ++
stmt -> stmtexpr · ;, --
stmt -> stmtexpr · ;, break
stmt -> stmtexpr · ;, return
stmt -> stmtexpr · ;, delete
stmt -> stmtexpr · ;, while
stmt -> stmtexpr · ;, for
stmt -> stmtexpr · ;, if
stmt -> stmtexpr · ;, }
stmt -> stmtexpr · ;, &&
stmt -> stmtexpr · ;, ||
stmt -> stmtexpr · ;, +
stmt -> stmtexpr · ;, -
stmt -> stmtexpr · ;, *
stmt -> stmtexpr · ;, /
stmt -> stmtexpr · ;, %
stmt -> stmtexpr · ;, !
stmt -> stmtexpr · ;, else
***EndSet***
***EndState***
***State***
55
I_55_1125
***Set***
stmtexpr -> assign ·, ;
stmtexpr -> assign ·, )
***EndSet***
***EndState***
***State***
56
I_56_1126
***Set***
stmtexpr -> call ·, ;
primary -> call ·, .
stmtexpr -> call ·, )
***EndSet***
***EndState***
***State***
57
I_57_127_166_389
***Set***
lvalue -> indexaccess ·, =
lvalue -> indexaccess ·, +=
lvalue -> indexaccess ·, -=
lvalue -> indexaccess ·, *=
lvalue -> indexaccess ·, /=
lvalue -> indexaccess ·, %=
primary -> indexaccess ·, .
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, )
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
58
I_58_1127
***Set***
stmtexpr -> newobj ·, ;
primary -> newobj ·, .
stmtexpr -> newobj ·, )
***EndSet***
***EndState***
***State***
59
I_59_129_168_391_425_495_529_597_631_960_994_1075
***Set***
primary -> newarr ·, .
primary -> newarr ·, ;
primary -> newarr ·, &&
primary -> newarr ·, ||
primary -> newarr ·, >
primary -> newarr ·, <
primary -> newarr ·, >=
primary -> newarr ·, <=
primary -> newarr ·, ==
primary -> newarr ·, !=
primary -> newarr ·, +
primary -> newarr ·, -
primary -> newarr ·, *
primary -> newarr ·, /
primary -> newarr ·, %
primary -> newarr ·, )
primary -> newarr ·, ,
primary -> newarr ·, ]
***EndSet***
***EndState***
***State***
60
I_60_1128
***Set***
stmtexpr -> incdec ·, ;
stmtexpr -> incdec ·, )
***EndSet***
***EndState***
***State***
61
I_61_201_306_768_864_1204_1341
***Set***
declstmt -> type · ID = expr ;, $
declstmt -> type · ID ( params ) { statements }, $
declstmt -> type · operator ID ( params ) { statements }, $
declstmt -> type · ID = expr ;, namespace
declstmt -> type · ID ( params ) { statements }, namespace
declstmt -> type · operator ID ( params ) { statements }, namespace
declstmt -> type · ID = expr ;, {
declstmt -> type · ID ( params ) { statements }, {
declstmt -> type · operator ID ( params ) { statements }, {
declstmt -> type · ID = expr ;, ID
declstmt -> type · ID ( params ) { statements }, ID
declstmt -> type · operator ID ( params ) { statements }, ID
declstmt -> type · ID = expr ;, void
declstmt -> type · ID ( params ) { statements }, void
declstmt -> type · operator ID ( params ) { statements }, void
declstmt -> type · ID = expr ;, bool
declstmt -> type · ID ( params ) { statements }, bool
declstmt -> type · operator ID ( params ) { statements }, bool
declstmt -> type · ID = expr ;, int
declstmt -> type · ID ( params ) { statements }, int
declstmt -> type · operator ID ( params ) { statements }, int
declstmt -> type · ID = expr ;, long
declstmt -> type · ID ( params ) { statements }, long
declstmt -> type · operator ID ( params ) { statements }, long
declstmt -> type · ID = expr ;, float
declstmt -> type · ID ( params ) { statements }, float
declstmt -> type · operator ID ( params ) { statements }, float
declstmt -> type · ID = expr ;, double
declstmt -> type · ID ( params ) { statements }, double
declstmt -> type · operator ID ( params ) { statements }, double
declstmt -> type · ID = expr ;, char
declstmt -> type · ID ( params ) { statements }, char
declstmt -> type · operator ID ( params ) { statements }, char
declstmt -> type · ID = expr ;, string
declstmt -> type · ID ( params ) { statements }, string
declstmt -> type · operator ID ( params ) { statements }, string
declstmt -> type · ID = expr ;, var
declstmt -> type · ID ( params ) { statements }, var
declstmt -> type · operator ID ( params ) { statements }, var
declstmt -> type · ID = expr ;, own
declstmt -> type · ID ( params ) { statements }, own
declstmt -> type · operator ID ( params ) { statements }, own
declstmt -> type · ID = expr ;, bor
declstmt -> type · ID ( params ) { statements }, bor
declstmt -> type · operator ID ( params ) { statements }, bor
declstmt -> type · ID = expr ;, const
declstmt -> type · ID ( params ) { statements }, const
declstmt -> type · operator ID ( params ) { statements }, const
declstmt -> type · ID = expr ;, extern
declstmt -> type · ID ( params ) { statements }, extern
declstmt -> type · operator ID ( params ) { statements }, extern
declstmt -> type · ID = expr ;, class
declstmt -> type · ID ( params ) { statements }, class
declstmt -> type · operator ID ( params ) { statements }, class
declstmt -> type · ID = expr ;, (
declstmt -> type · ID ( params ) { statements }, (
declstmt -> type · operator ID ( params ) { statements }, (
declstmt -> type · ID = expr ;, this
declstmt -> type · ID ( params ) { statements }, this
declstmt -> type · operator ID ( params ) { statements }, this
declstmt -> type · ID = expr ;, new
declstmt -> type · ID ( params ) { statements }, new
declstmt -> type · operator ID ( params ) { statements }, new
declstmt -> type · ID = expr ;, LITBOOL
declstmt -> type · ID ( params ) { statements }, LITBOOL
declstmt -> type · operator ID ( params ) { statements }, LITBOOL
declstmt -> type · ID = expr ;, LITINT
declstmt -> type · ID ( params ) { statements }, LITINT
declstmt -> type · operator ID ( params ) { statements }, LITINT
declstmt -> type · ID = expr ;, LITLONG
declstmt -> type · ID ( params ) { statements }, LITLONG
declstmt -> type · operator ID ( params ) { statements }, LITLONG
declstmt -> type · ID = expr ;, LITFLOAT
declstmt -> type · ID ( params ) { statements }, LITFLOAT
declstmt -> type · operator ID ( params ) { statements }, LITFLOAT
declstmt -> type · ID = expr ;, LITDOUBLE
declstmt -> type · ID ( params ) { statements }, LITDOUBLE
declstmt -> type · operator ID ( params ) { statements }, LITDOUBLE
declstmt -> type · ID = expr ;, LITCHAR
declstmt -> type · ID ( params ) { statements }, LITCHAR
declstmt -> type · operator ID ( params ) { statements }, LITCHAR
declstmt -> type · ID = expr ;, LITSTRING
declstmt -> type · ID ( params ) { statements }, LITSTRING
declstmt -> type · operator ID ( params ) { statements }, LITSTRING
declstmt -> type · ID = expr ;, null
declstmt -> type · ID ( params ) { statements }, null
declstmt -> type · operator ID ( params ) { statements }, null
declstmt -> type · ID = expr ;, ++
declstmt -> type · ID ( params ) { statements }, ++
declstmt -> type · operator ID ( params ) { statements }, ++
declstmt -> type · ID = expr ;, --
declstmt -> type · ID ( params ) { statements }, --
declstmt -> type · operator ID ( params ) { statements }, --
declstmt -> type · ID = expr ;, break
declstmt -> type · ID ( params ) { statements }, break
declstmt -> type · operator ID ( params ) { statements }, break
declstmt -> type · ID = expr ;, return
declstmt -> type · ID ( params ) { statements }, return
declstmt -> type · operator ID ( params ) { statements }, return
declstmt -> type · ID = expr ;, delete
declstmt -> type · ID ( params ) { statements }, delete
declstmt -> type · operator ID ( params ) { statements }, delete
declstmt -> type · ID = expr ;, while
declstmt -> type · ID ( params ) { statements }, while
declstmt -> type · operator ID ( params ) { statements }, while
declstmt -> type · ID = expr ;, for
declstmt -> type · ID ( params ) { statements }, for
declstmt -> type · operator ID ( params ) { statements }, for
declstmt -> type · ID = expr ;, if
declstmt -> type · ID ( params ) { statements }, if
declstmt -> type · operator ID ( params ) { statements }, if
declstmt -> type · ID = expr ;, }
declstmt -> type · ID ( params ) { statements }, }
declstmt -> type · operator ID ( params ) { statements }, }
declstmt -> type · ID = expr ;, &&
declstmt -> type · ID ( params ) { statements }, &&
declstmt -> type · operator ID ( params ) { statements }, &&
declstmt -> type · ID = expr ;, ||
declstmt -> type · ID ( params ) { statements }, ||
declstmt -> type · operator ID ( params ) { statements }, ||
declstmt -> type · ID = expr ;, +
declstmt -> type · ID ( params ) { statements }, +
declstmt -> type · operator ID ( params ) { statements }, +
declstmt -> type · ID = expr ;, -
declstmt -> type · ID ( params ) { statements }, -
declstmt -> type · operator ID ( params ) { statements }, -
declstmt -> type · ID = expr ;, *
declstmt -> type · ID ( params ) { statements }, *
declstmt -> type · operator ID ( params ) { statements }, *
declstmt -> type · ID = expr ;, /
declstmt -> type · ID ( params ) { statements }, /
declstmt -> type · operator ID ( params ) { statements }, /
declstmt -> type · ID = expr ;, %
declstmt -> type · ID ( params ) { statements }, %
declstmt -> type · operator ID ( params ) { statements }, %
declstmt -> type · ID = expr ;, !
declstmt -> type · ID ( params ) { statements }, !
declstmt -> type · operator ID ( params ) { statements }, !
declstmt -> type · ID = expr ;, else
declstmt -> type · ID ( params ) { statements }, else
declstmt -> type · operator ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
62
I_62_86_250
***Set***
type -> stype ·, ID
type -> stype ·, operator
type -> stype ·, )
***EndSet***
***EndState***
***State***
63
I_63_87_251
***Set***
type -> arrtype ·, ID
type -> arrtype ·, operator
type -> arrtype ·, )
***EndSet***
***EndState***
***State***
64
I_64_88_252
***Set***
stype -> primitive ·, ID
stype -> primitive ·, operator
primitiveBracket -> primitive · [ optidx ], ID
primitiveBracket -> primitive · [ optidx ], operator
stype -> primitive ·, )
primitiveBracket -> primitive · [ optidx ], )
***EndSet***
***EndState***
***State***
65
I_65
***Set***
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
memberaccess -> primary · . ID, [
memberaccess -> primary · . ID, .
***EndSet***
***EndState***
***State***
66
I_66_138_177_400_431_501_534_603_636_966_999_1080
***Set***
primary -> lit ·, .
primary -> lit ·, ;
primary -> lit ·, &&
primary -> lit ·, ||
primary -> lit ·, >
primary -> lit ·, <
primary -> lit ·, >=
primary -> lit ·, <=
primary -> lit ·, ==
primary -> lit ·, !=
primary -> lit ·, +
primary -> lit ·, -
primary -> lit ·, *
primary -> lit ·, /
primary -> lit ·, %
primary -> lit ·, )
primary -> lit ·, ,
primary -> lit ·, ]
***EndSet***
***EndState***
***State***
67
I_67_179_402
***Set***
assign -> lvalue · = expr, ;
assign -> lvalue · += expr, ;
assign -> lvalue · -= expr, ;
assign -> lvalue · *= expr, ;
assign -> lvalue · /= expr, ;
assign -> lvalue · %= expr, ;
assign -> lvalue · = expr, )
assign -> lvalue · += expr, )
assign -> lvalue · -= expr, )
assign -> lvalue · *= expr, )
assign -> lvalue · /= expr, )
assign -> lvalue · %= expr, )
assign -> lvalue · = expr, ,
assign -> lvalue · += expr, ,
assign -> lvalue · -= expr, ,
assign -> lvalue · *= expr, ,
assign -> lvalue · /= expr, ,
assign -> lvalue · %= expr, ,
***EndSet***
***EndState***
***State***
68
I_68_140_180_403_1129
***Set***
call -> memberaccess · ( args ), ;
lvalue -> memberaccess ·, =
lvalue -> memberaccess ·, +=
lvalue -> memberaccess ·, -=
lvalue -> memberaccess ·, *=
lvalue -> memberaccess ·, /=
lvalue -> memberaccess ·, %=
indexaccess -> memberaccess · [ aexpr ], =
indexaccess -> memberaccess · [ aexpr ], +=
indexaccess -> memberaccess · [ aexpr ], -=
indexaccess -> memberaccess · [ aexpr ], *=
indexaccess -> memberaccess · [ aexpr ], /=
indexaccess -> memberaccess · [ aexpr ], %=
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
indexaccess -> memberaccess · [ aexpr ], ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
69
I_69_89_254
***Set***
arrtype -> stypeBracket ·, ID
arrtype -> stypeBracket ·, operator
arrtype -> stypeBracket ·, )
***EndSet***
***EndState***
***State***
70
I_70_255
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, operator
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
stypeBracket -> idBracket ·, )
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
***EndSet***
***EndState***
***State***
71
I_71_91_108_238_256_313_672_716_790_813_877_900_1220_1243_1287
***Set***
stypeBracket -> primitiveBracket ·, ID
stypeBracket -> primitiveBracket ·, operator
stypeBracket -> primitiveBracket ·, .
stypeBracket -> primitiveBracket ·, ;
stypeBracket -> primitiveBracket ·, &&
stypeBracket -> primitiveBracket ·, ||
stypeBracket -> primitiveBracket ·, >
stypeBracket -> primitiveBracket ·, <
stypeBracket -> primitiveBracket ·, >=
stypeBracket -> primitiveBracket ·, <=
stypeBracket -> primitiveBracket ·, ==
stypeBracket -> primitiveBracket ·, !=
stypeBracket -> primitiveBracket ·, +
stypeBracket -> primitiveBracket ·, -
stypeBracket -> primitiveBracket ·, *
stypeBracket -> primitiveBracket ·, /
stypeBracket -> primitiveBracket ·, %
stypeBracket -> primitiveBracket ·, )
stypeBracket -> primitiveBracket ·, ,
stypeBracket -> primitiveBracket ·, ]
***EndSet***
***EndState***
***State***
72
I_72
***Set***
importation -> import < LITSTRING > ·, using
importation -> import < LITSTRING > ·, namespace
importation -> import < LITSTRING > ·, {
importation -> import < LITSTRING > ·, ID
importation -> import < LITSTRING > ·, void
importation -> import < LITSTRING > ·, bool
importation -> import < LITSTRING > ·, int
importation -> import < LITSTRING > ·, long
importation -> import < LITSTRING > ·, float
importation -> import < LITSTRING > ·, double
importation -> import < LITSTRING > ·, char
importation -> import < LITSTRING > ·, string
importation -> import < LITSTRING > ·, var
importation -> import < LITSTRING > ·, own
importation -> import < LITSTRING > ·, bor
importation -> import < LITSTRING > ·, const
importation -> import < LITSTRING > ·, extern
importation -> import < LITSTRING > ·, class
importation -> import < LITSTRING > ·, (
importation -> import < LITSTRING > ·, this
importation -> import < LITSTRING > ·, new
importation -> import < LITSTRING > ·, LITBOOL
importation -> import < LITSTRING > ·, LITINT
importation -> import < LITSTRING > ·, LITLONG
importation -> import < LITSTRING > ·, LITFLOAT
importation -> import < LITSTRING > ·, LITDOUBLE
importation -> import < LITSTRING > ·, LITCHAR
importation -> import < LITSTRING > ·, LITSTRING
importation -> import < LITSTRING > ·, null
importation -> import < LITSTRING > ·, ++
importation -> import < LITSTRING > ·, --
importation -> import < LITSTRING > ·, break
importation -> import < LITSTRING > ·, return
importation -> import < LITSTRING > ·, delete
importation -> import < LITSTRING > ·, while
importation -> import < LITSTRING > ·, for
importation -> import < LITSTRING > ·, if
importation -> import < LITSTRING > ·, $
importation -> import < LITSTRING > ·, import
***EndSet***
***EndState***
***State***
73
I_73
***Set***
namespaceusing -> using ID ; ·, namespace
namespaceusing -> using ID ; ·, {
namespaceusing -> using ID ; ·, ID
namespaceusing -> using ID ; ·, void
namespaceusing -> using ID ; ·, bool
namespaceusing -> using ID ; ·, int
namespaceusing -> using ID ; ·, long
namespaceusing -> using ID ; ·, float
namespaceusing -> using ID ; ·, double
namespaceusing -> using ID ; ·, char
namespaceusing -> using ID ; ·, string
namespaceusing -> using ID ; ·, var
namespaceusing -> using ID ; ·, own
namespaceusing -> using ID ; ·, bor
namespaceusing -> using ID ; ·, const
namespaceusing -> using ID ; ·, extern
namespaceusing -> using ID ; ·, class
namespaceusing -> using ID ; ·, (
namespaceusing -> using ID ; ·, this
namespaceusing -> using ID ; ·, new
namespaceusing -> using ID ; ·, LITBOOL
namespaceusing -> using ID ; ·, LITINT
namespaceusing -> using ID ; ·, LITLONG
namespaceusing -> using ID ; ·, LITFLOAT
namespaceusing -> using ID ; ·, LITDOUBLE
namespaceusing -> using ID ; ·, LITCHAR
namespaceusing -> using ID ; ·, LITSTRING
namespaceusing -> using ID ; ·, null
namespaceusing -> using ID ; ·, ++
namespaceusing -> using ID ; ·, --
namespaceusing -> using ID ; ·, break
namespaceusing -> using ID ; ·, return
namespaceusing -> using ID ; ·, delete
namespaceusing -> using ID ; ·, while
namespaceusing -> using ID ; ·, for
namespaceusing -> using ID ; ·, if
namespaceusing -> using ID ; ·, $
namespaceusing -> using ID ; ·, using
***EndSet***
***EndState***
***State***
74
I_74_352_546_1134_1392_1470
***Set***
namespaceblock -> namespace ID · { statements }, $
namespaceblock -> namespace ID · { statements }, namespace
namespaceblock -> namespace ID · { statements }, {
namespaceblock -> namespace ID · { statements }, ID
namespaceblock -> namespace ID · { statements }, void
namespaceblock -> namespace ID · { statements }, bool
namespaceblock -> namespace ID · { statements }, int
namespaceblock -> namespace ID · { statements }, long
namespaceblock -> namespace ID · { statements }, float
namespaceblock -> namespace ID · { statements }, double
namespaceblock -> namespace ID · { statements }, char
namespaceblock -> namespace ID · { statements }, string
namespaceblock -> namespace ID · { statements }, var
namespaceblock -> namespace ID · { statements }, own
namespaceblock -> namespace ID · { statements }, bor
namespaceblock -> namespace ID · { statements }, const
namespaceblock -> namespace ID · { statements }, extern
namespaceblock -> namespace ID · { statements }, class
namespaceblock -> namespace ID · { statements }, (
namespaceblock -> namespace ID · { statements }, this
namespaceblock -> namespace ID · { statements }, new
namespaceblock -> namespace ID · { statements }, LITBOOL
namespaceblock -> namespace ID · { statements }, LITINT
namespaceblock -> namespace ID · { statements }, LITLONG
namespaceblock -> namespace ID · { statements }, LITFLOAT
namespaceblock -> namespace ID · { statements }, LITDOUBLE
namespaceblock -> namespace ID · { statements }, LITCHAR
namespaceblock -> namespace ID · { statements }, LITSTRING
namespaceblock -> namespace ID · { statements }, null
namespaceblock -> namespace ID · { statements }, ++
namespaceblock -> namespace ID · { statements }, --
namespaceblock -> namespace ID · { statements }, break
namespaceblock -> namespace ID · { statements }, return
namespaceblock -> namespace ID · { statements }, delete
namespaceblock -> namespace ID · { statements }, while
namespaceblock -> namespace ID · { statements }, for
namespaceblock -> namespace ID · { statements }, if
namespaceblock -> namespace ID · { statements }, }
namespaceblock -> namespace ID · { statements }, &&
namespaceblock -> namespace ID · { statements }, ||
namespaceblock -> namespace ID · { statements }, +
namespaceblock -> namespace ID · { statements }, -
namespaceblock -> namespace ID · { statements }, *
namespaceblock -> namespace ID · { statements }, /
namespaceblock -> namespace ID · { statements }, %
namespaceblock -> namespace ID · { statements }, !
namespaceblock -> namespace ID · { statements }, else
***EndSet***
***EndState***
***State***
75
I_84_765
***Set***
stype -> ID ·, ID
idBracket -> ID · [ optidx ], ID
stype -> ID ·, operator
idBracket -> ID · [ optidx ], operator
***EndSet***
***EndState***
***State***
76
I_85_353_547_1042_1135_1393_1471
***Set***
declstmt -> extern type · ID ( params ) ;, $
declstmt -> extern type · ID ( params ) ;, namespace
declstmt -> extern type · ID ( params ) ;, {
declstmt -> extern type · ID ( params ) ;, ID
declstmt -> extern type · ID ( params ) ;, void
declstmt -> extern type · ID ( params ) ;, bool
declstmt -> extern type · ID ( params ) ;, int
declstmt -> extern type · ID ( params ) ;, long
declstmt -> extern type · ID ( params ) ;, float
declstmt -> extern type · ID ( params ) ;, double
declstmt -> extern type · ID ( params ) ;, char
declstmt -> extern type · ID ( params ) ;, string
declstmt -> extern type · ID ( params ) ;, var
declstmt -> extern type · ID ( params ) ;, own
declstmt -> extern type · ID ( params ) ;, bor
declstmt -> extern type · ID ( params ) ;, const
declstmt -> extern type · ID ( params ) ;, extern
declstmt -> extern type · ID ( params ) ;, class
declstmt -> extern type · ID ( params ) ;, (
declstmt -> extern type · ID ( params ) ;, this
declstmt -> extern type · ID ( params ) ;, new
declstmt -> extern type · ID ( params ) ;, LITBOOL
declstmt -> extern type · ID ( params ) ;, LITINT
declstmt -> extern type · ID ( params ) ;, LITLONG
declstmt -> extern type · ID ( params ) ;, LITFLOAT
declstmt -> extern type · ID ( params ) ;, LITDOUBLE
declstmt -> extern type · ID ( params ) ;, LITCHAR
declstmt -> extern type · ID ( params ) ;, LITSTRING
declstmt -> extern type · ID ( params ) ;, null
declstmt -> extern type · ID ( params ) ;, ++
declstmt -> extern type · ID ( params ) ;, --
declstmt -> extern type · ID ( params ) ;, break
declstmt -> extern type · ID ( params ) ;, return
declstmt -> extern type · ID ( params ) ;, delete
declstmt -> extern type · ID ( params ) ;, while
declstmt -> extern type · ID ( params ) ;, for
declstmt -> extern type · ID ( params ) ;, if
declstmt -> extern type · ID ( params ) ;, }
declstmt -> extern type · ID ( params ) ;, &&
declstmt -> extern type · ID ( params ) ;, ||
declstmt -> extern type · ID ( params ) ;, +
declstmt -> extern type · ID ( params ) ;, -
declstmt -> extern type · ID ( params ) ;, *
declstmt -> extern type · ID ( params ) ;, /
declstmt -> extern type · ID ( params ) ;, %
declstmt -> extern type · ID ( params ) ;, !
declstmt -> extern type · ID ( params ) ;, else
***EndSet***
***EndState***
***State***
77
I_90_107_237_312_671_715_769_789_812_876_899_1219_1242_1286
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, .
stypeBracket -> idBracket ·, ;
stypeBracket -> idBracket ·, &&
stypeBracket -> idBracket ·, ||
stypeBracket -> idBracket ·, >
stypeBracket -> idBracket ·, <
stypeBracket -> idBracket ·, >=
stypeBracket -> idBracket ·, <=
stypeBracket -> idBracket ·, ==
stypeBracket -> idBracket ·, !=
stypeBracket -> idBracket ·, +
stypeBracket -> idBracket ·, -
stypeBracket -> idBracket ·, *
stypeBracket -> idBracket ·, /
stypeBracket -> idBracket ·, %
stypeBracket -> idBracket ·, )
stypeBracket -> idBracket ·, ,
stypeBracket -> idBracket ·, ]
stypeBracket -> idBracket ·, operator
***EndSet***
***EndState***
***State***
78
I_92_354_548_1043_1136_1394_1472
***Set***
declstmt -> const type · ID = lit ;, $
declstmt -> const type · ID = lit ;, namespace
declstmt -> const type · ID = lit ;, {
declstmt -> const type · ID = lit ;, ID
declstmt -> const type · ID = lit ;, void
declstmt -> const type · ID = lit ;, bool
declstmt -> const type · ID = lit ;, int
declstmt -> const type · ID = lit ;, long
declstmt -> const type · ID = lit ;, float
declstmt -> const type · ID = lit ;, double
declstmt -> const type · ID = lit ;, char
declstmt -> const type · ID = lit ;, string
declstmt -> const type · ID = lit ;, var
declstmt -> const type · ID = lit ;, own
declstmt -> const type · ID = lit ;, bor
declstmt -> const type · ID = lit ;, const
declstmt -> const type · ID = lit ;, extern
declstmt -> const type · ID = lit ;, class
declstmt -> const type · ID = lit ;, (
declstmt -> const type · ID = lit ;, this
declstmt -> const type · ID = lit ;, new
declstmt -> const type · ID = lit ;, LITBOOL
declstmt -> const type · ID = lit ;, LITINT
declstmt -> const type · ID = lit ;, LITLONG
declstmt -> const type · ID = lit ;, LITFLOAT
declstmt -> const type · ID = lit ;, LITDOUBLE
declstmt -> const type · ID = lit ;, LITCHAR
declstmt -> const type · ID = lit ;, LITSTRING
declstmt -> const type · ID = lit ;, null
declstmt -> const type · ID = lit ;, ++
declstmt -> const type · ID = lit ;, --
declstmt -> const type · ID = lit ;, break
declstmt -> const type · ID = lit ;, return
declstmt -> const type · ID = lit ;, delete
declstmt -> const type · ID = lit ;, while
declstmt -> const type · ID = lit ;, for
declstmt -> const type · ID = lit ;, if
declstmt -> const type · ID = lit ;, }
declstmt -> const type · ID = lit ;, &&
declstmt -> const type · ID = lit ;, ||
declstmt -> const type · ID = lit ;, +
declstmt -> const type · ID = lit ;, -
declstmt -> const type · ID = lit ;, *
declstmt -> const type · ID = lit ;, /
declstmt -> const type · ID = lit ;, %
declstmt -> const type · ID = lit ;, !
declstmt -> const type · ID = lit ;, else
***EndSet***
***EndState***
***State***
79
I_93_355_549_1044_1137_1395_1473
***Set***
declstmt -> own type · ID = expr ;, $
declstmt -> own type · ID = expr ;, namespace
declstmt -> own type · ID = expr ;, {
declstmt -> own type · ID = expr ;, ID
declstmt -> own type · ID = expr ;, void
declstmt -> own type · ID = expr ;, bool
declstmt -> own type · ID = expr ;, int
declstmt -> own type · ID = expr ;, long
declstmt -> own type · ID = expr ;, float
declstmt -> own type · ID = expr ;, double
declstmt -> own type · ID = expr ;, char
declstmt -> own type · ID = expr ;, string
declstmt -> own type · ID = expr ;, var
declstmt -> own type · ID = expr ;, own
declstmt -> own type · ID = expr ;, bor
declstmt -> own type · ID = expr ;, const
declstmt -> own type · ID = expr ;, extern
declstmt -> own type · ID = expr ;, class
declstmt -> own type · ID = expr ;, (
declstmt -> own type · ID = expr ;, this
declstmt -> own type · ID = expr ;, new
declstmt -> own type · ID = expr ;, LITBOOL
declstmt -> own type · ID = expr ;, LITINT
declstmt -> own type · ID = expr ;, LITLONG
declstmt -> own type · ID = expr ;, LITFLOAT
declstmt -> own type · ID = expr ;, LITDOUBLE
declstmt -> own type · ID = expr ;, LITCHAR
declstmt -> own type · ID = expr ;, LITSTRING
declstmt -> own type · ID = expr ;, null
declstmt -> own type · ID = expr ;, ++
declstmt -> own type · ID = expr ;, --
declstmt -> own type · ID = expr ;, break
declstmt -> own type · ID = expr ;, return
declstmt -> own type · ID = expr ;, delete
declstmt -> own type · ID = expr ;, while
declstmt -> own type · ID = expr ;, for
declstmt -> own type · ID = expr ;, if
declstmt -> own type · ID = expr ;, }
declstmt -> own type · ID = expr ;, &&
declstmt -> own type · ID = expr ;, ||
declstmt -> own type · ID = expr ;, +
declstmt -> own type · ID = expr ;, -
declstmt -> own type · ID = expr ;, *
declstmt -> own type · ID = expr ;, /
declstmt -> own type · ID = expr ;, %
declstmt -> own type · ID = expr ;, !
declstmt -> own type · ID = expr ;, else
***EndSet***
***EndState***
***State***
80
I_94_356_550_1045_1138_1396_1474
***Set***
declstmt -> bor type · ID = expr ;, $
declstmt -> bor type · ID = expr ;, namespace
declstmt -> bor type · ID = expr ;, {
declstmt -> bor type · ID = expr ;, ID
declstmt -> bor type · ID = expr ;, void
declstmt -> bor type · ID = expr ;, bool
declstmt -> bor type · ID = expr ;, int
declstmt -> bor type · ID = expr ;, long
declstmt -> bor type · ID = expr ;, float
declstmt -> bor type · ID = expr ;, double
declstmt -> bor type · ID = expr ;, char
declstmt -> bor type · ID = expr ;, string
declstmt -> bor type · ID = expr ;, var
declstmt -> bor type · ID = expr ;, own
declstmt -> bor type · ID = expr ;, bor
declstmt -> bor type · ID = expr ;, const
declstmt -> bor type · ID = expr ;, extern
declstmt -> bor type · ID = expr ;, class
declstmt -> bor type · ID = expr ;, (
declstmt -> bor type · ID = expr ;, this
declstmt -> bor type · ID = expr ;, new
declstmt -> bor type · ID = expr ;, LITBOOL
declstmt -> bor type · ID = expr ;, LITINT
declstmt -> bor type · ID = expr ;, LITLONG
declstmt -> bor type · ID = expr ;, LITFLOAT
declstmt -> bor type · ID = expr ;, LITDOUBLE
declstmt -> bor type · ID = expr ;, LITCHAR
declstmt -> bor type · ID = expr ;, LITSTRING
declstmt -> bor type · ID = expr ;, null
declstmt -> bor type · ID = expr ;, ++
declstmt -> bor type · ID = expr ;, --
declstmt -> bor type · ID = expr ;, break
declstmt -> bor type · ID = expr ;, return
declstmt -> bor type · ID = expr ;, delete
declstmt -> bor type · ID = expr ;, while
declstmt -> bor type · ID = expr ;, for
declstmt -> bor type · ID = expr ;, if
declstmt -> bor type · ID = expr ;, }
declstmt -> bor type · ID = expr ;, &&
declstmt -> bor type · ID = expr ;, ||
declstmt -> bor type · ID = expr ;, +
declstmt -> bor type · ID = expr ;, -
declstmt -> bor type · ID = expr ;, *
declstmt -> bor type · ID = expr ;, /
declstmt -> bor type · ID = expr ;, %
declstmt -> bor type · ID = expr ;, !
declstmt -> bor type · ID = expr ;, else
***EndSet***
***EndState***
***State***
81
I_95_357_551_1046_1139_1397_1475
***Set***
declstmt -> class ID · inherit { declstatements }, $
declstmt -> class ID · inherit { declstatements }, namespace
declstmt -> class ID · inherit { declstatements }, {
declstmt -> class ID · inherit { declstatements }, ID
declstmt -> class ID · inherit { declstatements }, void
declstmt -> class ID · inherit { declstatements }, bool
declstmt -> class ID · inherit { declstatements }, int
declstmt -> class ID · inherit { declstatements }, long
declstmt -> class ID · inherit { declstatements }, float
declstmt -> class ID · inherit { declstatements }, double
declstmt -> class ID · inherit { declstatements }, char
declstmt -> class ID · inherit { declstatements }, string
declstmt -> class ID · inherit { declstatements }, var
declstmt -> class ID · inherit { declstatements }, own
declstmt -> class ID · inherit { declstatements }, bor
declstmt -> class ID · inherit { declstatements }, const
declstmt -> class ID · inherit { declstatements }, extern
declstmt -> class ID · inherit { declstatements }, class
declstmt -> class ID · inherit { declstatements }, (
declstmt -> class ID · inherit { declstatements }, this
declstmt -> class ID · inherit { declstatements }, new
declstmt -> class ID · inherit { declstatements }, LITBOOL
declstmt -> class ID · inherit { declstatements }, LITINT
declstmt -> class ID · inherit { declstatements }, LITLONG
declstmt -> class ID · inherit { declstatements }, LITFLOAT
declstmt -> class ID · inherit { declstatements }, LITDOUBLE
declstmt -> class ID · inherit { declstatements }, LITCHAR
declstmt -> class ID · inherit { declstatements }, LITSTRING
declstmt -> class ID · inherit { declstatements }, null
declstmt -> class ID · inherit { declstatements }, ++
declstmt -> class ID · inherit { declstatements }, --
declstmt -> class ID · inherit { declstatements }, break
declstmt -> class ID · inherit { declstatements }, return
declstmt -> class ID · inherit { declstatements }, delete
declstmt -> class ID · inherit { declstatements }, while
declstmt -> class ID · inherit { declstatements }, for
declstmt -> class ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class ID · inherit { declstatements }, }
declstmt -> class ID · inherit { declstatements }, &&
declstmt -> class ID · inherit { declstatements }, ||
declstmt -> class ID · inherit { declstatements }, +
declstmt -> class ID · inherit { declstatements }, -
declstmt -> class ID · inherit { declstatements }, *
declstmt -> class ID · inherit { declstatements }, /
declstmt -> class ID · inherit { declstatements }, %
declstmt -> class ID · inherit { declstatements }, !
declstmt -> class ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
82
I_104_234_309_668_712_786_809_873_896_1216_1239_1283_1342
***Set***
newobj -> new ID · ( ), ;
newobj -> new ID · ( ), .
idBracket -> ID · [ optidx ], .
newobj -> new ID · ( ), &&
newobj -> new ID · ( ), ||
newobj -> new ID · ( ), >
newobj -> new ID · ( ), <
newobj -> new ID · ( ), >=
newobj -> new ID · ( ), <=
newobj -> new ID · ( ), ==
newobj -> new ID · ( ), !=
newobj -> new ID · ( ), +
newobj -> new ID · ( ), -
newobj -> new ID · ( ), *
newobj -> new ID · ( ), /
newobj -> new ID · ( ), %
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
newobj -> new ID · ( ), )
idBracket -> ID · [ optidx ], )
newobj -> new ID · ( ), ,
idBracket -> ID · [ optidx ], ,
newobj -> new ID · ( ), ]
idBracket -> ID · [ optidx ], ]
***EndSet***
***EndState***
***State***
83
I_105_235_310_669_713_787_810_874_897_1217_1240_1284
***Set***
primitiveBracket -> primitive · [ optidx ], .
primitiveBracket -> primitive · [ optidx ], ;
primitiveBracket -> primitive · [ optidx ], &&
primitiveBracket -> primitive · [ optidx ], ||
primitiveBracket -> primitive · [ optidx ], >
primitiveBracket -> primitive · [ optidx ], <
primitiveBracket -> primitive · [ optidx ], >=
primitiveBracket -> primitive · [ optidx ], <=
primitiveBracket -> primitive · [ optidx ], ==
primitiveBracket -> primitive · [ optidx ], !=
primitiveBracket -> primitive · [ optidx ], +
primitiveBracket -> primitive · [ optidx ], -
primitiveBracket -> primitive · [ optidx ], *
primitiveBracket -> primitive · [ optidx ], /
primitiveBracket -> primitive · [ optidx ], %
primitiveBracket -> primitive · [ optidx ], )
primitiveBracket -> primitive · [ optidx ], ,
primitiveBracket -> primitive · [ optidx ], ]
***EndSet***
***EndState***
***State***
84
I_106_236_311_670_714_788_811_875_898_1218_1241_1285
***Set***
newarr -> new stypeBracket ·, .
newarr -> new stypeBracket ·, ;
newarr -> new stypeBracket ·, &&
newarr -> new stypeBracket ·, ||
newarr -> new stypeBracket ·, >
newarr -> new stypeBracket ·, <
newarr -> new stypeBracket ·, >=
newarr -> new stypeBracket ·, <=
newarr -> new stypeBracket ·, ==
newarr -> new stypeBracket ·, !=
newarr -> new stypeBracket ·, +
newarr -> new stypeBracket ·, -
newarr -> new stypeBracket ·, *
newarr -> new stypeBracket ·, /
newarr -> new stypeBracket ·, %
newarr -> new stypeBracket ·, )
newarr -> new stypeBracket ·, ,
newarr -> new stypeBracket ·, ]
***EndSet***
***EndState***
***State***
85
I_112_151_374_409_479_513_581_615_944_978_1059
***Set***
primary -> ( · expr ), .
cast -> ( · type ) factor, ;
primary -> ( · expr ), ;
cast -> ( · type ) factor, &&
primary -> ( · expr ), &&
cast -> ( · type ) factor, ||
primary -> ( · expr ), ||
cast -> ( · type ) factor, >
primary -> ( · expr ), >
cast -> ( · type ) factor, <
primary -> ( · expr ), <
cast -> ( · type ) factor, >=
primary -> ( · expr ), >=
cast -> ( · type ) factor, <=
primary -> ( · expr ), <=
cast -> ( · type ) factor, ==
primary -> ( · expr ), ==
cast -> ( · type ) factor, !=
primary -> ( · expr ), !=
cast -> ( · type ) factor, +
primary -> ( · expr ), +
cast -> ( · type ) factor, -
primary -> ( · expr ), -
cast -> ( · type ) factor, *
primary -> ( · expr ), *
cast -> ( · type ) factor, /
primary -> ( · expr ), /
cast -> ( · type ) factor, %
primary -> ( · expr ), %
expr -> · assign, )
expr -> · nexpr, )
type -> · arrtype, )
type -> · stype, )
type -> · var, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
arrtype -> · stypeBracket, )
stype -> · primitive, )
stype -> · ID, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
primitive -> · void, )
primitive -> · bool, )
primitive -> · int, )
primitive -> · long, )
primitive -> · float, )
primitive -> · double, )
primitive -> · char, )
primitive -> · string, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
cast -> ( · type ) factor, )
primary -> ( · expr ), )
cast -> ( · type ) factor, ,
primary -> ( · expr ), ,
cast -> ( · type ) factor, ]
primary -> ( · expr ), ]
***EndSet***
***EndState***
***State***
86
I_115_154_377_412_482_516_584_618_947_981_1062
***Set***
factor -> - · factor, ;
factor -> - · factor, &&
factor -> - · factor, ||
factor -> - · factor, >
factor -> - · factor, <
factor -> - · factor, >=
factor -> - · factor, <=
factor -> - · factor, ==
factor -> - · factor, !=
factor -> - · factor, +
factor -> - · factor, -
factor -> - · factor, *
factor -> - · factor, /
factor -> - · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> - · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> - · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> - · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
87
I_116_155_378_413_483_517_585_619_948_982_1063
***Set***
factor -> ! · factor, ;
factor -> ! · factor, &&
factor -> ! · factor, ||
factor -> ! · factor, >
factor -> ! · factor, <
factor -> ! · factor, >=
factor -> ! · factor, <=
factor -> ! · factor, ==
factor -> ! · factor, !=
factor -> ! · factor, +
factor -> ! · factor, -
factor -> ! · factor, *
factor -> ! · factor, /
factor -> ! · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> ! · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> ! · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> ! · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
88
I_124_163_386_1123
***Set***
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
call -> ID · ( args ), .
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), ;
idBracket -> ID · [ optidx ], .
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
idBracket -> ID · [ optidx ], ;
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
89
I_125_164_387
***Set***
expr -> assign ·, ;
expr -> assign ·, )
expr -> assign ·, ,
***EndSet***
***EndState***
***State***
90
I_126_165_388_422_492_526_594_628_957_991_1072
***Set***
primary -> call ·, .
primary -> call ·, ;
primary -> call ·, &&
primary -> call ·, ||
primary -> call ·, >
primary -> call ·, <
primary -> call ·, >=
primary -> call ·, <=
primary -> call ·, ==
primary -> call ·, !=
primary -> call ·, +
primary -> call ·, -
primary -> call ·, *
primary -> call ·, /
primary -> call ·, %
primary -> call ·, )
primary -> call ·, ,
primary -> call ·, ]
***EndSet***
***EndState***
***State***
91
I_128_167_390_424_494_528_596_630_959_993_1074
***Set***
primary -> newobj ·, .
primary -> newobj ·, ;
primary -> newobj ·, &&
primary -> newobj ·, ||
primary -> newobj ·, >
primary -> newobj ·, <
primary -> newobj ·, >=
primary -> newobj ·, <=
primary -> newobj ·, ==
primary -> newobj ·, !=
primary -> newobj ·, +
primary -> newobj ·, -
primary -> newobj ·, *
primary -> newobj ·, /
primary -> newobj ·, %
primary -> newobj ·, )
primary -> newobj ·, ,
primary -> newobj ·, ]
***EndSet***
***EndState***
***State***
92
I_130_169_392_426_496_530_598_632_961_995_1076
***Set***
factor -> incdec ·, ;
factor -> incdec ·, &&
factor -> incdec ·, ||
factor -> incdec ·, >
factor -> incdec ·, <
factor -> incdec ·, >=
factor -> incdec ·, <=
factor -> incdec ·, ==
factor -> incdec ·, !=
factor -> incdec ·, +
factor -> incdec ·, -
factor -> incdec ·, *
factor -> incdec ·, /
factor -> incdec ·, %
factor -> incdec ·, )
factor -> incdec ·, ,
factor -> incdec ·, ]
***EndSet***
***EndState***
***State***
93
I_131_358_552_1140_1398_1476
***Set***
stmt -> delete expr · ;, $
stmt -> delete expr · ;, namespace
stmt -> delete expr · ;, {
stmt -> delete expr · ;, ID
stmt -> delete expr · ;, void
stmt -> delete expr · ;, bool
stmt -> delete expr · ;, int
stmt -> delete expr · ;, long
stmt -> delete expr · ;, float
stmt -> delete expr · ;, double
stmt -> delete expr · ;, char
stmt -> delete expr · ;, string
stmt -> delete expr · ;, var
stmt -> delete expr · ;, own
stmt -> delete expr · ;, bor
stmt -> delete expr · ;, const
stmt -> delete expr · ;, extern
stmt -> delete expr · ;, class
stmt -> delete expr · ;, (
stmt -> delete expr · ;, this
stmt -> delete expr · ;, new
stmt -> delete expr · ;, LITBOOL
stmt -> delete expr · ;, LITINT
stmt -> delete expr · ;, LITLONG
stmt -> delete expr · ;, LITFLOAT
stmt -> delete expr · ;, LITDOUBLE
stmt -> delete expr · ;, LITCHAR
stmt -> delete expr · ;, LITSTRING
stmt -> delete expr · ;, null
stmt -> delete expr · ;, ++
stmt -> delete expr · ;, --
stmt -> delete expr · ;, break
stmt -> delete expr · ;, return
stmt -> delete expr · ;, delete
stmt -> delete expr · ;, while
stmt -> delete expr · ;, for
stmt -> delete expr · ;, if
stmt -> delete expr · ;, }
stmt -> delete expr · ;, &&
stmt -> delete expr · ;, ||
stmt -> delete expr · ;, +
stmt -> delete expr · ;, -
stmt -> delete expr · ;, *
stmt -> delete expr · ;, /
stmt -> delete expr · ;, %
stmt -> delete expr · ;, !
stmt -> delete expr · ;, else
***EndSet***
***EndState***
***State***
94
I_132_171_394
***Set***
expr -> nexpr ·, ;
expr -> nexpr ·, )
expr -> nexpr ·, ,
***EndSet***
***EndState***
***State***
95
I_133_172_395
***Set***
nexpr -> bexpr ·, ;
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
nexpr -> bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
nexpr -> bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
96
I_134_173_396
***Set***
nexpr -> aexpr ·, ;
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
nexpr -> aexpr ·, )
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
nexpr -> aexpr ·, ,
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
97
I_135_174_397_428_473_498_600_963
***Set***
aexpr -> term ·, ;
aexpr -> term ·, >
aexpr -> term ·, <
aexpr -> term ·, >=
aexpr -> term ·, <=
aexpr -> term ·, ==
aexpr -> term ·, !=
aexpr -> term ·, +
aexpr -> term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> term ·, &&
aexpr -> term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
98
I_136_175_398_474_576_939
***Set***
bexpr -> factor ·, ;
bexpr -> factor ·, &&
bexpr -> factor ·, ||
term -> factor ·, ;
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
bexpr -> factor ·, )
term -> factor ·, )
bexpr -> factor ·, ,
term -> factor ·, ,
***EndSet***
***EndState***
***State***
99
I_137_176_262_321_399_430_500_533_602_635_680_965_998_1079
***Set***
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
factor -> primary ·, ;
memberaccess -> primary · . ID, [
factor -> primary ·, &&
factor -> primary ·, ||
memberaccess -> primary · . ID, .
factor -> primary ·, >
factor -> primary ·, <
factor -> primary ·, >=
factor -> primary ·, <=
factor -> primary ·, ==
factor -> primary ·, !=
memberaccess -> primary · . ID, ;
factor -> primary ·, +
factor -> primary ·, -
factor -> primary ·, *
factor -> primary ·, /
factor -> primary ·, %
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, &&
memberaccess -> primary · . ID, ||
memberaccess -> primary · . ID, >
memberaccess -> primary · . ID, <
memberaccess -> primary · . ID, >=
memberaccess -> primary · . ID, <=
memberaccess -> primary · . ID, ==
memberaccess -> primary · . ID, !=
memberaccess -> primary · . ID, +
memberaccess -> primary · . ID, -
memberaccess -> primary · . ID, *
memberaccess -> primary · . ID, /
memberaccess -> primary · . ID, %
factor -> primary ·, )
memberaccess -> primary · . ID, )
factor -> primary ·, ,
memberaccess -> primary · . ID, ,
factor -> primary ·, ]
memberaccess -> primary · . ID, ]
***EndSet***
***EndState***
***State***
100
I_139_178_401_432_502_535_604_637_967_1000_1081
***Set***
factor -> cast ·, ;
factor -> cast ·, &&
factor -> cast ·, ||
factor -> cast ·, >
factor -> cast ·, <
factor -> cast ·, >=
factor -> cast ·, <=
factor -> cast ·, ==
factor -> cast ·, !=
factor -> cast ·, +
factor -> cast ·, -
factor -> cast ·, *
factor -> cast ·, /
factor -> cast ·, %
factor -> cast ·, )
factor -> cast ·, ,
factor -> cast ·, ]
***EndSet***
***EndState***
***State***
101
I_141_181_264_323_405_434_504_537_606_639_682_969_1002_1083_1130
***Set***
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
indexaccess -> idBracket ·, ;
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, ,
indexaccess -> idBracket ·, ]
***EndSet***
***EndState***
***State***
102
I_142_359_553_1141_1399_1477
***Set***
stmt -> while ( · expr ) stmt, $
stmt -> while ( · expr ) stmt, namespace
stmt -> while ( · expr ) stmt, {
stmt -> while ( · expr ) stmt, ID
stmt -> while ( · expr ) stmt, void
stmt -> while ( · expr ) stmt, bool
stmt -> while ( · expr ) stmt, int
stmt -> while ( · expr ) stmt, long
stmt -> while ( · expr ) stmt, float
stmt -> while ( · expr ) stmt, double
stmt -> while ( · expr ) stmt, char
stmt -> while ( · expr ) stmt, string
stmt -> while ( · expr ) stmt, var
stmt -> while ( · expr ) stmt, own
stmt -> while ( · expr ) stmt, bor
stmt -> while ( · expr ) stmt, const
stmt -> while ( · expr ) stmt, extern
stmt -> while ( · expr ) stmt, class
stmt -> while ( · expr ) stmt, (
stmt -> while ( · expr ) stmt, this
stmt -> while ( · expr ) stmt, new
stmt -> while ( · expr ) stmt, LITBOOL
stmt -> while ( · expr ) stmt, LITINT
stmt -> while ( · expr ) stmt, LITLONG
stmt -> while ( · expr ) stmt, LITFLOAT
stmt -> while ( · expr ) stmt, LITDOUBLE
stmt -> while ( · expr ) stmt, LITCHAR
stmt -> while ( · expr ) stmt, LITSTRING
stmt -> while ( · expr ) stmt, null
stmt -> while ( · expr ) stmt, ++
stmt -> while ( · expr ) stmt, --
stmt -> while ( · expr ) stmt, break
stmt -> while ( · expr ) stmt, return
stmt -> while ( · expr ) stmt, delete
stmt -> while ( · expr ) stmt, while
stmt -> while ( · expr ) stmt, for
stmt -> while ( · expr ) stmt, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> while ( · expr ) stmt, }
stmt -> while ( · expr ) stmt, &&
stmt -> while ( · expr ) stmt, ||
stmt -> while ( · expr ) stmt, +
stmt -> while ( · expr ) stmt, -
stmt -> while ( · expr ) stmt, *
stmt -> while ( · expr ) stmt, /
stmt -> while ( · expr ) stmt, %
stmt -> while ( · expr ) stmt, !
stmt -> while ( · expr ) stmt, else
***EndSet***
***EndState***
***State***
103
I_143_360_554_1142_1400_1478
***Set***
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, $
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, {
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, void
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, int
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, long
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, float
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, double
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, char
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, string
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, var
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, own
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bor
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, const
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, class
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, (
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, this
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, new
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, null
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, --
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, break
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, return
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, while
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, for
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, if
stmt -> · namespaceblock, &&
stmt -> · namespaceblock, ||
stmt -> · namespaceblock, +
stmt -> · namespaceblock, -
stmt -> · namespaceblock, *
stmt -> · namespaceblock, /
stmt -> · namespaceblock, %
stmt -> · namespaceblock, ++
stmt -> · namespaceblock, --
stmt -> · namespaceblock, ID
stmt -> · namespaceblock, !
stmt -> · namespaceblock, (
stmt -> · namespaceblock, this
stmt -> · namespaceblock, new
stmt -> · namespaceblock, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, &&
stmt -> · statementblock, ||
stmt -> · statementblock, +
stmt -> · statementblock, -
stmt -> · statementblock, *
stmt -> · statementblock, /
stmt -> · statementblock, %
stmt -> · statementblock, ++
stmt -> · statementblock, --
stmt -> · statementblock, ID
stmt -> · statementblock, !
stmt -> · statementblock, (
stmt -> · statementblock, this
stmt -> · statementblock, new
stmt -> · statementblock, LITBOOL
stmt -> · statementblock, LITINT
stmt -> · statementblock, LITLONG
stmt -> · statementblock, LITFLOAT
stmt -> · statementblock, LITDOUBLE
stmt -> · statementblock, LITCHAR
stmt -> · statementblock, LITSTRING
stmt -> · statementblock, null
stmt -> · declstmt, &&
stmt -> · declstmt, ||
stmt -> · declstmt, +
stmt -> · declstmt, -
stmt -> · declstmt, *
stmt -> · declstmt, /
stmt -> · declstmt, %
stmt -> · declstmt, ++
stmt -> · declstmt, --
stmt -> · declstmt, ID
stmt -> · declstmt, !
stmt -> · declstmt, (
stmt -> · declstmt, this
stmt -> · declstmt, new
stmt -> · declstmt, LITBOOL
stmt -> · declstmt, LITINT
stmt -> · declstmt, LITLONG
stmt -> · declstmt, LITFLOAT
stmt -> · declstmt, LITDOUBLE
stmt -> · declstmt, LITCHAR
stmt -> · declstmt, LITSTRING
stmt -> · declstmt, null
stmt -> · stmtexpr ;, &&
stmt -> · stmtexpr ;, ||
stmt -> · stmtexpr ;, +
stmt -> · stmtexpr ;, -
stmt -> · stmtexpr ;, *
stmt -> · stmtexpr ;, /
stmt -> · stmtexpr ;, %
stmt -> · stmtexpr ;, ++
stmt -> · stmtexpr ;, --
stmt -> · stmtexpr ;, ID
stmt -> · stmtexpr ;, !
stmt -> · stmtexpr ;, (
stmt -> · stmtexpr ;, this
stmt -> · stmtexpr ;, new
stmt -> · stmtexpr ;, LITBOOL
stmt -> · stmtexpr ;, LITINT
stmt -> · stmtexpr ;, LITLONG
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · stmtexpr ;, LITCHAR
stmt -> · stmtexpr ;, LITSTRING
stmt -> · stmtexpr ;, null
stmt -> · break ;, &&
stmt -> · break ;, ||
stmt -> · break ;, +
stmt -> · break ;, -
stmt -> · break ;, *
stmt -> · break ;, /
stmt -> · break ;, %
stmt -> · break ;, ++
stmt -> · break ;, --
stmt -> · break ;, ID
stmt -> · break ;, !
stmt -> · break ;, (
stmt -> · break ;, this
stmt -> · break ;, new
stmt -> · break ;, LITBOOL
stmt -> · break ;, LITINT
stmt -> · break ;, LITLONG
stmt -> · break ;, LITFLOAT
stmt -> · break ;, LITDOUBLE
stmt -> · break ;, LITCHAR
stmt -> · break ;, LITSTRING
stmt -> · break ;, null
stmt -> · return expr ;, &&
stmt -> · return expr ;, ||
stmt -> · return expr ;, +
stmt -> · return expr ;, -
stmt -> · return expr ;, *
stmt -> · return expr ;, /
stmt -> · return expr ;, %
stmt -> · return expr ;, ++
stmt -> · return expr ;, --
stmt -> · return expr ;, ID
stmt -> · return expr ;, !
stmt -> · return expr ;, (
stmt -> · return expr ;, this
stmt -> · return expr ;, new
stmt -> · return expr ;, LITBOOL
stmt -> · return expr ;, LITINT
stmt -> · return expr ;, LITLONG
stmt -> · return expr ;, LITFLOAT
stmt -> · return expr ;, LITDOUBLE
stmt -> · return expr ;, LITCHAR
stmt -> · return expr ;, LITSTRING
stmt -> · return expr ;, null
stmt -> · return ;, &&
stmt -> · return ;, ||
stmt -> · return ;, +
stmt -> · return ;, -
stmt -> · return ;, *
stmt -> · return ;, /
stmt -> · return ;, %
stmt -> · return ;, ++
stmt -> · return ;, --
stmt -> · return ;, ID
stmt -> · return ;, !
stmt -> · return ;, (
stmt -> · return ;, this
stmt -> · return ;, new
stmt -> · return ;, LITBOOL
stmt -> · return ;, LITINT
stmt -> · return ;, LITLONG
stmt -> · return ;, LITFLOAT
stmt -> · return ;, LITDOUBLE
stmt -> · return ;, LITCHAR
stmt -> · return ;, LITSTRING
stmt -> · return ;, null
stmt -> · delete expr ;, &&
stmt -> · delete expr ;, ||
stmt -> · delete expr ;, +
stmt -> · delete expr ;, -
stmt -> · delete expr ;, *
stmt -> · delete expr ;, /
stmt -> · delete expr ;, %
stmt -> · delete expr ;, ++
stmt -> · delete expr ;, --
stmt -> · delete expr ;, ID
stmt -> · delete expr ;, !
stmt -> · delete expr ;, (
stmt -> · delete expr ;, this
stmt -> · delete expr ;, new
stmt -> · delete expr ;, LITBOOL
stmt -> · delete expr ;, LITINT
stmt -> · delete expr ;, LITLONG
stmt -> · delete expr ;, LITFLOAT
stmt -> · delete expr ;, LITDOUBLE
stmt -> · delete expr ;, LITCHAR
stmt -> · delete expr ;, LITSTRING
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, &&
stmt -> · while ( expr ) stmt, ||
stmt -> · while ( expr ) stmt, +
stmt -> · while ( expr ) stmt, -
stmt -> · while ( expr ) stmt, *
stmt -> · while ( expr ) stmt, /
stmt -> · while ( expr ) stmt, %
stmt -> · while ( expr ) stmt, ++
stmt -> · while ( expr ) stmt, --
stmt -> · while ( expr ) stmt, ID
stmt -> · while ( expr ) stmt, !
stmt -> · while ( expr ) stmt, (
stmt -> · while ( expr ) stmt, this
stmt -> · while ( expr ) stmt, new
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · while ( expr ) stmt, LITINT
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
namespaceblock -> · namespace ID { statements }, &&
namespaceblock -> · namespace ID { statements }, ||
namespaceblock -> · namespace ID { statements }, +
namespaceblock -> · namespace ID { statements }, -
namespaceblock -> · namespace ID { statements }, *
namespaceblock -> · namespace ID { statements }, /
namespaceblock -> · namespace ID { statements }, %
namespaceblock -> · namespace ID { statements }, ++
namespaceblock -> · namespace ID { statements }, --
namespaceblock -> · namespace ID { statements }, ID
namespaceblock -> · namespace ID { statements }, !
namespaceblock -> · namespace ID { statements }, (
namespaceblock -> · namespace ID { statements }, this
namespaceblock -> · namespace ID { statements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, &&
statementblock -> · { statements }, ||
statementblock -> · { statements }, +
statementblock -> · { statements }, -
statementblock -> · { statements }, *
statementblock -> · { statements }, /
statementblock -> · { statements }, %
statementblock -> · { statements }, ++
statementblock -> · { statements }, --
statementblock -> · { statements }, ID
statementblock -> · { statements }, !
statementblock -> · { statements }, (
statementblock -> · { statements }, this
statementblock -> · { statements }, new
statementblock -> · { statements }, LITBOOL
statementblock -> · { statements }, LITINT
statementblock -> · { statements }, LITLONG
statementblock -> · { statements }, LITFLOAT
statementblock -> · { statements }, LITDOUBLE
statementblock -> · { statements }, LITCHAR
statementblock -> · { statements }, LITSTRING
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, }
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, +
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, -
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, *
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, /
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, %
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, !
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
104
I_144_361_555_1143_1401_1479
***Set***
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, long
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, var
stmt -> if ( · expr ) stmt elifclauselist elseclause, own
stmt -> if ( · expr ) stmt elifclauselist elseclause, bor
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
105
I_145_362_556_1144_1402_1480
***Set***
stmt -> break ; ·, $
stmt -> break ; ·, namespace
stmt -> break ; ·, {
stmt -> break ; ·, ID
stmt -> break ; ·, void
stmt -> break ; ·, bool
stmt -> break ; ·, int
stmt -> break ; ·, long
stmt -> break ; ·, float
stmt -> break ; ·, double
stmt -> break ; ·, char
stmt -> break ; ·, string
stmt -> break ; ·, var
stmt -> break ; ·, own
stmt -> break ; ·, bor
stmt -> break ; ·, const
stmt -> break ; ·, extern
stmt -> break ; ·, class
stmt -> break ; ·, (
stmt -> break ; ·, this
stmt -> break ; ·, new
stmt -> break ; ·, LITBOOL
stmt -> break ; ·, LITINT
stmt -> break ; ·, LITLONG
stmt -> break ; ·, LITFLOAT
stmt -> break ; ·, LITDOUBLE
stmt -> break ; ·, LITCHAR
stmt -> break ; ·, LITSTRING
stmt -> break ; ·, null
stmt -> break ; ·, ++
stmt -> break ; ·, --
stmt -> break ; ·, break
stmt -> break ; ·, return
stmt -> break ; ·, delete
stmt -> break ; ·, while
stmt -> break ; ·, for
stmt -> break ; ·, if
stmt -> break ; ·, }
stmt -> break ; ·, &&
stmt -> break ; ·, ||
stmt -> break ; ·, +
stmt -> break ; ·, -
stmt -> break ; ·, *
stmt -> break ; ·, /
stmt -> break ; ·, %
stmt -> break ; ·, !
stmt -> break ; ·, else
***EndSet***
***EndState***
***State***
106
I_146_363_557_1145_1403_1481
***Set***
stmt -> return ; ·, $
stmt -> return ; ·, namespace
stmt -> return ; ·, {
stmt -> return ; ·, ID
stmt -> return ; ·, void
stmt -> return ; ·, bool
stmt -> return ; ·, int
stmt -> return ; ·, long
stmt -> return ; ·, float
stmt -> return ; ·, double
stmt -> return ; ·, char
stmt -> return ; ·, string
stmt -> return ; ·, var
stmt -> return ; ·, own
stmt -> return ; ·, bor
stmt -> return ; ·, const
stmt -> return ; ·, extern
stmt -> return ; ·, class
stmt -> return ; ·, (
stmt -> return ; ·, this
stmt -> return ; ·, new
stmt -> return ; ·, LITBOOL
stmt -> return ; ·, LITINT
stmt -> return ; ·, LITLONG
stmt -> return ; ·, LITFLOAT
stmt -> return ; ·, LITDOUBLE
stmt -> return ; ·, LITCHAR
stmt -> return ; ·, LITSTRING
stmt -> return ; ·, null
stmt -> return ; ·, ++
stmt -> return ; ·, --
stmt -> return ; ·, break
stmt -> return ; ·, return
stmt -> return ; ·, delete
stmt -> return ; ·, while
stmt -> return ; ·, for
stmt -> return ; ·, if
stmt -> return ; ·, }
stmt -> return ; ·, &&
stmt -> return ; ·, ||
stmt -> return ; ·, +
stmt -> return ; ·, -
stmt -> return ; ·, *
stmt -> return ; ·, /
stmt -> return ; ·, %
stmt -> return ; ·, !
stmt -> return ; ·, else
***EndSet***
***EndState***
***State***
107
I_147_364_558_1146_1404_1482
***Set***
stmt -> return expr · ;, $
stmt -> return expr · ;, namespace
stmt -> return expr · ;, {
stmt -> return expr · ;, ID
stmt -> return expr · ;, void
stmt -> return expr · ;, bool
stmt -> return expr · ;, int
stmt -> return expr · ;, long
stmt -> return expr · ;, float
stmt -> return expr · ;, double
stmt -> return expr · ;, char
stmt -> return expr · ;, string
stmt -> return expr · ;, var
stmt -> return expr · ;, own
stmt -> return expr · ;, bor
stmt -> return expr · ;, const
stmt -> return expr · ;, extern
stmt -> return expr · ;, class
stmt -> return expr · ;, (
stmt -> return expr · ;, this
stmt -> return expr · ;, new
stmt -> return expr · ;, LITBOOL
stmt -> return expr · ;, LITINT
stmt -> return expr · ;, LITLONG
stmt -> return expr · ;, LITFLOAT
stmt -> return expr · ;, LITDOUBLE
stmt -> return expr · ;, LITCHAR
stmt -> return expr · ;, LITSTRING
stmt -> return expr · ;, null
stmt -> return expr · ;, ++
stmt -> return expr · ;, --
stmt -> return expr · ;, break
stmt -> return expr · ;, return
stmt -> return expr · ;, delete
stmt -> return expr · ;, while
stmt -> return expr · ;, for
stmt -> return expr · ;, if
stmt -> return expr · ;, }
stmt -> return expr · ;, &&
stmt -> return expr · ;, ||
stmt -> return expr · ;, +
stmt -> return expr · ;, -
stmt -> return expr · ;, *
stmt -> return expr · ;, /
stmt -> return expr · ;, %
stmt -> return expr · ;, !
stmt -> return expr · ;, else
***EndSet***
***EndState***
***State***
108
I_170_253_315_674_718_792_815_879_902_1222_1245_1289
***Set***
primary -> ( expr · ), .
primary -> ( expr · ), ;
primary -> ( expr · ), &&
primary -> ( expr · ), ||
primary -> ( expr · ), >
primary -> ( expr · ), <
primary -> ( expr · ), >=
primary -> ( expr · ), <=
primary -> ( expr · ), ==
primary -> ( expr · ), !=
primary -> ( expr · ), +
primary -> ( expr · ), -
primary -> ( expr · ), *
primary -> ( expr · ), /
primary -> ( expr · ), %
primary -> ( expr · ), )
primary -> ( expr · ), ,
primary -> ( expr · ), ]
***EndSet***
***EndState***
***State***
109
I_195_365_559_1147_1405_1483
***Set***
statementblock -> { statements · }, $
statementblock -> { statements · }, namespace
statementblock -> { statements · }, {
statementblock -> { statements · }, ID
statementblock -> { statements · }, void
statementblock -> { statements · }, bool
statementblock -> { statements · }, int
statementblock -> { statements · }, long
statementblock -> { statements · }, float
statementblock -> { statements · }, double
statementblock -> { statements · }, char
statementblock -> { statements · }, string
statementblock -> { statements · }, var
statementblock -> { statements · }, own
statementblock -> { statements · }, bor
statementblock -> { statements · }, const
statementblock -> { statements · }, extern
statementblock -> { statements · }, class
statementblock -> { statements · }, (
statementblock -> { statements · }, this
statementblock -> { statements · }, new
statementblock -> { statements · }, LITBOOL
statementblock -> { statements · }, LITINT
statementblock -> { statements · }, LITLONG
statementblock -> { statements · }, LITFLOAT
statementblock -> { statements · }, LITDOUBLE
statementblock -> { statements · }, LITCHAR
statementblock -> { statements · }, LITSTRING
statementblock -> { statements · }, null
statementblock -> { statements · }, ++
statementblock -> { statements · }, --
statementblock -> { statements · }, break
statementblock -> { statements · }, return
statementblock -> { statements · }, delete
statementblock -> { statements · }, while
statementblock -> { statements · }, for
statementblock -> { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { statements · }, }
statementblock -> { statements · }, &&
statementblock -> { statements · }, ||
statementblock -> { statements · }, +
statementblock -> { statements · }, -
statementblock -> { statements · }, *
statementblock -> { statements · }, /
statementblock -> { statements · }, %
statementblock -> { statements · }, !
statementblock -> { statements · }, else
***EndSet***
***EndState***
***State***
110
I_202_257_316_675_719_793_816_880_903_1223_1246_1290_1343
***Set***
incdec -> -- ID ·, ;
incdec -> -- ID ·, &&
incdec -> -- ID ·, ||
incdec -> -- ID ·, >
incdec -> -- ID ·, <
incdec -> -- ID ·, >=
incdec -> -- ID ·, <=
incdec -> -- ID ·, ==
incdec -> -- ID ·, !=
incdec -> -- ID ·, +
incdec -> -- ID ·, -
incdec -> -- ID ·, *
incdec -> -- ID ·, /
incdec -> -- ID ·, %
incdec -> -- ID ·, )
incdec -> -- ID ·, ,
incdec -> -- ID ·, ]
***EndSet***
***EndState***
***State***
111
I_203_258_317_676_720_794_817_881_904_1224_1247_1291_1344
***Set***
incdec -> ++ ID ·, ;
incdec -> ++ ID ·, &&
incdec -> ++ ID ·, ||
incdec -> ++ ID ·, >
incdec -> ++ ID ·, <
incdec -> ++ ID ·, >=
incdec -> ++ ID ·, <=
incdec -> ++ ID ·, ==
incdec -> ++ ID ·, !=
incdec -> ++ ID ·, +
incdec -> ++ ID ·, -
incdec -> ++ ID ·, *
incdec -> ++ ID ·, /
incdec -> ++ ID ·, %
incdec -> ++ ID ·, )
incdec -> ++ ID ·, ,
incdec -> ++ ID ·, ]
***EndSet***
***EndState***
***State***
112
I_204_266_325_684_723_797_820_884_907_1227_1250_1294_1345
***Set***
call -> ID ( · args ), ;
call -> ID ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> ID ( · args ), &&
call -> ID ( · args ), ||
call -> ID ( · args ), >
call -> ID ( · args ), <
call -> ID ( · args ), >=
call -> ID ( · args ), <=
call -> ID ( · args ), ==
call -> ID ( · args ), !=
call -> ID ( · args ), +
call -> ID ( · args ), -
call -> ID ( · args ), *
call -> ID ( · args ), /
call -> ID ( · args ), %
call -> ID ( · args ), )
call -> ID ( · args ), ,
call -> ID ( · args ), ]
***EndSet***
***EndState***
***State***
113
I_205_223_232_267_326_462_566_685_724_798_821_885_908_929_1047_1228_1251_1295_1346
***Set***
idBracket -> ID [ · optidx ], ID
idBracket -> ID [ · optidx ], operator
idBracket -> ID [ · optidx ], =
idBracket -> ID [ · optidx ], +=
idBracket -> ID [ · optidx ], -=
idBracket -> ID [ · optidx ], *=
idBracket -> ID [ · optidx ], /=
idBracket -> ID [ · optidx ], %=
idBracket -> ID [ · optidx ], .
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
idBracket -> ID [ · optidx ], ;
idBracket -> ID [ · optidx ], &&
idBracket -> ID [ · optidx ], ||
idBracket -> ID [ · optidx ], >
idBracket -> ID [ · optidx ], <
idBracket -> ID [ · optidx ], >=
idBracket -> ID [ · optidx ], <=
idBracket -> ID [ · optidx ], ==
idBracket -> ID [ · optidx ], !=
idBracket -> ID [ · optidx ], +
idBracket -> ID [ · optidx ], -
idBracket -> ID [ · optidx ], *
idBracket -> ID [ · optidx ], /
idBracket -> ID [ · optidx ], %
idBracket -> ID [ · optidx ], )
idBracket -> ID [ · optidx ], ,
idBracket -> ID [ · optidx ], ]
***EndSet***
***EndState***
***State***
114
I_206_268_327_686_725_799_822_886_909_1229_1252_1296_1347
***Set***
incdec -> ID -- ·, ;
incdec -> ID -- ·, &&
incdec -> ID -- ·, ||
incdec -> ID -- ·, >
incdec -> ID -- ·, <
incdec -> ID -- ·, >=
incdec -> ID -- ·, <=
incdec -> ID -- ·, ==
incdec -> ID -- ·, !=
incdec -> ID -- ·, +
incdec -> ID -- ·, -
incdec -> ID -- ·, *
incdec -> ID -- ·, /
incdec -> ID -- ·, %
incdec -> ID -- ·, )
incdec -> ID -- ·, ,
incdec -> ID -- ·, ]
***EndSet***
***EndState***
***State***
115
I_207_269_328_687_726_800_823_887_910_1230_1253_1297_1348
***Set***
incdec -> ID ++ ·, ;
incdec -> ID ++ ·, &&
incdec -> ID ++ ·, ||
incdec -> ID ++ ·, >
incdec -> ID ++ ·, <
incdec -> ID ++ ·, >=
incdec -> ID ++ ·, <=
incdec -> ID ++ ·, ==
incdec -> ID ++ ·, !=
incdec -> ID ++ ·, +
incdec -> ID ++ ·, -
incdec -> ID ++ ·, *
incdec -> ID ++ ·, /
incdec -> ID ++ ·, %
incdec -> ID ++ ·, )
incdec -> ID ++ ·, ,
incdec -> ID ++ ·, ]
***EndSet***
***EndState***
***State***
116
I_208_367
***Set***
statements -> statements stmt ·, $
statements -> statements stmt ·, namespace
statements -> statements stmt ·, {
statements -> statements stmt ·, ID
statements -> statements stmt ·, void
statements -> statements stmt ·, bool
statements -> statements stmt ·, int
statements -> statements stmt ·, long
statements -> statements stmt ·, float
statements -> statements stmt ·, double
statements -> statements stmt ·, char
statements -> statements stmt ·, string
statements -> statements stmt ·, var
statements -> statements stmt ·, own
statements -> statements stmt ·, bor
statements -> statements stmt ·, const
statements -> statements stmt ·, extern
statements -> statements stmt ·, class
statements -> statements stmt ·, (
statements -> statements stmt ·, this
statements -> statements stmt ·, new
statements -> statements stmt ·, LITBOOL
statements -> statements stmt ·, LITINT
statements -> statements stmt ·, LITLONG
statements -> statements stmt ·, LITFLOAT
statements -> statements stmt ·, LITDOUBLE
statements -> statements stmt ·, LITCHAR
statements -> statements stmt ·, LITSTRING
statements -> statements stmt ·, null
statements -> statements stmt ·, ++
statements -> statements stmt ·, --
statements -> statements stmt ·, break
statements -> statements stmt ·, return
statements -> statements stmt ·, delete
statements -> statements stmt ·, while
statements -> statements stmt ·, for
statements -> statements stmt ·, if
statements -> statements stmt ·, }
***EndSet***
***EndState***
***State***
117
I_209_368_561_1149_1407_1485
***Set***
stmt -> stmtexpr ; ·, $
stmt -> stmtexpr ; ·, namespace
stmt -> stmtexpr ; ·, {
stmt -> stmtexpr ; ·, ID
stmt -> stmtexpr ; ·, void
stmt -> stmtexpr ; ·, bool
stmt -> stmtexpr ; ·, int
stmt -> stmtexpr ; ·, long
stmt -> stmtexpr ; ·, float
stmt -> stmtexpr ; ·, double
stmt -> stmtexpr ; ·, char
stmt -> stmtexpr ; ·, string
stmt -> stmtexpr ; ·, var
stmt -> stmtexpr ; ·, own
stmt -> stmtexpr ; ·, bor
stmt -> stmtexpr ; ·, const
stmt -> stmtexpr ; ·, extern
stmt -> stmtexpr ; ·, class
stmt -> stmtexpr ; ·, (
stmt -> stmtexpr ; ·, this
stmt -> stmtexpr ; ·, new
stmt -> stmtexpr ; ·, LITBOOL
stmt -> stmtexpr ; ·, LITINT
stmt -> stmtexpr ; ·, LITLONG
stmt -> stmtexpr ; ·, LITFLOAT
stmt -> stmtexpr ; ·, LITDOUBLE
stmt -> stmtexpr ; ·, LITCHAR
stmt -> stmtexpr ; ·, LITSTRING
stmt -> stmtexpr ; ·, null
stmt -> stmtexpr ; ·, ++
stmt -> stmtexpr ; ·, --
stmt -> stmtexpr ; ·, break
stmt -> stmtexpr ; ·, return
stmt -> stmtexpr ; ·, delete
stmt -> stmtexpr ; ·, while
stmt -> stmtexpr ; ·, for
stmt -> stmtexpr ; ·, if
stmt -> stmtexpr ; ·, }
stmt -> stmtexpr ; ·, &&
stmt -> stmtexpr ; ·, ||
stmt -> stmtexpr ; ·, +
stmt -> stmtexpr ; ·, -
stmt -> stmtexpr ; ·, *
stmt -> stmtexpr ; ·, /
stmt -> stmtexpr ; ·, %
stmt -> stmtexpr ; ·, !
stmt -> stmtexpr ; ·, else
***EndSet***
***EndState***
***State***
118
I_210_369_562_1050_1150_1408_1486
***Set***
declstmt -> type operator · ID ( params ) { statements }, $
declstmt -> type operator · ID ( params ) { statements }, namespace
declstmt -> type operator · ID ( params ) { statements }, {
declstmt -> type operator · ID ( params ) { statements }, ID
declstmt -> type operator · ID ( params ) { statements }, void
declstmt -> type operator · ID ( params ) { statements }, bool
declstmt -> type operator · ID ( params ) { statements }, int
declstmt -> type operator · ID ( params ) { statements }, long
declstmt -> type operator · ID ( params ) { statements }, float
declstmt -> type operator · ID ( params ) { statements }, double
declstmt -> type operator · ID ( params ) { statements }, char
declstmt -> type operator · ID ( params ) { statements }, string
declstmt -> type operator · ID ( params ) { statements }, var
declstmt -> type operator · ID ( params ) { statements }, own
declstmt -> type operator · ID ( params ) { statements }, bor
declstmt -> type operator · ID ( params ) { statements }, const
declstmt -> type operator · ID ( params ) { statements }, extern
declstmt -> type operator · ID ( params ) { statements }, class
declstmt -> type operator · ID ( params ) { statements }, (
declstmt -> type operator · ID ( params ) { statements }, this
declstmt -> type operator · ID ( params ) { statements }, new
declstmt -> type operator · ID ( params ) { statements }, LITBOOL
declstmt -> type operator · ID ( params ) { statements }, LITINT
declstmt -> type operator · ID ( params ) { statements }, LITLONG
declstmt -> type operator · ID ( params ) { statements }, LITFLOAT
declstmt -> type operator · ID ( params ) { statements }, LITDOUBLE
declstmt -> type operator · ID ( params ) { statements }, LITCHAR
declstmt -> type operator · ID ( params ) { statements }, LITSTRING
declstmt -> type operator · ID ( params ) { statements }, null
declstmt -> type operator · ID ( params ) { statements }, ++
declstmt -> type operator · ID ( params ) { statements }, --
declstmt -> type operator · ID ( params ) { statements }, break
declstmt -> type operator · ID ( params ) { statements }, return
declstmt -> type operator · ID ( params ) { statements }, delete
declstmt -> type operator · ID ( params ) { statements }, while
declstmt -> type operator · ID ( params ) { statements }, for
declstmt -> type operator · ID ( params ) { statements }, if
declstmt -> type operator · ID ( params ) { statements }, }
declstmt -> type operator · ID ( params ) { statements }, &&
declstmt -> type operator · ID ( params ) { statements }, ||
declstmt -> type operator · ID ( params ) { statements }, +
declstmt -> type operator · ID ( params ) { statements }, -
declstmt -> type operator · ID ( params ) { statements }, *
declstmt -> type operator · ID ( params ) { statements }, /
declstmt -> type operator · ID ( params ) { statements }, %
declstmt -> type operator · ID ( params ) { statements }, !
declstmt -> type operator · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
119
I_211_370_563_1051_1151_1409_1487
***Set***
declstmt -> type ID · = expr ;, $
declstmt -> type ID · ( params ) { statements }, $
declstmt -> type ID · = expr ;, namespace
declstmt -> type ID · ( params ) { statements }, namespace
declstmt -> type ID · = expr ;, {
declstmt -> type ID · ( params ) { statements }, {
declstmt -> type ID · = expr ;, ID
declstmt -> type ID · ( params ) { statements }, ID
declstmt -> type ID · = expr ;, void
declstmt -> type ID · ( params ) { statements }, void
declstmt -> type ID · = expr ;, bool
declstmt -> type ID · ( params ) { statements }, bool
declstmt -> type ID · = expr ;, int
declstmt -> type ID · ( params ) { statements }, int
declstmt -> type ID · = expr ;, long
declstmt -> type ID · ( params ) { statements }, long
declstmt -> type ID · = expr ;, float
declstmt -> type ID · ( params ) { statements }, float
declstmt -> type ID · = expr ;, double
declstmt -> type ID · ( params ) { statements }, double
declstmt -> type ID · = expr ;, char
declstmt -> type ID · ( params ) { statements }, char
declstmt -> type ID · = expr ;, string
declstmt -> type ID · ( params ) { statements }, string
declstmt -> type ID · = expr ;, var
declstmt -> type ID · ( params ) { statements }, var
declstmt -> type ID · = expr ;, own
declstmt -> type ID · ( params ) { statements }, own
declstmt -> type ID · = expr ;, bor
declstmt -> type ID · ( params ) { statements }, bor
declstmt -> type ID · = expr ;, const
declstmt -> type ID · ( params ) { statements }, const
declstmt -> type ID · = expr ;, extern
declstmt -> type ID · ( params ) { statements }, extern
declstmt -> type ID · = expr ;, class
declstmt -> type ID · ( params ) { statements }, class
declstmt -> type ID · = expr ;, (
declstmt -> type ID · ( params ) { statements }, (
declstmt -> type ID · = expr ;, this
declstmt -> type ID · ( params ) { statements }, this
declstmt -> type ID · = expr ;, new
declstmt -> type ID · ( params ) { statements }, new
declstmt -> type ID · = expr ;, LITBOOL
declstmt -> type ID · ( params ) { statements }, LITBOOL
declstmt -> type ID · = expr ;, LITINT
declstmt -> type ID · ( params ) { statements }, LITINT
declstmt -> type ID · = expr ;, LITLONG
declstmt -> type ID · ( params ) { statements }, LITLONG
declstmt -> type ID · = expr ;, LITFLOAT
declstmt -> type ID · ( params ) { statements }, LITFLOAT
declstmt -> type ID · = expr ;, LITDOUBLE
declstmt -> type ID · ( params ) { statements }, LITDOUBLE
declstmt -> type ID · = expr ;, LITCHAR
declstmt -> type ID · ( params ) { statements }, LITCHAR
declstmt -> type ID · = expr ;, LITSTRING
declstmt -> type ID · ( params ) { statements }, LITSTRING
declstmt -> type ID · = expr ;, null
declstmt -> type ID · ( params ) { statements }, null
declstmt -> type ID · = expr ;, ++
declstmt -> type ID · ( params ) { statements }, ++
declstmt -> type ID · = expr ;, --
declstmt -> type ID · ( params ) { statements }, --
declstmt -> type ID · = expr ;, break
declstmt -> type ID · ( params ) { statements }, break
declstmt -> type ID · = expr ;, return
declstmt -> type ID · ( params ) { statements }, return
declstmt -> type ID · = expr ;, delete
declstmt -> type ID · ( params ) { statements }, delete
declstmt -> type ID · = expr ;, while
declstmt -> type ID · ( params ) { statements }, while
declstmt -> type ID · = expr ;, for
declstmt -> type ID · ( params ) { statements }, for
declstmt -> type ID · = expr ;, if
declstmt -> type ID · ( params ) { statements }, if
declstmt -> type ID · = expr ;, }
declstmt -> type ID · ( params ) { statements }, }
declstmt -> type ID · = expr ;, &&
declstmt -> type ID · ( params ) { statements }, &&
declstmt -> type ID · = expr ;, ||
declstmt -> type ID · ( params ) { statements }, ||
declstmt -> type ID · = expr ;, +
declstmt -> type ID · ( params ) { statements }, +
declstmt -> type ID · = expr ;, -
declstmt -> type ID · ( params ) { statements }, -
declstmt -> type ID · = expr ;, *
declstmt -> type ID · ( params ) { statements }, *
declstmt -> type ID · = expr ;, /
declstmt -> type ID · ( params ) { statements }, /
declstmt -> type ID · = expr ;, %
declstmt -> type ID · ( params ) { statements }, %
declstmt -> type ID · = expr ;, !
declstmt -> type ID · ( params ) { statements }, !
declstmt -> type ID · = expr ;, else
declstmt -> type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
120
I_212_225_233_463_465_567_930_1018_1089_1103_1156_1170_1416_1430_1454
***Set***
primitiveBracket -> primitive [ · optidx ], ID
primitiveBracket -> primitive [ · optidx ], operator
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> primitive [ · optidx ], .
primitiveBracket -> primitive [ · optidx ], ;
primitiveBracket -> primitive [ · optidx ], &&
primitiveBracket -> primitive [ · optidx ], ||
primitiveBracket -> primitive [ · optidx ], >
primitiveBracket -> primitive [ · optidx ], <
primitiveBracket -> primitive [ · optidx ], >=
primitiveBracket -> primitive [ · optidx ], <=
primitiveBracket -> primitive [ · optidx ], ==
primitiveBracket -> primitive [ · optidx ], !=
primitiveBracket -> primitive [ · optidx ], +
primitiveBracket -> primitive [ · optidx ], -
primitiveBracket -> primitive [ · optidx ], *
primitiveBracket -> primitive [ · optidx ], /
primitiveBracket -> primitive [ · optidx ], %
primitiveBracket -> primitive [ · optidx ], )
primitiveBracket -> primitive [ · optidx ], ,
primitiveBracket -> primitive [ · optidx ], ]
***EndSet***
***EndState***
***State***
121
I_213_284_343_467_570_701_732_806_824_893_911_933_1236_1254_1298
***Set***
memberaccess -> primary . · ID, (
memberaccess -> primary . · ID, =
memberaccess -> primary . · ID, +=
memberaccess -> primary . · ID, -=
memberaccess -> primary . · ID, *=
memberaccess -> primary . · ID, /=
memberaccess -> primary . · ID, %=
memberaccess -> primary . · ID, [
memberaccess -> primary . · ID, .
memberaccess -> primary . · ID, ;
memberaccess -> primary . · ID, &&
memberaccess -> primary . · ID, ||
memberaccess -> primary . · ID, >
memberaccess -> primary . · ID, <
memberaccess -> primary . · ID, >=
memberaccess -> primary . · ID, <=
memberaccess -> primary . · ID, ==
memberaccess -> primary . · ID, !=
memberaccess -> primary . · ID, +
memberaccess -> primary . · ID, -
memberaccess -> primary . · ID, *
memberaccess -> primary . · ID, /
memberaccess -> primary . · ID, %
memberaccess -> primary . · ID, )
memberaccess -> primary . · ID, ,
memberaccess -> primary . · ID, ]
***EndSet***
***EndState***
***State***
122
I_214_344_702
***Set***
assign -> lvalue = · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue = · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue = · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
123
I_215_345_703
***Set***
assign -> lvalue += · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue += · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue += · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
124
I_216_346_704
***Set***
assign -> lvalue -= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue -= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue -= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
125
I_217_347_705
***Set***
assign -> lvalue *= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue *= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue *= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
126
I_218_348_706
***Set***
assign -> lvalue /= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue /= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue /= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
127
I_219_349_707
***Set***
assign -> lvalue %= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue %= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue %= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
128
I_220_285_350_708_733_807_825_894_912_1237_1255_1299_1350
***Set***
call -> memberaccess ( · args ), ;
call -> memberaccess ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> memberaccess ( · args ), &&
call -> memberaccess ( · args ), ||
call -> memberaccess ( · args ), >
call -> memberaccess ( · args ), <
call -> memberaccess ( · args ), >=
call -> memberaccess ( · args ), <=
call -> memberaccess ( · args ), ==
call -> memberaccess ( · args ), !=
call -> memberaccess ( · args ), +
call -> memberaccess ( · args ), -
call -> memberaccess ( · args ), *
call -> memberaccess ( · args ), /
call -> memberaccess ( · args ), %
call -> memberaccess ( · args ), )
call -> memberaccess ( · args ), ,
call -> memberaccess ( · args ), ]
***EndSet***
***EndState***
***State***
129
I_221_286_351_468_571_709_734_808_826_895_913_934_1238_1256_1300
***Set***
indexaccess -> memberaccess [ · aexpr ], =
indexaccess -> memberaccess [ · aexpr ], +=
indexaccess -> memberaccess [ · aexpr ], -=
indexaccess -> memberaccess [ · aexpr ], *=
indexaccess -> memberaccess [ · aexpr ], /=
indexaccess -> memberaccess [ · aexpr ], %=
indexaccess -> memberaccess [ · aexpr ], .
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
indexaccess -> memberaccess [ · aexpr ], ;
indexaccess -> memberaccess [ · aexpr ], &&
indexaccess -> memberaccess [ · aexpr ], ||
indexaccess -> memberaccess [ · aexpr ], >
indexaccess -> memberaccess [ · aexpr ], <
indexaccess -> memberaccess [ · aexpr ], >=
indexaccess -> memberaccess [ · aexpr ], <=
indexaccess -> memberaccess [ · aexpr ], ==
indexaccess -> memberaccess [ · aexpr ], !=
indexaccess -> memberaccess [ · aexpr ], +
indexaccess -> memberaccess [ · aexpr ], -
indexaccess -> memberaccess [ · aexpr ], *
indexaccess -> memberaccess [ · aexpr ], /
indexaccess -> memberaccess [ · aexpr ], %
indexaccess -> memberaccess [ · aexpr ], )
indexaccess -> memberaccess [ · aexpr ], ,
indexaccess -> memberaccess [ · aexpr ], ]
***EndSet***
***EndState***
***State***
130
I_222_653_830_1354_1513_1568
***Set***
namespaceblock -> namespace ID { · statements }, $
namespaceblock -> namespace ID { · statements }, namespace
namespaceblock -> namespace ID { · statements }, {
namespaceblock -> namespace ID { · statements }, ID
namespaceblock -> namespace ID { · statements }, void
namespaceblock -> namespace ID { · statements }, bool
namespaceblock -> namespace ID { · statements }, int
namespaceblock -> namespace ID { · statements }, long
namespaceblock -> namespace ID { · statements }, float
namespaceblock -> namespace ID { · statements }, double
namespaceblock -> namespace ID { · statements }, char
namespaceblock -> namespace ID { · statements }, string
namespaceblock -> namespace ID { · statements }, var
namespaceblock -> namespace ID { · statements }, own
namespaceblock -> namespace ID { · statements }, bor
namespaceblock -> namespace ID { · statements }, const
namespaceblock -> namespace ID { · statements }, extern
namespaceblock -> namespace ID { · statements }, class
namespaceblock -> namespace ID { · statements }, (
namespaceblock -> namespace ID { · statements }, this
namespaceblock -> namespace ID { · statements }, new
namespaceblock -> namespace ID { · statements }, LITBOOL
namespaceblock -> namespace ID { · statements }, LITINT
namespaceblock -> namespace ID { · statements }, LITLONG
namespaceblock -> namespace ID { · statements }, LITFLOAT
namespaceblock -> namespace ID { · statements }, LITDOUBLE
namespaceblock -> namespace ID { · statements }, LITCHAR
namespaceblock -> namespace ID { · statements }, LITSTRING
namespaceblock -> namespace ID { · statements }, null
namespaceblock -> namespace ID { · statements }, ++
namespaceblock -> namespace ID { · statements }, --
namespaceblock -> namespace ID { · statements }, break
namespaceblock -> namespace ID { · statements }, return
namespaceblock -> namespace ID { · statements }, delete
namespaceblock -> namespace ID { · statements }, while
namespaceblock -> namespace ID { · statements }, for
namespaceblock -> namespace ID { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { · statements }, }
namespaceblock -> namespace ID { · statements }, &&
namespaceblock -> namespace ID { · statements }, ||
namespaceblock -> namespace ID { · statements }, +
namespaceblock -> namespace ID { · statements }, -
namespaceblock -> namespace ID { · statements }, *
namespaceblock -> namespace ID { · statements }, /
namespaceblock -> namespace ID { · statements }, %
namespaceblock -> namespace ID { · statements }, !
namespaceblock -> namespace ID { · statements }, else
***EndSet***
***EndState***
***State***
131
I_224_654_831_1274_1355_1514_1569
***Set***
declstmt -> extern type ID · ( params ) ;, $
declstmt -> extern type ID · ( params ) ;, namespace
declstmt -> extern type ID · ( params ) ;, {
declstmt -> extern type ID · ( params ) ;, ID
declstmt -> extern type ID · ( params ) ;, void
declstmt -> extern type ID · ( params ) ;, bool
declstmt -> extern type ID · ( params ) ;, int
declstmt -> extern type ID · ( params ) ;, long
declstmt -> extern type ID · ( params ) ;, float
declstmt -> extern type ID · ( params ) ;, double
declstmt -> extern type ID · ( params ) ;, char
declstmt -> extern type ID · ( params ) ;, string
declstmt -> extern type ID · ( params ) ;, var
declstmt -> extern type ID · ( params ) ;, own
declstmt -> extern type ID · ( params ) ;, bor
declstmt -> extern type ID · ( params ) ;, const
declstmt -> extern type ID · ( params ) ;, extern
declstmt -> extern type ID · ( params ) ;, class
declstmt -> extern type ID · ( params ) ;, (
declstmt -> extern type ID · ( params ) ;, this
declstmt -> extern type ID · ( params ) ;, new
declstmt -> extern type ID · ( params ) ;, LITBOOL
declstmt -> extern type ID · ( params ) ;, LITINT
declstmt -> extern type ID · ( params ) ;, LITLONG
declstmt -> extern type ID · ( params ) ;, LITFLOAT
declstmt -> extern type ID · ( params ) ;, LITDOUBLE
declstmt -> extern type ID · ( params ) ;, LITCHAR
declstmt -> extern type ID · ( params ) ;, LITSTRING
declstmt -> extern type ID · ( params ) ;, null
declstmt -> extern type ID · ( params ) ;, ++
declstmt -> extern type ID · ( params ) ;, --
declstmt -> extern type ID · ( params ) ;, break
declstmt -> extern type ID · ( params ) ;, return
declstmt -> extern type ID · ( params ) ;, delete
declstmt -> extern type ID · ( params ) ;, while
declstmt -> extern type ID · ( params ) ;, for
declstmt -> extern type ID · ( params ) ;, if
declstmt -> extern type ID · ( params ) ;, }
declstmt -> extern type ID · ( params ) ;, &&
declstmt -> extern type ID · ( params ) ;, ||
declstmt -> extern type ID · ( params ) ;, +
declstmt -> extern type ID · ( params ) ;, -
declstmt -> extern type ID · ( params ) ;, *
declstmt -> extern type ID · ( params ) ;, /
declstmt -> extern type ID · ( params ) ;, %
declstmt -> extern type ID · ( params ) ;, !
declstmt -> extern type ID · ( params ) ;, else
***EndSet***
***EndState***
***State***
132
I_226_655_832_1275_1356_1515_1570
***Set***
declstmt -> const type ID · = lit ;, $
declstmt -> const type ID · = lit ;, namespace
declstmt -> const type ID · = lit ;, {
declstmt -> const type ID · = lit ;, ID
declstmt -> const type ID · = lit ;, void
declstmt -> const type ID · = lit ;, bool
declstmt -> const type ID · = lit ;, int
declstmt -> const type ID · = lit ;, long
declstmt -> const type ID · = lit ;, float
declstmt -> const type ID · = lit ;, double
declstmt -> const type ID · = lit ;, char
declstmt -> const type ID · = lit ;, string
declstmt -> const type ID · = lit ;, var
declstmt -> const type ID · = lit ;, own
declstmt -> const type ID · = lit ;, bor
declstmt -> const type ID · = lit ;, const
declstmt -> const type ID · = lit ;, extern
declstmt -> const type ID · = lit ;, class
declstmt -> const type ID · = lit ;, (
declstmt -> const type ID · = lit ;, this
declstmt -> const type ID · = lit ;, new
declstmt -> const type ID · = lit ;, LITBOOL
declstmt -> const type ID · = lit ;, LITINT
declstmt -> const type ID · = lit ;, LITLONG
declstmt -> const type ID · = lit ;, LITFLOAT
declstmt -> const type ID · = lit ;, LITDOUBLE
declstmt -> const type ID · = lit ;, LITCHAR
declstmt -> const type ID · = lit ;, LITSTRING
declstmt -> const type ID · = lit ;, null
declstmt -> const type ID · = lit ;, ++
declstmt -> const type ID · = lit ;, --
declstmt -> const type ID · = lit ;, break
declstmt -> const type ID · = lit ;, return
declstmt -> const type ID · = lit ;, delete
declstmt -> const type ID · = lit ;, while
declstmt -> const type ID · = lit ;, for
declstmt -> const type ID · = lit ;, if
declstmt -> const type ID · = lit ;, }
declstmt -> const type ID · = lit ;, &&
declstmt -> const type ID · = lit ;, ||
declstmt -> const type ID · = lit ;, +
declstmt -> const type ID · = lit ;, -
declstmt -> const type ID · = lit ;, *
declstmt -> const type ID · = lit ;, /
declstmt -> const type ID · = lit ;, %
declstmt -> const type ID · = lit ;, !
declstmt -> const type ID · = lit ;, else
***EndSet***
***EndState***
***State***
133
I_227_656_833_1276_1357_1516_1571
***Set***
declstmt -> own type ID · = expr ;, $
declstmt -> own type ID · = expr ;, namespace
declstmt -> own type ID · = expr ;, {
declstmt -> own type ID · = expr ;, ID
declstmt -> own type ID · = expr ;, void
declstmt -> own type ID · = expr ;, bool
declstmt -> own type ID · = expr ;, int
declstmt -> own type ID · = expr ;, long
declstmt -> own type ID · = expr ;, float
declstmt -> own type ID · = expr ;, double
declstmt -> own type ID · = expr ;, char
declstmt -> own type ID · = expr ;, string
declstmt -> own type ID · = expr ;, var
declstmt -> own type ID · = expr ;, own
declstmt -> own type ID · = expr ;, bor
declstmt -> own type ID · = expr ;, const
declstmt -> own type ID · = expr ;, extern
declstmt -> own type ID · = expr ;, class
declstmt -> own type ID · = expr ;, (
declstmt -> own type ID · = expr ;, this
declstmt -> own type ID · = expr ;, new
declstmt -> own type ID · = expr ;, LITBOOL
declstmt -> own type ID · = expr ;, LITINT
declstmt -> own type ID · = expr ;, LITLONG
declstmt -> own type ID · = expr ;, LITFLOAT
declstmt -> own type ID · = expr ;, LITDOUBLE
declstmt -> own type ID · = expr ;, LITCHAR
declstmt -> own type ID · = expr ;, LITSTRING
declstmt -> own type ID · = expr ;, null
declstmt -> own type ID · = expr ;, ++
declstmt -> own type ID · = expr ;, --
declstmt -> own type ID · = expr ;, break
declstmt -> own type ID · = expr ;, return
declstmt -> own type ID · = expr ;, delete
declstmt -> own type ID · = expr ;, while
declstmt -> own type ID · = expr ;, for
declstmt -> own type ID · = expr ;, if
declstmt -> own type ID · = expr ;, }
declstmt -> own type ID · = expr ;, &&
declstmt -> own type ID · = expr ;, ||
declstmt -> own type ID · = expr ;, +
declstmt -> own type ID · = expr ;, -
declstmt -> own type ID · = expr ;, *
declstmt -> own type ID · = expr ;, /
declstmt -> own type ID · = expr ;, %
declstmt -> own type ID · = expr ;, !
declstmt -> own type ID · = expr ;, else
***EndSet***
***EndState***
***State***
134
I_228_657_834_1277_1358_1517_1572
***Set***
declstmt -> bor type ID · = expr ;, $
declstmt -> bor type ID · = expr ;, namespace
declstmt -> bor type ID · = expr ;, {
declstmt -> bor type ID · = expr ;, ID
declstmt -> bor type ID · = expr ;, void
declstmt -> bor type ID · = expr ;, bool
declstmt -> bor type ID · = expr ;, int
declstmt -> bor type ID · = expr ;, long
declstmt -> bor type ID · = expr ;, float
declstmt -> bor type ID · = expr ;, double
declstmt -> bor type ID · = expr ;, char
declstmt -> bor type ID · = expr ;, string
declstmt -> bor type ID · = expr ;, var
declstmt -> bor type ID · = expr ;, own
declstmt -> bor type ID · = expr ;, bor
declstmt -> bor type ID · = expr ;, const
declstmt -> bor type ID · = expr ;, extern
declstmt -> bor type ID · = expr ;, class
declstmt -> bor type ID · = expr ;, (
declstmt -> bor type ID · = expr ;, this
declstmt -> bor type ID · = expr ;, new
declstmt -> bor type ID · = expr ;, LITBOOL
declstmt -> bor type ID · = expr ;, LITINT
declstmt -> bor type ID · = expr ;, LITLONG
declstmt -> bor type ID · = expr ;, LITFLOAT
declstmt -> bor type ID · = expr ;, LITDOUBLE
declstmt -> bor type ID · = expr ;, LITCHAR
declstmt -> bor type ID · = expr ;, LITSTRING
declstmt -> bor type ID · = expr ;, null
declstmt -> bor type ID · = expr ;, ++
declstmt -> bor type ID · = expr ;, --
declstmt -> bor type ID · = expr ;, break
declstmt -> bor type ID · = expr ;, return
declstmt -> bor type ID · = expr ;, delete
declstmt -> bor type ID · = expr ;, while
declstmt -> bor type ID · = expr ;, for
declstmt -> bor type ID · = expr ;, if
declstmt -> bor type ID · = expr ;, }
declstmt -> bor type ID · = expr ;, &&
declstmt -> bor type ID · = expr ;, ||
declstmt -> bor type ID · = expr ;, +
declstmt -> bor type ID · = expr ;, -
declstmt -> bor type ID · = expr ;, *
declstmt -> bor type ID · = expr ;, /
declstmt -> bor type ID · = expr ;, %
declstmt -> bor type ID · = expr ;, !
declstmt -> bor type ID · = expr ;, else
***EndSet***
***EndState***
***State***
135
I_229
***Set***
inherit -> : · ID, {
***EndSet***
***EndState***
***State***
136
I_230_658_835_1278_1359_1518_1573
***Set***
declstmt -> class ID inherit · { declstatements }, $
declstmt -> class ID inherit · { declstatements }, namespace
declstmt -> class ID inherit · { declstatements }, {
declstmt -> class ID inherit · { declstatements }, ID
declstmt -> class ID inherit · { declstatements }, void
declstmt -> class ID inherit · { declstatements }, bool
declstmt -> class ID inherit · { declstatements }, int
declstmt -> class ID inherit · { declstatements }, long
declstmt -> class ID inherit · { declstatements }, float
declstmt -> class ID inherit · { declstatements }, double
declstmt -> class ID inherit · { declstatements }, char
declstmt -> class ID inherit · { declstatements }, string
declstmt -> class ID inherit · { declstatements }, var
declstmt -> class ID inherit · { declstatements }, own
declstmt -> class ID inherit · { declstatements }, bor
declstmt -> class ID inherit · { declstatements }, const
declstmt -> class ID inherit · { declstatements }, extern
declstmt -> class ID inherit · { declstatements }, class
declstmt -> class ID inherit · { declstatements }, (
declstmt -> class ID inherit · { declstatements }, this
declstmt -> class ID inherit · { declstatements }, new
declstmt -> class ID inherit · { declstatements }, LITBOOL
declstmt -> class ID inherit · { declstatements }, LITINT
declstmt -> class ID inherit · { declstatements }, LITLONG
declstmt -> class ID inherit · { declstatements }, LITFLOAT
declstmt -> class ID inherit · { declstatements }, LITDOUBLE
declstmt -> class ID inherit · { declstatements }, LITCHAR
declstmt -> class ID inherit · { declstatements }, LITSTRING
declstmt -> class ID inherit · { declstatements }, null
declstmt -> class ID inherit · { declstatements }, ++
declstmt -> class ID inherit · { declstatements }, --
declstmt -> class ID inherit · { declstatements }, break
declstmt -> class ID inherit · { declstatements }, return
declstmt -> class ID inherit · { declstatements }, delete
declstmt -> class ID inherit · { declstatements }, while
declstmt -> class ID inherit · { declstatements }, for
declstmt -> class ID inherit · { declstatements }, if
declstmt -> class ID inherit · { declstatements }, }
declstmt -> class ID inherit · { declstatements }, &&
declstmt -> class ID inherit · { declstatements }, ||
declstmt -> class ID inherit · { declstatements }, +
declstmt -> class ID inherit · { declstatements }, -
declstmt -> class ID inherit · { declstatements }, *
declstmt -> class ID inherit · { declstatements }, /
declstmt -> class ID inherit · { declstatements }, %
declstmt -> class ID inherit · { declstatements }, !
declstmt -> class ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
137
I_231_461_565_928_1017_1088_1102_1155_1169_1415_1429_1453_1488
***Set***
newobj -> new ID ( · ), ;
newobj -> new ID ( · ), .
newobj -> new ID ( · ), &&
newobj -> new ID ( · ), ||
newobj -> new ID ( · ), >
newobj -> new ID ( · ), <
newobj -> new ID ( · ), >=
newobj -> new ID ( · ), <=
newobj -> new ID ( · ), ==
newobj -> new ID ( · ), !=
newobj -> new ID ( · ), +
newobj -> new ID ( · ), -
newobj -> new ID ( · ), *
newobj -> new ID ( · ), /
newobj -> new ID ( · ), %
newobj -> new ID ( · ), )
newobj -> new ID ( · ), ,
newobj -> new ID ( · ), ]
***EndSet***
***EndState***
***State***
138
I_249_314_673_717_791_814_878_901_1221_1244_1288
***Set***
cast -> ( type · ) factor, ;
cast -> ( type · ) factor, &&
cast -> ( type · ) factor, ||
cast -> ( type · ) factor, >
cast -> ( type · ) factor, <
cast -> ( type · ) factor, >=
cast -> ( type · ) factor, <=
cast -> ( type · ) factor, ==
cast -> ( type · ) factor, !=
cast -> ( type · ) factor, +
cast -> ( type · ) factor, -
cast -> ( type · ) factor, *
cast -> ( type · ) factor, /
cast -> ( type · ) factor, %
cast -> ( type · ) factor, )
cast -> ( type · ) factor, ,
cast -> ( type · ) factor, ]
***EndSet***
***EndState***
***State***
139
I_259_318_421_491_525_593_627_677_956_990_1071
***Set***
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
call -> ID · ( args ), ;
call -> ID · ( args ), &&
call -> ID · ( args ), ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
primary -> ID ·, .
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ]
incdec -> ID · --, ]
primary -> ID ·, ]
call -> ID · ( args ), ]
idBracket -> ID · [ optidx ], ]
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
140
I_260_319_423_493_527_595_629_678_958_992_1073
***Set***
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, .
primary -> indexaccess ·, )
primary -> indexaccess ·, ]
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
141
I_261_320_679_721_795_818_882_905_1225_1248_1292
***Set***
factor -> - factor ·, ;
factor -> - factor ·, &&
factor -> - factor ·, ||
factor -> - factor ·, >
factor -> - factor ·, <
factor -> - factor ·, >=
factor -> - factor ·, <=
factor -> - factor ·, ==
factor -> - factor ·, !=
factor -> - factor ·, +
factor -> - factor ·, -
factor -> - factor ·, *
factor -> - factor ·, /
factor -> - factor ·, %
factor -> - factor ·, )
factor -> - factor ·, ,
factor -> - factor ·, ]
***EndSet***
***EndState***
***State***
142
I_263_322_433_503_536_605_638_681_968_1001_1082
***Set***
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], ;
call -> memberaccess · ( args ), ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ]
indexaccess -> memberaccess · [ aexpr ], ]
call -> memberaccess · ( args ), ]
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
143
I_265_324_683_722_796_819_883_906_1226_1249_1293
***Set***
factor -> ! factor ·, ;
factor -> ! factor ·, &&
factor -> ! factor ·, ||
factor -> ! factor ·, >
factor -> ! factor ·, <
factor -> ! factor ·, >=
factor -> ! factor ·, <=
factor -> ! factor ·, ==
factor -> ! factor ·, !=
factor -> ! factor ·, +
factor -> ! factor ·, -
factor -> ! factor ·, *
factor -> ! factor ·, /
factor -> ! factor ·, %
factor -> ! factor ·, )
factor -> ! factor ·, ,
factor -> ! factor ·, ]
***EndSet***
***EndState***
***State***
144
I_270_659_836_1360_1519_1574
***Set***
stmt -> delete expr ; ·, $
stmt -> delete expr ; ·, namespace
stmt -> delete expr ; ·, {
stmt -> delete expr ; ·, ID
stmt -> delete expr ; ·, void
stmt -> delete expr ; ·, bool
stmt -> delete expr ; ·, int
stmt -> delete expr ; ·, long
stmt -> delete expr ; ·, float
stmt -> delete expr ; ·, double
stmt -> delete expr ; ·, char
stmt -> delete expr ; ·, string
stmt -> delete expr ; ·, var
stmt -> delete expr ; ·, own
stmt -> delete expr ; ·, bor
stmt -> delete expr ; ·, const
stmt -> delete expr ; ·, extern
stmt -> delete expr ; ·, class
stmt -> delete expr ; ·, (
stmt -> delete expr ; ·, this
stmt -> delete expr ; ·, new
stmt -> delete expr ; ·, LITBOOL
stmt -> delete expr ; ·, LITINT
stmt -> delete expr ; ·, LITLONG
stmt -> delete expr ; ·, LITFLOAT
stmt -> delete expr ; ·, LITDOUBLE
stmt -> delete expr ; ·, LITCHAR
stmt -> delete expr ; ·, LITSTRING
stmt -> delete expr ; ·, null
stmt -> delete expr ; ·, ++
stmt -> delete expr ; ·, --
stmt -> delete expr ; ·, break
stmt -> delete expr ; ·, return
stmt -> delete expr ; ·, delete
stmt -> delete expr ; ·, while
stmt -> delete expr ; ·, for
stmt -> delete expr ; ·, if
stmt -> delete expr ; ·, }
stmt -> delete expr ; ·, &&
stmt -> delete expr ; ·, ||
stmt -> delete expr ; ·, +
stmt -> delete expr ; ·, -
stmt -> delete expr ; ·, *
stmt -> delete expr ; ·, /
stmt -> delete expr ; ·, %
stmt -> delete expr ; ·, !
stmt -> delete expr ; ·, else
***EndSet***
***EndState***
***State***
145
I_271_330_688
***Set***
bexpr -> bexpr || · bexpr, ;
bexpr -> bexpr || · bexpr, &&
bexpr -> bexpr || · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr || · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr || · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
146
I_272_331_689
***Set***
bexpr -> bexpr && · bexpr, ;
bexpr -> bexpr && · bexpr, &&
bexpr -> bexpr && · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr && · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr && · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
147
I_273_332_690
***Set***
bexpr -> aexpr == · aexpr, ;
bexpr -> aexpr == · aexpr, &&
bexpr -> aexpr == · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr == · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr == · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
148
I_274_333_691
***Set***
bexpr -> aexpr != · aexpr, ;
bexpr -> aexpr != · aexpr, &&
bexpr -> aexpr != · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr != · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr != · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
149
I_275_334_692
***Set***
bexpr -> aexpr <= · aexpr, ;
bexpr -> aexpr <= · aexpr, &&
bexpr -> aexpr <= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr <= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr <= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
150
I_276_335_693
***Set***
bexpr -> aexpr >= · aexpr, ;
bexpr -> aexpr >= · aexpr, &&
bexpr -> aexpr >= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr >= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr >= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
151
I_277_336_694
***Set***
bexpr -> aexpr > · aexpr, ;
bexpr -> aexpr > · aexpr, &&
bexpr -> aexpr > · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr > · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr > · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
152
I_278_337_695
***Set***
bexpr -> aexpr < · aexpr, ;
bexpr -> aexpr < · aexpr, &&
bexpr -> aexpr < · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr < · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr < · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
153
I_279_338_696_727_781_801_888_1231
***Set***
aexpr -> aexpr + · term, ;
aexpr -> aexpr + · term, >
aexpr -> aexpr + · term, <
aexpr -> aexpr + · term, >=
aexpr -> aexpr + · term, <=
aexpr -> aexpr + · term, ==
aexpr -> aexpr + · term, !=
aexpr -> aexpr + · term, +
aexpr -> aexpr + · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr + · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr + · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr + · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr + · term, &&
aexpr -> aexpr + · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
154
I_280_339_697_728_782_802_889_1232
***Set***
aexpr -> aexpr - · term, ;
aexpr -> aexpr - · term, >
aexpr -> aexpr - · term, <
aexpr -> aexpr - · term, >=
aexpr -> aexpr - · term, <=
aexpr -> aexpr - · term, ==
aexpr -> aexpr - · term, !=
aexpr -> aexpr - · term, +
aexpr -> aexpr - · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr - · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr - · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr - · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr - · term, &&
aexpr -> aexpr - · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
155
I_281_340_698_729_783_803_890_1233
***Set***
term -> term * · factor, ;
term -> term * · factor, >
term -> term * · factor, <
term -> term * · factor, >=
term -> term * · factor, <=
term -> term * · factor, ==
term -> term * · factor, !=
term -> term * · factor, +
term -> term * · factor, -
term -> term * · factor, *
term -> term * · factor, /
term -> term * · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term * · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term * · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term * · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term * · factor, &&
term -> term * · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
156
I_282_341_699_730_784_804_891_1234
***Set***
term -> term / · factor, ;
term -> term / · factor, >
term -> term / · factor, <
term -> term / · factor, >=
term -> term / · factor, <=
term -> term / · factor, ==
term -> term / · factor, !=
term -> term / · factor, +
term -> term / · factor, -
term -> term / · factor, *
term -> term / · factor, /
term -> term / · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term / · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term / · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term / · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term / · factor, &&
term -> term / · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
157
I_283_342_700_731_785_805_892_1235
***Set***
term -> term % · factor, ;
term -> term % · factor, >
term -> term % · factor, <
term -> term % · factor, >=
term -> term % · factor, <=
term -> term % · factor, ==
term -> term % · factor, !=
term -> term % · factor, +
term -> term % · factor, -
term -> term % · factor, *
term -> term % · factor, /
term -> term % · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term % · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term % · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term % · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term % · factor, &&
term -> term % · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
158
I_287_660_837_1361_1520_1575
***Set***
stmt -> while ( expr · ) stmt, $
stmt -> while ( expr · ) stmt, namespace
stmt -> while ( expr · ) stmt, {
stmt -> while ( expr · ) stmt, ID
stmt -> while ( expr · ) stmt, void
stmt -> while ( expr · ) stmt, bool
stmt -> while ( expr · ) stmt, int
stmt -> while ( expr · ) stmt, long
stmt -> while ( expr · ) stmt, float
stmt -> while ( expr · ) stmt, double
stmt -> while ( expr · ) stmt, char
stmt -> while ( expr · ) stmt, string
stmt -> while ( expr · ) stmt, var
stmt -> while ( expr · ) stmt, own
stmt -> while ( expr · ) stmt, bor
stmt -> while ( expr · ) stmt, const
stmt -> while ( expr · ) stmt, extern
stmt -> while ( expr · ) stmt, class
stmt -> while ( expr · ) stmt, (
stmt -> while ( expr · ) stmt, this
stmt -> while ( expr · ) stmt, new
stmt -> while ( expr · ) stmt, LITBOOL
stmt -> while ( expr · ) stmt, LITINT
stmt -> while ( expr · ) stmt, LITLONG
stmt -> while ( expr · ) stmt, LITFLOAT
stmt -> while ( expr · ) stmt, LITDOUBLE
stmt -> while ( expr · ) stmt, LITCHAR
stmt -> while ( expr · ) stmt, LITSTRING
stmt -> while ( expr · ) stmt, null
stmt -> while ( expr · ) stmt, ++
stmt -> while ( expr · ) stmt, --
stmt -> while ( expr · ) stmt, break
stmt -> while ( expr · ) stmt, return
stmt -> while ( expr · ) stmt, delete
stmt -> while ( expr · ) stmt, while
stmt -> while ( expr · ) stmt, for
stmt -> while ( expr · ) stmt, if
stmt -> while ( expr · ) stmt, }
stmt -> while ( expr · ) stmt, &&
stmt -> while ( expr · ) stmt, ||
stmt -> while ( expr · ) stmt, +
stmt -> while ( expr · ) stmt, -
stmt -> while ( expr · ) stmt, *
stmt -> while ( expr · ) stmt, /
stmt -> while ( expr · ) stmt, %
stmt -> while ( expr · ) stmt, !
stmt -> while ( expr · ) stmt, else
***EndSet***
***EndState***
***State***
159
I_303_661_838_1362_1521_1576
***Set***
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, $
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, {
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ID
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, void
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bool
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, int
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, long
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, float
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, double
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, char
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, string
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, var
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, own
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bor
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, const
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, extern
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, class
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, (
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, this
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, new
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITLONG
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, null
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ++
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, --
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, break
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, return
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, delete
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, while
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, for
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, if
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, }
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, &&
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ||
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, +
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, -
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, *
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, !
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
160
I_307_662_839_1363_1522_1577
***Set***
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, long
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, var
stmt -> if ( expr · ) stmt elifclauselist elseclause, own
stmt -> if ( expr · ) stmt elifclauselist elseclause, bor
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
161
I_308_663_840_1364_1523_1578
***Set***
stmt -> return expr ; ·, $
stmt -> return expr ; ·, namespace
stmt -> return expr ; ·, {
stmt -> return expr ; ·, ID
stmt -> return expr ; ·, void
stmt -> return expr ; ·, bool
stmt -> return expr ; ·, int
stmt -> return expr ; ·, long
stmt -> return expr ; ·, float
stmt -> return expr ; ·, double
stmt -> return expr ; ·, char
stmt -> return expr ; ·, string
stmt -> return expr ; ·, var
stmt -> return expr ; ·, own
stmt -> return expr ; ·, bor
stmt -> return expr ; ·, const
stmt -> return expr ; ·, extern
stmt -> return expr ; ·, class
stmt -> return expr ; ·, (
stmt -> return expr ; ·, this
stmt -> return expr ; ·, new
stmt -> return expr ; ·, LITBOOL
stmt -> return expr ; ·, LITINT
stmt -> return expr ; ·, LITLONG
stmt -> return expr ; ·, LITFLOAT
stmt -> return expr ; ·, LITDOUBLE
stmt -> return expr ; ·, LITCHAR
stmt -> return expr ; ·, LITSTRING
stmt -> return expr ; ·, null
stmt -> return expr ; ·, ++
stmt -> return expr ; ·, --
stmt -> return expr ; ·, break
stmt -> return expr ; ·, return
stmt -> return expr ; ·, delete
stmt -> return expr ; ·, while
stmt -> return expr ; ·, for
stmt -> return expr ; ·, if
stmt -> return expr ; ·, }
stmt -> return expr ; ·, &&
stmt -> return expr ; ·, ||
stmt -> return expr ; ·, +
stmt -> return expr ; ·, -
stmt -> return expr ; ·, *
stmt -> return expr ; ·, /
stmt -> return expr ; ·, %
stmt -> return expr ; ·, !
stmt -> return expr ; ·, else
***EndSet***
***EndState***
***State***
162
I_329_466_569_932_1020_1091_1105_1158_1172_1418_1432_1456
***Set***
primary -> ( expr ) ·, .
primary -> ( expr ) ·, ;
primary -> ( expr ) ·, &&
primary -> ( expr ) ·, ||
primary -> ( expr ) ·, >
primary -> ( expr ) ·, <
primary -> ( expr ) ·, >=
primary -> ( expr ) ·, <=
primary -> ( expr ) ·, ==
primary -> ( expr ) ·, !=
primary -> ( expr ) ·, +
primary -> ( expr ) ·, -
primary -> ( expr ) ·, *
primary -> ( expr ) ·, /
primary -> ( expr ) ·, %
primary -> ( expr ) ·, )
primary -> ( expr ) ·, ,
primary -> ( expr ) ·, ]
***EndSet***
***EndState***
***State***
163
I_366_664_841_1365_1524_1579
***Set***
statementblock -> { statements } ·, $
statementblock -> { statements } ·, namespace
statementblock -> { statements } ·, {
statementblock -> { statements } ·, ID
statementblock -> { statements } ·, void
statementblock -> { statements } ·, bool
statementblock -> { statements } ·, int
statementblock -> { statements } ·, long
statementblock -> { statements } ·, float
statementblock -> { statements } ·, double
statementblock -> { statements } ·, char
statementblock -> { statements } ·, string
statementblock -> { statements } ·, var
statementblock -> { statements } ·, own
statementblock -> { statements } ·, bor
statementblock -> { statements } ·, const
statementblock -> { statements } ·, extern
statementblock -> { statements } ·, class
statementblock -> { statements } ·, (
statementblock -> { statements } ·, this
statementblock -> { statements } ·, new
statementblock -> { statements } ·, LITBOOL
statementblock -> { statements } ·, LITINT
statementblock -> { statements } ·, LITLONG
statementblock -> { statements } ·, LITFLOAT
statementblock -> { statements } ·, LITDOUBLE
statementblock -> { statements } ·, LITCHAR
statementblock -> { statements } ·, LITSTRING
statementblock -> { statements } ·, null
statementblock -> { statements } ·, ++
statementblock -> { statements } ·, --
statementblock -> { statements } ·, break
statementblock -> { statements } ·, return
statementblock -> { statements } ·, delete
statementblock -> { statements } ·, while
statementblock -> { statements } ·, for
statementblock -> { statements } ·, if
statementblock -> { statements } ·, }
statementblock -> { statements } ·, &&
statementblock -> { statements } ·, ||
statementblock -> { statements } ·, +
statementblock -> { statements } ·, -
statementblock -> { statements } ·, *
statementblock -> { statements } ·, /
statementblock -> { statements } ·, %
statementblock -> { statements } ·, !
statementblock -> { statements } ·, else
***EndSet***
***EndState***
***State***
164
I_393
***Set***
args -> expr ·, )
args -> expr ·, ,
***EndSet***
***EndState***
***State***
165
I_404_469_572_935_1021_1092_1106_1159_1173_1419_1433_1457_1489
***Set***
call -> ID ( args · ), ;
call -> ID ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> ID ( args · ), &&
call -> ID ( args · ), ||
call -> ID ( args · ), >
call -> ID ( args · ), <
call -> ID ( args · ), >=
call -> ID ( args · ), <=
call -> ID ( args · ), ==
call -> ID ( args · ), !=
call -> ID ( args · ), +
call -> ID ( args · ), -
call -> ID ( args · ), *
call -> ID ( args · ), /
call -> ID ( args · ), %
call -> ID ( args · ), )
call -> ID ( args · ), ,
call -> ID ( args · ), ]
***EndSet***
***EndState***
***State***
166
I_427
***Set***
optidx -> aexpr ·, ]
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
***EndSet***
***EndState***
***State***
167
I_429_499_532_601_634_964_997_1078
***Set***
term -> factor ·, ]
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
term -> factor ·, ;
term -> factor ·, &&
term -> factor ·, ||
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, )
term -> factor ·, ,
***EndSet***
***EndState***
***State***
168
I_435_450_459_470_573_773_866_936_1022_1093_1107_1160_1174_1209_1279_1420_1434_1458_1490
***Set***
idBracket -> ID [ optidx · ], ID
idBracket -> ID [ optidx · ], operator
idBracket -> ID [ optidx · ], =
idBracket -> ID [ optidx · ], +=
idBracket -> ID [ optidx · ], -=
idBracket -> ID [ optidx · ], *=
idBracket -> ID [ optidx · ], /=
idBracket -> ID [ optidx · ], %=
idBracket -> ID [ optidx · ], .
idBracket -> ID [ optidx · ], ;
idBracket -> ID [ optidx · ], &&
idBracket -> ID [ optidx · ], ||
idBracket -> ID [ optidx · ], >
idBracket -> ID [ optidx · ], <
idBracket -> ID [ optidx · ], >=
idBracket -> ID [ optidx · ], <=
idBracket -> ID [ optidx · ], ==
idBracket -> ID [ optidx · ], !=
idBracket -> ID [ optidx · ], +
idBracket -> ID [ optidx · ], -
idBracket -> ID [ optidx · ], *
idBracket -> ID [ optidx · ], /
idBracket -> ID [ optidx · ], %
idBracket -> ID [ optidx · ], )
idBracket -> ID [ optidx · ], ,
idBracket -> ID [ optidx · ], ]
***EndSet***
***EndState***
***State***
169
I_436_665_843_1280_1369_1528_1583
***Set***
declstmt -> type operator ID · ( params ) { statements }, $
declstmt -> type operator ID · ( params ) { statements }, namespace
declstmt -> type operator ID · ( params ) { statements }, {
declstmt -> type operator ID · ( params ) { statements }, ID
declstmt -> type operator ID · ( params ) { statements }, void
declstmt -> type operator ID · ( params ) { statements }, bool
declstmt -> type operator ID · ( params ) { statements }, int
declstmt -> type operator ID · ( params ) { statements }, long
declstmt -> type operator ID · ( params ) { statements }, float
declstmt -> type operator ID · ( params ) { statements }, double
declstmt -> type operator ID · ( params ) { statements }, char
declstmt -> type operator ID · ( params ) { statements }, string
declstmt -> type operator ID · ( params ) { statements }, var
declstmt -> type operator ID · ( params ) { statements }, own
declstmt -> type operator ID · ( params ) { statements }, bor
declstmt -> type operator ID · ( params ) { statements }, const
declstmt -> type operator ID · ( params ) { statements }, extern
declstmt -> type operator ID · ( params ) { statements }, class
declstmt -> type operator ID · ( params ) { statements }, (
declstmt -> type operator ID · ( params ) { statements }, this
declstmt -> type operator ID · ( params ) { statements }, new
declstmt -> type operator ID · ( params ) { statements }, LITBOOL
declstmt -> type operator ID · ( params ) { statements }, LITINT
declstmt -> type operator ID · ( params ) { statements }, LITLONG
declstmt -> type operator ID · ( params ) { statements }, LITFLOAT
declstmt -> type operator ID · ( params ) { statements }, LITDOUBLE
declstmt -> type operator ID · ( params ) { statements }, LITCHAR
declstmt -> type operator ID · ( params ) { statements }, LITSTRING
declstmt -> type operator ID · ( params ) { statements }, null
declstmt -> type operator ID · ( params ) { statements }, ++
declstmt -> type operator ID · ( params ) { statements }, --
declstmt -> type operator ID · ( params ) { statements }, break
declstmt -> type operator ID · ( params ) { statements }, return
declstmt -> type operator ID · ( params ) { statements }, delete
declstmt -> type operator ID · ( params ) { statements }, while
declstmt -> type operator ID · ( params ) { statements }, for
declstmt -> type operator ID · ( params ) { statements }, if
declstmt -> type operator ID · ( params ) { statements }, }
declstmt -> type operator ID · ( params ) { statements }, &&
declstmt -> type operator ID · ( params ) { statements }, ||
declstmt -> type operator ID · ( params ) { statements }, +
declstmt -> type operator ID · ( params ) { statements }, -
declstmt -> type operator ID · ( params ) { statements }, *
declstmt -> type operator ID · ( params ) { statements }, /
declstmt -> type operator ID · ( params ) { statements }, %
declstmt -> type operator ID · ( params ) { statements }, !
declstmt -> type operator ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
170
I_437_666_844_1281_1370_1529_1584
***Set***
declstmt -> type ID ( · params ) { statements }, $
declstmt -> type ID ( · params ) { statements }, namespace
declstmt -> type ID ( · params ) { statements }, {
declstmt -> type ID ( · params ) { statements }, ID
declstmt -> type ID ( · params ) { statements }, void
declstmt -> type ID ( · params ) { statements }, bool
declstmt -> type ID ( · params ) { statements }, int
declstmt -> type ID ( · params ) { statements }, long
declstmt -> type ID ( · params ) { statements }, float
declstmt -> type ID ( · params ) { statements }, double
declstmt -> type ID ( · params ) { statements }, char
declstmt -> type ID ( · params ) { statements }, string
declstmt -> type ID ( · params ) { statements }, var
declstmt -> type ID ( · params ) { statements }, own
declstmt -> type ID ( · params ) { statements }, bor
declstmt -> type ID ( · params ) { statements }, const
declstmt -> type ID ( · params ) { statements }, extern
declstmt -> type ID ( · params ) { statements }, class
declstmt -> type ID ( · params ) { statements }, (
declstmt -> type ID ( · params ) { statements }, this
declstmt -> type ID ( · params ) { statements }, new
declstmt -> type ID ( · params ) { statements }, LITBOOL
declstmt -> type ID ( · params ) { statements }, LITINT
declstmt -> type ID ( · params ) { statements }, LITLONG
declstmt -> type ID ( · params ) { statements }, LITFLOAT
declstmt -> type ID ( · params ) { statements }, LITDOUBLE
declstmt -> type ID ( · params ) { statements }, LITCHAR
declstmt -> type ID ( · params ) { statements }, LITSTRING
declstmt -> type ID ( · params ) { statements }, null
declstmt -> type ID ( · params ) { statements }, ++
declstmt -> type ID ( · params ) { statements }, --
declstmt -> type ID ( · params ) { statements }, break
declstmt -> type ID ( · params ) { statements }, return
declstmt -> type ID ( · params ) { statements }, delete
declstmt -> type ID ( · params ) { statements }, while
declstmt -> type ID ( · params ) { statements }, for
declstmt -> type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · own type ID, )
params -> · bor type ID, )
params -> · params , type ID, )
params -> · params , own type ID, )
params -> · params , bor type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
params -> ·, ,
params -> · type ID, ,
params -> · own type ID, ,
params -> · bor type ID, ,
params -> · params , type ID, ,
params -> · params , own type ID, ,
params -> · params , bor type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type ID ( · params ) { statements }, }
declstmt -> type ID ( · params ) { statements }, &&
declstmt -> type ID ( · params ) { statements }, ||
declstmt -> type ID ( · params ) { statements }, +
declstmt -> type ID ( · params ) { statements }, -
declstmt -> type ID ( · params ) { statements }, *
declstmt -> type ID ( · params ) { statements }, /
declstmt -> type ID ( · params ) { statements }, %
declstmt -> type ID ( · params ) { statements }, !
declstmt -> type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
171
I_438_667_845_1282_1371_1530_1585
***Set***
declstmt -> type ID = · expr ;, $
declstmt -> type ID = · expr ;, namespace
declstmt -> type ID = · expr ;, {
declstmt -> type ID = · expr ;, ID
declstmt -> type ID = · expr ;, void
declstmt -> type ID = · expr ;, bool
declstmt -> type ID = · expr ;, int
declstmt -> type ID = · expr ;, long
declstmt -> type ID = · expr ;, float
declstmt -> type ID = · expr ;, double
declstmt -> type ID = · expr ;, char
declstmt -> type ID = · expr ;, string
declstmt -> type ID = · expr ;, var
declstmt -> type ID = · expr ;, own
declstmt -> type ID = · expr ;, bor
declstmt -> type ID = · expr ;, const
declstmt -> type ID = · expr ;, extern
declstmt -> type ID = · expr ;, class
declstmt -> type ID = · expr ;, (
declstmt -> type ID = · expr ;, this
declstmt -> type ID = · expr ;, new
declstmt -> type ID = · expr ;, LITBOOL
declstmt -> type ID = · expr ;, LITINT
declstmt -> type ID = · expr ;, LITLONG
declstmt -> type ID = · expr ;, LITFLOAT
declstmt -> type ID = · expr ;, LITDOUBLE
declstmt -> type ID = · expr ;, LITCHAR
declstmt -> type ID = · expr ;, LITSTRING
declstmt -> type ID = · expr ;, null
declstmt -> type ID = · expr ;, ++
declstmt -> type ID = · expr ;, --
declstmt -> type ID = · expr ;, break
declstmt -> type ID = · expr ;, return
declstmt -> type ID = · expr ;, delete
declstmt -> type ID = · expr ;, while
declstmt -> type ID = · expr ;, for
declstmt -> type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> type ID = · expr ;, }
declstmt -> type ID = · expr ;, &&
declstmt -> type ID = · expr ;, ||
declstmt -> type ID = · expr ;, +
declstmt -> type ID = · expr ;, -
declstmt -> type ID = · expr ;, *
declstmt -> type ID = · expr ;, /
declstmt -> type ID = · expr ;, %
declstmt -> type ID = · expr ;, !
declstmt -> type ID = · expr ;, else
***EndSet***
***EndState***
***State***
172
I_439_452_460_774_776_867_1210_1260_1302_1309_1373_1380_1534_1541_1560
***Set***
primitiveBracket -> primitive [ optidx · ], ID
primitiveBracket -> primitive [ optidx · ], operator
primitiveBracket -> primitive [ optidx · ], .
primitiveBracket -> primitive [ optidx · ], ;
primitiveBracket -> primitive [ optidx · ], &&
primitiveBracket -> primitive [ optidx · ], ||
primitiveBracket -> primitive [ optidx · ], >
primitiveBracket -> primitive [ optidx · ], <
primitiveBracket -> primitive [ optidx · ], >=
primitiveBracket -> primitive [ optidx · ], <=
primitiveBracket -> primitive [ optidx · ], ==
primitiveBracket -> primitive [ optidx · ], !=
primitiveBracket -> primitive [ optidx · ], +
primitiveBracket -> primitive [ optidx · ], -
primitiveBracket -> primitive [ optidx · ], *
primitiveBracket -> primitive [ optidx · ], /
primitiveBracket -> primitive [ optidx · ], %
primitiveBracket -> primitive [ optidx · ], )
primitiveBracket -> primitive [ optidx · ], ,
primitiveBracket -> primitive [ optidx · ], ]
***EndSet***
***EndState***
***State***
173
I_440_542_644_777_869_1007_1028_1099_1108_1166_1175_1212_1426_1435_1459
***Set***
memberaccess -> primary . ID ·, (
memberaccess -> primary . ID ·, =
memberaccess -> primary . ID ·, +=
memberaccess -> primary . ID ·, -=
memberaccess -> primary . ID ·, *=
memberaccess -> primary . ID ·, /=
memberaccess -> primary . ID ·, %=
memberaccess -> primary . ID ·, [
memberaccess -> primary . ID ·, .
memberaccess -> primary . ID ·, ;
memberaccess -> primary . ID ·, &&
memberaccess -> primary . ID ·, ||
memberaccess -> primary . ID ·, >
memberaccess -> primary . ID ·, <
memberaccess -> primary . ID ·, >=
memberaccess -> primary . ID ·, <=
memberaccess -> primary . ID ·, ==
memberaccess -> primary . ID ·, !=
memberaccess -> primary . ID ·, +
memberaccess -> primary . ID ·, -
memberaccess -> primary . ID ·, *
memberaccess -> primary . ID ·, /
memberaccess -> primary . ID ·, %
memberaccess -> primary . ID ·, )
memberaccess -> primary . ID ·, ,
memberaccess -> primary . ID ·, ]
***EndSet***
***EndState***
***State***
174
I_441_645_1008
***Set***
assign -> lvalue = expr ·, ;
assign -> lvalue = expr ·, )
assign -> lvalue = expr ·, ,
***EndSet***
***EndState***
***State***
175
I_442_646_1009
***Set***
assign -> lvalue += expr ·, ;
assign -> lvalue += expr ·, )
assign -> lvalue += expr ·, ,
***EndSet***
***EndState***
***State***
176
I_443_647_1010
***Set***
assign -> lvalue -= expr ·, ;
assign -> lvalue -= expr ·, )
assign -> lvalue -= expr ·, ,
***EndSet***
***EndState***
***State***
177
I_444_648_1011
***Set***
assign -> lvalue *= expr ·, ;
assign -> lvalue *= expr ·, )
assign -> lvalue *= expr ·, ,
***EndSet***
***EndState***
***State***
178
I_445_649_1012
***Set***
assign -> lvalue /= expr ·, ;
assign -> lvalue /= expr ·, )
assign -> lvalue /= expr ·, ,
***EndSet***
***EndState***
***State***
179
I_446_650_1013
***Set***
assign -> lvalue %= expr ·, ;
assign -> lvalue %= expr ·, )
assign -> lvalue %= expr ·, ,
***EndSet***
***EndState***
***State***
180
I_447_543_651_1014_1029_1100_1109_1167_1176_1427_1436_1460_1492
***Set***
call -> memberaccess ( args · ), ;
call -> memberaccess ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> memberaccess ( args · ), &&
call -> memberaccess ( args · ), ||
call -> memberaccess ( args · ), >
call -> memberaccess ( args · ), <
call -> memberaccess ( args · ), >=
call -> memberaccess ( args · ), <=
call -> memberaccess ( args · ), ==
call -> memberaccess ( args · ), !=
call -> memberaccess ( args · ), +
call -> memberaccess ( args · ), -
call -> memberaccess ( args · ), *
call -> memberaccess ( args · ), /
call -> memberaccess ( args · ), %
call -> memberaccess ( args · ), )
call -> memberaccess ( args · ), ,
call -> memberaccess ( args · ), ]
***EndSet***
***EndState***
***State***
181
I_448_544_652_778_870_1015_1030_1101_1110_1168_1177_1213_1428_1437_1461
***Set***
indexaccess -> memberaccess [ aexpr · ], =
indexaccess -> memberaccess [ aexpr · ], +=
indexaccess -> memberaccess [ aexpr · ], -=
indexaccess -> memberaccess [ aexpr · ], *=
indexaccess -> memberaccess [ aexpr · ], /=
indexaccess -> memberaccess [ aexpr · ], %=
indexaccess -> memberaccess [ aexpr · ], .
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
indexaccess -> memberaccess [ aexpr · ], ;
indexaccess -> memberaccess [ aexpr · ], &&
indexaccess -> memberaccess [ aexpr · ], ||
indexaccess -> memberaccess [ aexpr · ], >
indexaccess -> memberaccess [ aexpr · ], <
indexaccess -> memberaccess [ aexpr · ], >=
indexaccess -> memberaccess [ aexpr · ], <=
indexaccess -> memberaccess [ aexpr · ], ==
indexaccess -> memberaccess [ aexpr · ], !=
indexaccess -> memberaccess [ aexpr · ], +
indexaccess -> memberaccess [ aexpr · ], -
indexaccess -> memberaccess [ aexpr · ], *
indexaccess -> memberaccess [ aexpr · ], /
indexaccess -> memberaccess [ aexpr · ], %
indexaccess -> memberaccess [ aexpr · ], )
indexaccess -> memberaccess [ aexpr · ], ,
indexaccess -> memberaccess [ aexpr · ], ]
***EndSet***
***EndState***
***State***
182
I_449_916_1111_1495_1606_1634
***Set***
namespaceblock -> namespace ID { statements · }, $
namespaceblock -> namespace ID { statements · }, namespace
namespaceblock -> namespace ID { statements · }, {
namespaceblock -> namespace ID { statements · }, ID
namespaceblock -> namespace ID { statements · }, void
namespaceblock -> namespace ID { statements · }, bool
namespaceblock -> namespace ID { statements · }, int
namespaceblock -> namespace ID { statements · }, long
namespaceblock -> namespace ID { statements · }, float
namespaceblock -> namespace ID { statements · }, double
namespaceblock -> namespace ID { statements · }, char
namespaceblock -> namespace ID { statements · }, string
namespaceblock -> namespace ID { statements · }, var
namespaceblock -> namespace ID { statements · }, own
namespaceblock -> namespace ID { statements · }, bor
namespaceblock -> namespace ID { statements · }, const
namespaceblock -> namespace ID { statements · }, extern
namespaceblock -> namespace ID { statements · }, class
namespaceblock -> namespace ID { statements · }, (
namespaceblock -> namespace ID { statements · }, this
namespaceblock -> namespace ID { statements · }, new
namespaceblock -> namespace ID { statements · }, LITBOOL
namespaceblock -> namespace ID { statements · }, LITINT
namespaceblock -> namespace ID { statements · }, LITLONG
namespaceblock -> namespace ID { statements · }, LITFLOAT
namespaceblock -> namespace ID { statements · }, LITDOUBLE
namespaceblock -> namespace ID { statements · }, LITCHAR
namespaceblock -> namespace ID { statements · }, LITSTRING
namespaceblock -> namespace ID { statements · }, null
namespaceblock -> namespace ID { statements · }, ++
namespaceblock -> namespace ID { statements · }, --
namespaceblock -> namespace ID { statements · }, break
namespaceblock -> namespace ID { statements · }, return
namespaceblock -> namespace ID { statements · }, delete
namespaceblock -> namespace ID { statements · }, while
namespaceblock -> namespace ID { statements · }, for
namespaceblock -> namespace ID { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { statements · }, }
namespaceblock -> namespace ID { statements · }, &&
namespaceblock -> namespace ID { statements · }, ||
namespaceblock -> namespace ID { statements · }, +
namespaceblock -> namespace ID { statements · }, -
namespaceblock -> namespace ID { statements · }, *
namespaceblock -> namespace ID { statements · }, /
namespaceblock -> namespace ID { statements · }, %
namespaceblock -> namespace ID { statements · }, !
namespaceblock -> namespace ID { statements · }, else
***EndSet***
***EndState***
***State***
183
I_451_917_1112_1444_1496_1607_1635
***Set***
declstmt -> extern type ID ( · params ) ;, $
declstmt -> extern type ID ( · params ) ;, namespace
declstmt -> extern type ID ( · params ) ;, {
declstmt -> extern type ID ( · params ) ;, ID
declstmt -> extern type ID ( · params ) ;, void
declstmt -> extern type ID ( · params ) ;, bool
declstmt -> extern type ID ( · params ) ;, int
declstmt -> extern type ID ( · params ) ;, long
declstmt -> extern type ID ( · params ) ;, float
declstmt -> extern type ID ( · params ) ;, double
declstmt -> extern type ID ( · params ) ;, char
declstmt -> extern type ID ( · params ) ;, string
declstmt -> extern type ID ( · params ) ;, var
declstmt -> extern type ID ( · params ) ;, own
declstmt -> extern type ID ( · params ) ;, bor
declstmt -> extern type ID ( · params ) ;, const
declstmt -> extern type ID ( · params ) ;, extern
declstmt -> extern type ID ( · params ) ;, class
declstmt -> extern type ID ( · params ) ;, (
declstmt -> extern type ID ( · params ) ;, this
declstmt -> extern type ID ( · params ) ;, new
declstmt -> extern type ID ( · params ) ;, LITBOOL
declstmt -> extern type ID ( · params ) ;, LITINT
declstmt -> extern type ID ( · params ) ;, LITLONG
declstmt -> extern type ID ( · params ) ;, LITFLOAT
declstmt -> extern type ID ( · params ) ;, LITDOUBLE
declstmt -> extern type ID ( · params ) ;, LITCHAR
declstmt -> extern type ID ( · params ) ;, LITSTRING
declstmt -> extern type ID ( · params ) ;, null
declstmt -> extern type ID ( · params ) ;, ++
declstmt -> extern type ID ( · params ) ;, --
declstmt -> extern type ID ( · params ) ;, break
declstmt -> extern type ID ( · params ) ;, return
declstmt -> extern type ID ( · params ) ;, delete
declstmt -> extern type ID ( · params ) ;, while
declstmt -> extern type ID ( · params ) ;, for
declstmt -> extern type ID ( · params ) ;, if
params -> ·, )
params -> · type ID, )
params -> · own type ID, )
params -> · bor type ID, )
params -> · params , type ID, )
params -> · params , own type ID, )
params -> · params , bor type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
params -> ·, ,
params -> · type ID, ,
params -> · own type ID, ,
params -> · bor type ID, ,
params -> · params , type ID, ,
params -> · params , own type ID, ,
params -> · params , bor type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern type ID ( · params ) ;, }
declstmt -> extern type ID ( · params ) ;, &&
declstmt -> extern type ID ( · params ) ;, ||
declstmt -> extern type ID ( · params ) ;, +
declstmt -> extern type ID ( · params ) ;, -
declstmt -> extern type ID ( · params ) ;, *
declstmt -> extern type ID ( · params ) ;, /
declstmt -> extern type ID ( · params ) ;, %
declstmt -> extern type ID ( · params ) ;, !
declstmt -> extern type ID ( · params ) ;, else
***EndSet***
***EndState***
***State***
184
I_453_918_1113_1445_1497_1608_1636
***Set***
declstmt -> const type ID = · lit ;, $
declstmt -> const type ID = · lit ;, namespace
declstmt -> const type ID = · lit ;, {
declstmt -> const type ID = · lit ;, ID
declstmt -> const type ID = · lit ;, void
declstmt -> const type ID = · lit ;, bool
declstmt -> const type ID = · lit ;, int
declstmt -> const type ID = · lit ;, long
declstmt -> const type ID = · lit ;, float
declstmt -> const type ID = · lit ;, double
declstmt -> const type ID = · lit ;, char
declstmt -> const type ID = · lit ;, string
declstmt -> const type ID = · lit ;, var
declstmt -> const type ID = · lit ;, own
declstmt -> const type ID = · lit ;, bor
declstmt -> const type ID = · lit ;, const
declstmt -> const type ID = · lit ;, extern
declstmt -> const type ID = · lit ;, class
declstmt -> const type ID = · lit ;, (
declstmt -> const type ID = · lit ;, this
declstmt -> const type ID = · lit ;, new
declstmt -> const type ID = · lit ;, LITBOOL
declstmt -> const type ID = · lit ;, LITINT
declstmt -> const type ID = · lit ;, LITLONG
declstmt -> const type ID = · lit ;, LITFLOAT
declstmt -> const type ID = · lit ;, LITDOUBLE
declstmt -> const type ID = · lit ;, LITCHAR
declstmt -> const type ID = · lit ;, LITSTRING
declstmt -> const type ID = · lit ;, null
declstmt -> const type ID = · lit ;, ++
declstmt -> const type ID = · lit ;, --
declstmt -> const type ID = · lit ;, break
declstmt -> const type ID = · lit ;, return
declstmt -> const type ID = · lit ;, delete
declstmt -> const type ID = · lit ;, while
declstmt -> const type ID = · lit ;, for
declstmt -> const type ID = · lit ;, if
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
declstmt -> const type ID = · lit ;, }
declstmt -> const type ID = · lit ;, &&
declstmt -> const type ID = · lit ;, ||
declstmt -> const type ID = · lit ;, +
declstmt -> const type ID = · lit ;, -
declstmt -> const type ID = · lit ;, *
declstmt -> const type ID = · lit ;, /
declstmt -> const type ID = · lit ;, %
declstmt -> const type ID = · lit ;, !
declstmt -> const type ID = · lit ;, else
***EndSet***
***EndState***
***State***
185
I_454_919_1114_1446_1498_1609_1637
***Set***
declstmt -> own type ID = · expr ;, $
declstmt -> own type ID = · expr ;, namespace
declstmt -> own type ID = · expr ;, {
declstmt -> own type ID = · expr ;, ID
declstmt -> own type ID = · expr ;, void
declstmt -> own type ID = · expr ;, bool
declstmt -> own type ID = · expr ;, int
declstmt -> own type ID = · expr ;, long
declstmt -> own type ID = · expr ;, float
declstmt -> own type ID = · expr ;, double
declstmt -> own type ID = · expr ;, char
declstmt -> own type ID = · expr ;, string
declstmt -> own type ID = · expr ;, var
declstmt -> own type ID = · expr ;, own
declstmt -> own type ID = · expr ;, bor
declstmt -> own type ID = · expr ;, const
declstmt -> own type ID = · expr ;, extern
declstmt -> own type ID = · expr ;, class
declstmt -> own type ID = · expr ;, (
declstmt -> own type ID = · expr ;, this
declstmt -> own type ID = · expr ;, new
declstmt -> own type ID = · expr ;, LITBOOL
declstmt -> own type ID = · expr ;, LITINT
declstmt -> own type ID = · expr ;, LITLONG
declstmt -> own type ID = · expr ;, LITFLOAT
declstmt -> own type ID = · expr ;, LITDOUBLE
declstmt -> own type ID = · expr ;, LITCHAR
declstmt -> own type ID = · expr ;, LITSTRING
declstmt -> own type ID = · expr ;, null
declstmt -> own type ID = · expr ;, ++
declstmt -> own type ID = · expr ;, --
declstmt -> own type ID = · expr ;, break
declstmt -> own type ID = · expr ;, return
declstmt -> own type ID = · expr ;, delete
declstmt -> own type ID = · expr ;, while
declstmt -> own type ID = · expr ;, for
declstmt -> own type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> own type ID = · expr ;, }
declstmt -> own type ID = · expr ;, &&
declstmt -> own type ID = · expr ;, ||
declstmt -> own type ID = · expr ;, +
declstmt -> own type ID = · expr ;, -
declstmt -> own type ID = · expr ;, *
declstmt -> own type ID = · expr ;, /
declstmt -> own type ID = · expr ;, %
declstmt -> own type ID = · expr ;, !
declstmt -> own type ID = · expr ;, else
***EndSet***
***EndState***
***State***
186
I_455_920_1115_1447_1499_1610_1638
***Set***
declstmt -> bor type ID = · expr ;, $
declstmt -> bor type ID = · expr ;, namespace
declstmt -> bor type ID = · expr ;, {
declstmt -> bor type ID = · expr ;, ID
declstmt -> bor type ID = · expr ;, void
declstmt -> bor type ID = · expr ;, bool
declstmt -> bor type ID = · expr ;, int
declstmt -> bor type ID = · expr ;, long
declstmt -> bor type ID = · expr ;, float
declstmt -> bor type ID = · expr ;, double
declstmt -> bor type ID = · expr ;, char
declstmt -> bor type ID = · expr ;, string
declstmt -> bor type ID = · expr ;, var
declstmt -> bor type ID = · expr ;, own
declstmt -> bor type ID = · expr ;, bor
declstmt -> bor type ID = · expr ;, const
declstmt -> bor type ID = · expr ;, extern
declstmt -> bor type ID = · expr ;, class
declstmt -> bor type ID = · expr ;, (
declstmt -> bor type ID = · expr ;, this
declstmt -> bor type ID = · expr ;, new
declstmt -> bor type ID = · expr ;, LITBOOL
declstmt -> bor type ID = · expr ;, LITINT
declstmt -> bor type ID = · expr ;, LITLONG
declstmt -> bor type ID = · expr ;, LITFLOAT
declstmt -> bor type ID = · expr ;, LITDOUBLE
declstmt -> bor type ID = · expr ;, LITCHAR
declstmt -> bor type ID = · expr ;, LITSTRING
declstmt -> bor type ID = · expr ;, null
declstmt -> bor type ID = · expr ;, ++
declstmt -> bor type ID = · expr ;, --
declstmt -> bor type ID = · expr ;, break
declstmt -> bor type ID = · expr ;, return
declstmt -> bor type ID = · expr ;, delete
declstmt -> bor type ID = · expr ;, while
declstmt -> bor type ID = · expr ;, for
declstmt -> bor type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> bor type ID = · expr ;, }
declstmt -> bor type ID = · expr ;, &&
declstmt -> bor type ID = · expr ;, ||
declstmt -> bor type ID = · expr ;, +
declstmt -> bor type ID = · expr ;, -
declstmt -> bor type ID = · expr ;, *
declstmt -> bor type ID = · expr ;, /
declstmt -> bor type ID = · expr ;, %
declstmt -> bor type ID = · expr ;, !
declstmt -> bor type ID = · expr ;, else
***EndSet***
***EndState***
***State***
187
I_456
***Set***
inherit -> : ID ·, {
***EndSet***
***EndState***
***State***
188
I_457_921_1116_1448_1500_1611_1639
***Set***
declstmt -> class ID inherit { · declstatements }, $
declstmt -> class ID inherit { · declstatements }, namespace
declstmt -> class ID inherit { · declstatements }, {
declstmt -> class ID inherit { · declstatements }, ID
declstmt -> class ID inherit { · declstatements }, void
declstmt -> class ID inherit { · declstatements }, bool
declstmt -> class ID inherit { · declstatements }, int
declstmt -> class ID inherit { · declstatements }, long
declstmt -> class ID inherit { · declstatements }, float
declstmt -> class ID inherit { · declstatements }, double
declstmt -> class ID inherit { · declstatements }, char
declstmt -> class ID inherit { · declstatements }, string
declstmt -> class ID inherit { · declstatements }, var
declstmt -> class ID inherit { · declstatements }, own
declstmt -> class ID inherit { · declstatements }, bor
declstmt -> class ID inherit { · declstatements }, const
declstmt -> class ID inherit { · declstatements }, extern
declstmt -> class ID inherit { · declstatements }, class
declstmt -> class ID inherit { · declstatements }, (
declstmt -> class ID inherit { · declstatements }, this
declstmt -> class ID inherit { · declstatements }, new
declstmt -> class ID inherit { · declstatements }, LITBOOL
declstmt -> class ID inherit { · declstatements }, LITINT
declstmt -> class ID inherit { · declstatements }, LITLONG
declstmt -> class ID inherit { · declstatements }, LITFLOAT
declstmt -> class ID inherit { · declstatements }, LITDOUBLE
declstmt -> class ID inherit { · declstatements }, LITCHAR
declstmt -> class ID inherit { · declstatements }, LITSTRING
declstmt -> class ID inherit { · declstatements }, null
declstmt -> class ID inherit { · declstatements }, ++
declstmt -> class ID inherit { · declstatements }, --
declstmt -> class ID inherit { · declstatements }, break
declstmt -> class ID inherit { · declstatements }, return
declstmt -> class ID inherit { · declstatements }, delete
declstmt -> class ID inherit { · declstatements }, while
declstmt -> class ID inherit { · declstatements }, for
declstmt -> class ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, long
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, double
declstatements -> · declstatements declstmt, char
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, var
declstatements -> · declstatements declstmt, own
declstatements -> · declstatements declstmt, bor
declstatements -> · declstatements declstmt, const
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, long
declstatements -> · declstmt, float
declstatements -> · declstmt, double
declstatements -> · declstmt, char
declstatements -> · declstmt, string
declstatements -> · declstmt, var
declstatements -> · declstmt, own
declstatements -> · declstmt, bor
declstatements -> · declstmt, const
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, long
declstatements -> ·, float
declstatements -> ·, double
declstatements -> ·, char
declstatements -> ·, string
declstatements -> ·, var
declstatements -> ·, own
declstatements -> ·, bor
declstatements -> ·, const
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { · declstatements }, }
declstmt -> class ID inherit { · declstatements }, &&
declstmt -> class ID inherit { · declstatements }, ||
declstmt -> class ID inherit { · declstatements }, +
declstmt -> class ID inherit { · declstatements }, -
declstmt -> class ID inherit { · declstatements }, *
declstmt -> class ID inherit { · declstatements }, /
declstmt -> class ID inherit { · declstatements }, %
declstmt -> class ID inherit { · declstatements }, !
declstmt -> class ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
189
I_458_772_865_1208_1259_1301_1308_1372_1379_1533_1540_1559_1586
***Set***
newobj -> new ID ( ) ·, ;
newobj -> new ID ( ) ·, .
newobj -> new ID ( ) ·, &&
newobj -> new ID ( ) ·, ||
newobj -> new ID ( ) ·, >
newobj -> new ID ( ) ·, <
newobj -> new ID ( ) ·, >=
newobj -> new ID ( ) ·, <=
newobj -> new ID ( ) ·, ==
newobj -> new ID ( ) ·, !=
newobj -> new ID ( ) ·, +
newobj -> new ID ( ) ·, -
newobj -> new ID ( ) ·, *
newobj -> new ID ( ) ·, /
newobj -> new ID ( ) ·, %
newobj -> new ID ( ) ·, )
newobj -> new ID ( ) ·, ,
newobj -> new ID ( ) ·, ]
***EndSet***
***EndState***
***State***
190
I_464_568_931_1019_1090_1104_1157_1171_1417_1431_1455
***Set***
cast -> ( type ) · factor, ;
cast -> ( type ) · factor, &&
cast -> ( type ) · factor, ||
cast -> ( type ) · factor, >
cast -> ( type ) · factor, <
cast -> ( type ) · factor, >=
cast -> ( type ) · factor, <=
cast -> ( type ) · factor, ==
cast -> ( type ) · factor, !=
cast -> ( type ) · factor, +
cast -> ( type ) · factor, -
cast -> ( type ) · factor, *
cast -> ( type ) · factor, /
cast -> ( type ) · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITLONG, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
cast -> ( type ) · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
cast -> ( type ) · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
cast -> ( type ) · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITLONG, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
191
I_471_574_937
***Set***
bexpr -> bexpr || bexpr ·, ;
bexpr -> bexpr || bexpr ·, &&
bexpr -> bexpr || bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr || bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr || bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
192
I_472_575_938
***Set***
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
***EndSet***
***EndState***
***State***
193
I_475_577_940
***Set***
bexpr -> bexpr && bexpr ·, ;
bexpr -> bexpr && bexpr ·, &&
bexpr -> bexpr && bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr && bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr && bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
194
I_497_599_962
***Set***
bexpr -> aexpr == aexpr ·, ;
bexpr -> aexpr == aexpr ·, &&
bexpr -> aexpr == aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr == aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr == aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
195
I_505_607_970
***Set***
bexpr -> aexpr != aexpr ·, ;
bexpr -> aexpr != aexpr ·, &&
bexpr -> aexpr != aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr != aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr != aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
196
I_506_608_971
***Set***
bexpr -> aexpr <= aexpr ·, ;
bexpr -> aexpr <= aexpr ·, &&
bexpr -> aexpr <= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr <= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr <= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
197
I_507_609_972
***Set***
bexpr -> aexpr >= aexpr ·, ;
bexpr -> aexpr >= aexpr ·, &&
bexpr -> aexpr >= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr >= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr >= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
198
I_508_610_973
***Set***
bexpr -> aexpr > aexpr ·, ;
bexpr -> aexpr > aexpr ·, &&
bexpr -> aexpr > aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr > aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr > aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
199
I_509_611_974
***Set***
bexpr -> aexpr < aexpr ·, ;
bexpr -> aexpr < aexpr ·, &&
bexpr -> aexpr < aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr < aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr < aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
200
I_531_633_996_1023_1077_1094_1161_1421
***Set***
aexpr -> aexpr + term ·, ;
aexpr -> aexpr + term ·, >
aexpr -> aexpr + term ·, <
aexpr -> aexpr + term ·, >=
aexpr -> aexpr + term ·, <=
aexpr -> aexpr + term ·, ==
aexpr -> aexpr + term ·, !=
aexpr -> aexpr + term ·, +
aexpr -> aexpr + term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr + term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr + term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr + term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr + term ·, &&
aexpr -> aexpr + term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
201
I_538_640_1003_1024_1084_1095_1162_1422
***Set***
aexpr -> aexpr - term ·, ;
aexpr -> aexpr - term ·, >
aexpr -> aexpr - term ·, <
aexpr -> aexpr - term ·, >=
aexpr -> aexpr - term ·, <=
aexpr -> aexpr - term ·, ==
aexpr -> aexpr - term ·, !=
aexpr -> aexpr - term ·, +
aexpr -> aexpr - term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr - term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr - term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr - term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr - term ·, &&
aexpr -> aexpr - term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
202
I_539_641_1004_1025_1085_1096_1163_1423
***Set***
term -> term * factor ·, ;
term -> term * factor ·, >
term -> term * factor ·, <
term -> term * factor ·, >=
term -> term * factor ·, <=
term -> term * factor ·, ==
term -> term * factor ·, !=
term -> term * factor ·, +
term -> term * factor ·, -
term -> term * factor ·, *
term -> term * factor ·, /
term -> term * factor ·, %
term -> term * factor ·, )
term -> term * factor ·, ,
term -> term * factor ·, ]
term -> term * factor ·, &&
term -> term * factor ·, ||
***EndSet***
***EndState***
***State***
203
I_540_642_1005_1026_1086_1097_1164_1424
***Set***
term -> term / factor ·, ;
term -> term / factor ·, >
term -> term / factor ·, <
term -> term / factor ·, >=
term -> term / factor ·, <=
term -> term / factor ·, ==
term -> term / factor ·, !=
term -> term / factor ·, +
term -> term / factor ·, -
term -> term / factor ·, *
term -> term / factor ·, /
term -> term / factor ·, %
term -> term / factor ·, )
term -> term / factor ·, ,
term -> term / factor ·, ]
term -> term / factor ·, &&
term -> term / factor ·, ||
***EndSet***
***EndState***
***State***
204
I_541_643_1006_1027_1087_1098_1165_1425
***Set***
term -> term % factor ·, ;
term -> term % factor ·, >
term -> term % factor ·, <
term -> term % factor ·, >=
term -> term % factor ·, <=
term -> term % factor ·, ==
term -> term % factor ·, !=
term -> term % factor ·, +
term -> term % factor ·, -
term -> term % factor ·, *
term -> term % factor ·, /
term -> term % factor ·, %
term -> term % factor ·, )
term -> term % factor ·, ,
term -> term % factor ·, ]
term -> term % factor ·, &&
term -> term % factor ·, ||
***EndSet***
***EndState***
***State***
205
I_545_922_1117_1501_1612_1640
***Set***
stmt -> while ( expr ) · stmt, $
stmt -> while ( expr ) · stmt, namespace
stmt -> while ( expr ) · stmt, {
stmt -> while ( expr ) · stmt, ID
stmt -> while ( expr ) · stmt, void
stmt -> while ( expr ) · stmt, bool
stmt -> while ( expr ) · stmt, int
stmt -> while ( expr ) · stmt, long
stmt -> while ( expr ) · stmt, float
stmt -> while ( expr ) · stmt, double
stmt -> while ( expr ) · stmt, char
stmt -> while ( expr ) · stmt, string
stmt -> while ( expr ) · stmt, var
stmt -> while ( expr ) · stmt, own
stmt -> while ( expr ) · stmt, bor
stmt -> while ( expr ) · stmt, const
stmt -> while ( expr ) · stmt, extern
stmt -> while ( expr ) · stmt, class
stmt -> while ( expr ) · stmt, (
stmt -> while ( expr ) · stmt, this
stmt -> while ( expr ) · stmt, new
stmt -> while ( expr ) · stmt, LITBOOL
stmt -> while ( expr ) · stmt, LITINT
stmt -> while ( expr ) · stmt, LITLONG
stmt -> while ( expr ) · stmt, LITFLOAT
stmt -> while ( expr ) · stmt, LITDOUBLE
stmt -> while ( expr ) · stmt, LITCHAR
stmt -> while ( expr ) · stmt, LITSTRING
stmt -> while ( expr ) · stmt, null
stmt -> while ( expr ) · stmt, ++
stmt -> while ( expr ) · stmt, --
stmt -> while ( expr ) · stmt, break
stmt -> while ( expr ) · stmt, return
stmt -> while ( expr ) · stmt, delete
stmt -> while ( expr ) · stmt, while
stmt -> while ( expr ) · stmt, for
stmt -> while ( expr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> while ( expr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> while ( expr ) · stmt, &&
stmt -> while ( expr ) · stmt, ||
stmt -> while ( expr ) · stmt, +
stmt -> while ( expr ) · stmt, -
stmt -> while ( expr ) · stmt, *
stmt -> while ( expr ) · stmt, /
stmt -> while ( expr ) · stmt, %
stmt -> while ( expr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> while ( expr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · own type ID = expr ;, else
declstmt -> · bor type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
206
I_560_923_1118_1502_1613_1641
***Set***
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, $
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, {
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, void
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, int
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, long
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, float
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, double
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, char
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, string
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, var
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, own
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bor
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, const
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, class
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, (
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, this
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, new
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITLONG
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, null
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, --
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, break
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, return
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, while
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, for
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, if
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, }
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, +
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, -
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, *
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, /
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, %
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, !
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
207
I_564_924_1119_1503_1614_1642
***Set***
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, long
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, var
stmt -> if ( expr ) · stmt elifclauselist elseclause, own
stmt -> if ( expr ) · stmt elifclauselist elseclause, bor
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · namespaceblock, $
stmt -> · statementblock, else
stmt -> · statementblock, $
stmt -> · declstmt, else
stmt -> · declstmt, $
stmt -> · stmtexpr ;, else
stmt -> · stmtexpr ;, $
stmt -> · break ;, else
stmt -> · break ;, $
stmt -> · return expr ;, else
stmt -> · return expr ;, $
stmt -> · return ;, else
stmt -> · return ;, $
stmt -> · delete expr ;, else
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, else
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, else
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, else
declstmt -> · own type ID = expr ;, else
declstmt -> · bor type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
208
I_710
***Set***
args -> args , · expr, )
args -> args , · expr, ,
expr -> · assign, )
expr -> · nexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITLONG, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
209
I_711_779_871_1214_1262_1304_1311_1375_1382_1536_1543_1562_1587
***Set***
call -> ID ( args ) ·, ;
call -> ID ( args ) ·, .
call -> ID ( args ) ·, &&
call -> ID ( args ) ·, ||
call -> ID ( args ) ·, >
call -> ID ( args ) ·, <
call -> ID ( args ) ·, >=
call -> ID ( args ) ·, <=
call -> ID ( args ) ·, ==
call -> ID ( args ) ·, !=
call -> ID ( args ) ·, +
call -> ID ( args ) ·, -
call -> ID ( args ) ·, *
call -> ID ( args ) ·, /
call -> ID ( args ) ·, %
call -> ID ( args ) ·, )
call -> ID ( args ) ·, ,
call -> ID ( args ) ·, ]
***EndSet***
***EndState***
***State***
210
I_735_746_770_780_872_1052_1152_1215_1263_1305_1312_1376_1383_1412_1449_1537_1544_1563_1588
***Set***
idBracket -> ID [ optidx ] ·, ID
idBracket -> ID [ optidx ] ·, operator
idBracket -> ID [ optidx ] ·, =
idBracket -> ID [ optidx ] ·, +=
idBracket -> ID [ optidx ] ·, -=
idBracket -> ID [ optidx ] ·, *=
idBracket -> ID [ optidx ] ·, /=
idBracket -> ID [ optidx ] ·, %=
idBracket -> ID [ optidx ] ·, .
idBracket -> ID [ optidx ] ·, ;
idBracket -> ID [ optidx ] ·, &&
idBracket -> ID [ optidx ] ·, ||
idBracket -> ID [ optidx ] ·, >
idBracket -> ID [ optidx ] ·, <
idBracket -> ID [ optidx ] ·, >=
idBracket -> ID [ optidx ] ·, <=
idBracket -> ID [ optidx ] ·, ==
idBracket -> ID [ optidx ] ·, !=
idBracket -> ID [ optidx ] ·, +
idBracket -> ID [ optidx ] ·, -
idBracket -> ID [ optidx ] ·, *
idBracket -> ID [ optidx ] ·, /
idBracket -> ID [ optidx ] ·, %
idBracket -> ID [ optidx ] ·, )
idBracket -> ID [ optidx ] ·, ,
idBracket -> ID [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
211
I_736_925_1131_1450_1506_1617_1645
***Set***
declstmt -> type operator ID ( · params ) { statements }, $
declstmt -> type operator ID ( · params ) { statements }, namespace
declstmt -> type operator ID ( · params ) { statements }, {
declstmt -> type operator ID ( · params ) { statements }, ID
declstmt -> type operator ID ( · params ) { statements }, void
declstmt -> type operator ID ( · params ) { statements }, bool
declstmt -> type operator ID ( · params ) { statements }, int
declstmt -> type operator ID ( · params ) { statements }, long
declstmt -> type operator ID ( · params ) { statements }, float
declstmt -> type operator ID ( · params ) { statements }, double
declstmt -> type operator ID ( · params ) { statements }, char
declstmt -> type operator ID ( · params ) { statements }, string
declstmt -> type operator ID ( · params ) { statements }, var
declstmt -> type operator ID ( · params ) { statements }, own
declstmt -> type operator ID ( · params ) { statements }, bor
declstmt -> type operator ID ( · params ) { statements }, const
declstmt -> type operator ID ( · params ) { statements }, extern
declstmt -> type operator ID ( · params ) { statements }, class
declstmt -> type operator ID ( · params ) { statements }, (
declstmt -> type operator ID ( · params ) { statements }, this
declstmt -> type operator ID ( · params ) { statements }, new
declstmt -> type operator ID ( · params ) { statements }, LITBOOL
declstmt -> type operator ID ( · params ) { statements }, LITINT
declstmt -> type operator ID ( · params ) { statements }, LITLONG
declstmt -> type operator ID ( · params ) { statements }, LITFLOAT
declstmt -> type operator ID ( · params ) { statements }, LITDOUBLE
declstmt -> type operator ID ( · params ) { statements }, LITCHAR
declstmt -> type operator ID ( · params ) { statements }, LITSTRING
declstmt -> type operator ID ( · params ) { statements }, null
declstmt -> type operator ID ( · params ) { statements }, ++
declstmt -> type operator ID ( · params ) { statements }, --
declstmt -> type operator ID ( · params ) { statements }, break
declstmt -> type operator ID ( · params ) { statements }, return
declstmt -> type operator ID ( · params ) { statements }, delete
declstmt -> type operator ID ( · params ) { statements }, while
declstmt -> type operator ID ( · params ) { statements }, for
declstmt -> type operator ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · own type ID, )
params -> · bor type ID, )
params -> · params , type ID, )
params -> · params , own type ID, )
params -> · params , bor type ID, )
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
params -> ·, ,
params -> · type ID, ,
params -> · own type ID, ,
params -> · bor type ID, ,
params -> · params , type ID, ,
params -> · params , own type ID, ,
params -> · params , bor type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type operator ID ( · params ) { statements }, }
declstmt -> type operator ID ( · params ) { statements }, &&
declstmt -> type operator ID ( · params ) { statements }, ||
declstmt -> type operator ID ( · params ) { statements }, +
declstmt -> type operator ID ( · params ) { statements }, -
declstmt -> type operator ID ( · params ) { statements }, *
declstmt -> type operator ID ( · params ) { statements }, /
declstmt -> type operator ID ( · params ) { statements }, %
declstmt -> type operator ID ( · params ) { statements }, !
declstmt -> type operator ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
212
I_737
***Set***
params -> own · type ID, )
params -> own · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
213
I_738
***Set***
params -> bor · type ID, )
params -> bor · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
214
I_739
***Set***
params -> type · ID, )
params -> type · ID, ,
***EndSet***
***EndState***
***State***
215
I_740_926_1132_1451_1507_1618_1646
***Set***
declstmt -> type ID ( params · ) { statements }, $
declstmt -> type ID ( params · ) { statements }, namespace
declstmt -> type ID ( params · ) { statements }, {
declstmt -> type ID ( params · ) { statements }, ID
declstmt -> type ID ( params · ) { statements }, void
declstmt -> type ID ( params · ) { statements }, bool
declstmt -> type ID ( params · ) { statements }, int
declstmt -> type ID ( params · ) { statements }, long
declstmt -> type ID ( params · ) { statements }, float
declstmt -> type ID ( params · ) { statements }, double
declstmt -> type ID ( params · ) { statements }, char
declstmt -> type ID ( params · ) { statements }, string
declstmt -> type ID ( params · ) { statements }, var
declstmt -> type ID ( params · ) { statements }, own
declstmt -> type ID ( params · ) { statements }, bor
declstmt -> type ID ( params · ) { statements }, const
declstmt -> type ID ( params · ) { statements }, extern
declstmt -> type ID ( params · ) { statements }, class
declstmt -> type ID ( params · ) { statements }, (
declstmt -> type ID ( params · ) { statements }, this
declstmt -> type ID ( params · ) { statements }, new
declstmt -> type ID ( params · ) { statements }, LITBOOL
declstmt -> type ID ( params · ) { statements }, LITINT
declstmt -> type ID ( params · ) { statements }, LITLONG
declstmt -> type ID ( params · ) { statements }, LITFLOAT
declstmt -> type ID ( params · ) { statements }, LITDOUBLE
declstmt -> type ID ( params · ) { statements }, LITCHAR
declstmt -> type ID ( params · ) { statements }, LITSTRING
declstmt -> type ID ( params · ) { statements }, null
declstmt -> type ID ( params · ) { statements }, ++
declstmt -> type ID ( params · ) { statements }, --
declstmt -> type ID ( params · ) { statements }, break
declstmt -> type ID ( params · ) { statements }, return
declstmt -> type ID ( params · ) { statements }, delete
declstmt -> type ID ( params · ) { statements }, while
declstmt -> type ID ( params · ) { statements }, for
declstmt -> type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , own type ID, )
params -> params · , bor type ID, )
params -> params · , type ID, ,
params -> params · , own type ID, ,
params -> params · , bor type ID, ,
declstmt -> type ID ( params · ) { statements }, }
declstmt -> type ID ( params · ) { statements }, &&
declstmt -> type ID ( params · ) { statements }, ||
declstmt -> type ID ( params · ) { statements }, +
declstmt -> type ID ( params · ) { statements }, -
declstmt -> type ID ( params · ) { statements }, *
declstmt -> type ID ( params · ) { statements }, /
declstmt -> type ID ( params · ) { statements }, %
declstmt -> type ID ( params · ) { statements }, !
declstmt -> type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
216
I_741_927_1133_1452_1508_1619_1647
***Set***
declstmt -> type ID = expr · ;, $
declstmt -> type ID = expr · ;, namespace
declstmt -> type ID = expr · ;, {
declstmt -> type ID = expr · ;, ID
declstmt -> type ID = expr · ;, void
declstmt -> type ID = expr · ;, bool
declstmt -> type ID = expr · ;, int
declstmt -> type ID = expr · ;, long
declstmt -> type ID = expr · ;, float
declstmt -> type ID = expr · ;, double
declstmt -> type ID = expr · ;, char
declstmt -> type ID = expr · ;, string
declstmt -> type ID = expr · ;, var
declstmt -> type ID = expr · ;, own
declstmt -> type ID = expr · ;, bor
declstmt -> type ID = expr · ;, const
declstmt -> type ID = expr · ;, extern
declstmt -> type ID = expr · ;, class
declstmt -> type ID = expr · ;, (
declstmt -> type ID = expr · ;, this
declstmt -> type ID = expr · ;, new
declstmt -> type ID = expr · ;, LITBOOL
declstmt -> type ID = expr · ;, LITINT
declstmt -> type ID = expr · ;, LITLONG
declstmt -> type ID = expr · ;, LITFLOAT
declstmt -> type ID = expr · ;, LITDOUBLE
declstmt -> type ID = expr · ;, LITCHAR
declstmt -> type ID = expr · ;, LITSTRING
declstmt -> type ID = expr · ;, null
declstmt -> type ID = expr · ;, ++
declstmt -> type ID = expr · ;, --
declstmt -> type ID = expr · ;, break
declstmt -> type ID = expr · ;, return
declstmt -> type ID = expr · ;, delete
declstmt -> type ID = expr · ;, while
declstmt -> type ID = expr · ;, for
declstmt -> type ID = expr · ;, if
declstmt -> type ID = expr · ;, }
declstmt -> type ID = expr · ;, &&
declstmt -> type ID = expr · ;, ||
declstmt -> type ID = expr · ;, +
declstmt -> type ID = expr · ;, -
declstmt -> type ID = expr · ;, *
declstmt -> type ID = expr · ;, /
declstmt -> type ID = expr · ;, %
declstmt -> type ID = expr · ;, !
declstmt -> type ID = expr · ;, else
***EndSet***
***EndState***
***State***
217
I_742_748_771_1053_1054_1153_1413_1438_1462_1463_1509_1510_1622_1623_1632
***Set***
primitiveBracket -> primitive [ optidx ] ·, ID
primitiveBracket -> primitive [ optidx ] ·, operator
primitiveBracket -> primitive [ optidx ] ·, .
primitiveBracket -> primitive [ optidx ] ·, ;
primitiveBracket -> primitive [ optidx ] ·, &&
primitiveBracket -> primitive [ optidx ] ·, ||
primitiveBracket -> primitive [ optidx ] ·, >
primitiveBracket -> primitive [ optidx ] ·, <
primitiveBracket -> primitive [ optidx ] ·, >=
primitiveBracket -> primitive [ optidx ] ·, <=
primitiveBracket -> primitive [ optidx ] ·, ==
primitiveBracket -> primitive [ optidx ] ·, !=
primitiveBracket -> primitive [ optidx ] ·, +
primitiveBracket -> primitive [ optidx ] ·, -
primitiveBracket -> primitive [ optidx ] ·, *
primitiveBracket -> primitive [ optidx ] ·, /
primitiveBracket -> primitive [ optidx ] ·, %
primitiveBracket -> primitive [ optidx ] ·, )
primitiveBracket -> primitive [ optidx ] ·, ,
primitiveBracket -> primitive [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
218
I_743_827_914_1257_1264_1306_1313_1377_1384_1538_1545_1564_1589
***Set***
call -> memberaccess ( args ) ·, ;
call -> memberaccess ( args ) ·, .
call -> memberaccess ( args ) ·, &&
call -> memberaccess ( args ) ·, ||
call -> memberaccess ( args ) ·, >
call -> memberaccess ( args ) ·, <
call -> memberaccess ( args ) ·, >=
call -> memberaccess ( args ) ·, <=
call -> memberaccess ( args ) ·, ==
call -> memberaccess ( args ) ·, !=
call -> memberaccess ( args ) ·, +
call -> memberaccess ( args ) ·, -
call -> memberaccess ( args ) ·, *
call -> memberaccess ( args ) ·, /
call -> memberaccess ( args ) ·, %
call -> memberaccess ( args ) ·, )
call -> memberaccess ( args ) ·, ,
call -> memberaccess ( args ) ·, ]
***EndSet***
***EndState***
***State***
219
I_744_828_915_1055_1154_1258_1265_1307_1314_1378_1385_1414_1539_1546_1565
***Set***
indexaccess -> memberaccess [ aexpr ] ·, =
indexaccess -> memberaccess [ aexpr ] ·, +=
indexaccess -> memberaccess [ aexpr ] ·, -=
indexaccess -> memberaccess [ aexpr ] ·, *=
indexaccess -> memberaccess [ aexpr ] ·, /=
indexaccess -> memberaccess [ aexpr ] ·, %=
indexaccess -> memberaccess [ aexpr ] ·, .
indexaccess -> memberaccess [ aexpr ] ·, ;
indexaccess -> memberaccess [ aexpr ] ·, &&
indexaccess -> memberaccess [ aexpr ] ·, ||
indexaccess -> memberaccess [ aexpr ] ·, >
indexaccess -> memberaccess [ aexpr ] ·, <
indexaccess -> memberaccess [ aexpr ] ·, >=
indexaccess -> memberaccess [ aexpr ] ·, <=
indexaccess -> memberaccess [ aexpr ] ·, ==
indexaccess -> memberaccess [ aexpr ] ·, !=
indexaccess -> memberaccess [ aexpr ] ·, +
indexaccess -> memberaccess [ aexpr ] ·, -
indexaccess -> memberaccess [ aexpr ] ·, *
indexaccess -> memberaccess [ aexpr ] ·, /
indexaccess -> memberaccess [ aexpr ] ·, %
indexaccess -> memberaccess [ aexpr ] ·, )
indexaccess -> memberaccess [ aexpr ] ·, ,
indexaccess -> memberaccess [ aexpr ] ·, ]
***EndSet***
***EndState***
***State***
220
I_745_1178_1315_1592_1660_1677
***Set***
namespaceblock -> namespace ID { statements } ·, $
namespaceblock -> namespace ID { statements } ·, namespace
namespaceblock -> namespace ID { statements } ·, {
namespaceblock -> namespace ID { statements } ·, ID
namespaceblock -> namespace ID { statements } ·, void
namespaceblock -> namespace ID { statements } ·, bool
namespaceblock -> namespace ID { statements } ·, int
namespaceblock -> namespace ID { statements } ·, long
namespaceblock -> namespace ID { statements } ·, float
namespaceblock -> namespace ID { statements } ·, double
namespaceblock -> namespace ID { statements } ·, char
namespaceblock -> namespace ID { statements } ·, string
namespaceblock -> namespace ID { statements } ·, var
namespaceblock -> namespace ID { statements } ·, own
namespaceblock -> namespace ID { statements } ·, bor
namespaceblock -> namespace ID { statements } ·, const
namespaceblock -> namespace ID { statements } ·, extern
namespaceblock -> namespace ID { statements } ·, class
namespaceblock -> namespace ID { statements } ·, (
namespaceblock -> namespace ID { statements } ·, this
namespaceblock -> namespace ID { statements } ·, new
namespaceblock -> namespace ID { statements } ·, LITBOOL
namespaceblock -> namespace ID { statements } ·, LITINT
namespaceblock -> namespace ID { statements } ·, LITLONG
namespaceblock -> namespace ID { statements } ·, LITFLOAT
namespaceblock -> namespace ID { statements } ·, LITDOUBLE
namespaceblock -> namespace ID { statements } ·, LITCHAR
namespaceblock -> namespace ID { statements } ·, LITSTRING
namespaceblock -> namespace ID { statements } ·, null
namespaceblock -> namespace ID { statements } ·, ++
namespaceblock -> namespace ID { statements } ·, --
namespaceblock -> namespace ID { statements } ·, break
namespaceblock -> namespace ID { statements } ·, return
namespaceblock -> namespace ID { statements } ·, delete
namespaceblock -> namespace ID { statements } ·, while
namespaceblock -> namespace ID { statements } ·, for
namespaceblock -> namespace ID { statements } ·, if
namespaceblock -> namespace ID { statements } ·, }
namespaceblock -> namespace ID { statements } ·, &&
namespaceblock -> namespace ID { statements } ·, ||
namespaceblock -> namespace ID { statements } ·, +
namespaceblock -> namespace ID { statements } ·, -
namespaceblock -> namespace ID { statements } ·, *
namespaceblock -> namespace ID { statements } ·, /
namespaceblock -> namespace ID { statements } ·, %
namespaceblock -> namespace ID { statements } ·, !
namespaceblock -> namespace ID { statements } ·, else
***EndSet***
***EndState***
***State***
221
I_747_1179_1316_1551_1593_1661_1678
***Set***
declstmt -> extern type ID ( params · ) ;, $
declstmt -> extern type ID ( params · ) ;, namespace
declstmt -> extern type ID ( params · ) ;, {
declstmt -> extern type ID ( params · ) ;, ID
declstmt -> extern type ID ( params · ) ;, void
declstmt -> extern type ID ( params · ) ;, bool
declstmt -> extern type ID ( params · ) ;, int
declstmt -> extern type ID ( params · ) ;, long
declstmt -> extern type ID ( params · ) ;, float
declstmt -> extern type ID ( params · ) ;, double
declstmt -> extern type ID ( params · ) ;, char
declstmt -> extern type ID ( params · ) ;, string
declstmt -> extern type ID ( params · ) ;, var
declstmt -> extern type ID ( params · ) ;, own
declstmt -> extern type ID ( params · ) ;, bor
declstmt -> extern type ID ( params · ) ;, const
declstmt -> extern type ID ( params · ) ;, extern
declstmt -> extern type ID ( params · ) ;, class
declstmt -> extern type ID ( params · ) ;, (
declstmt -> extern type ID ( params · ) ;, this
declstmt -> extern type ID ( params · ) ;, new
declstmt -> extern type ID ( params · ) ;, LITBOOL
declstmt -> extern type ID ( params · ) ;, LITINT
declstmt -> extern type ID ( params · ) ;, LITLONG
declstmt -> extern type ID ( params · ) ;, LITFLOAT
declstmt -> extern type ID ( params · ) ;, LITDOUBLE
declstmt -> extern type ID ( params · ) ;, LITCHAR
declstmt -> extern type ID ( params · ) ;, LITSTRING
declstmt -> extern type ID ( params · ) ;, null
declstmt -> extern type ID ( params · ) ;, ++
declstmt -> extern type ID ( params · ) ;, --
declstmt -> extern type ID ( params · ) ;, break
declstmt -> extern type ID ( params · ) ;, return
declstmt -> extern type ID ( params · ) ;, delete
declstmt -> extern type ID ( params · ) ;, while
declstmt -> extern type ID ( params · ) ;, for
declstmt -> extern type ID ( params · ) ;, if
params -> params · , type ID, )
params -> params · , own type ID, )
params -> params · , bor type ID, )
params -> params · , type ID, ,
params -> params · , own type ID, ,
params -> params · , bor type ID, ,
declstmt -> extern type ID ( params · ) ;, }
declstmt -> extern type ID ( params · ) ;, &&
declstmt -> extern type ID ( params · ) ;, ||
declstmt -> extern type ID ( params · ) ;, +
declstmt -> extern type ID ( params · ) ;, -
declstmt -> extern type ID ( params · ) ;, *
declstmt -> extern type ID ( params · ) ;, /
declstmt -> extern type ID ( params · ) ;, %
declstmt -> extern type ID ( params · ) ;, !
declstmt -> extern type ID ( params · ) ;, else
***EndSet***
***EndState***
***State***
222
I_757_1180_1317_1552_1594_1662_1679
***Set***
declstmt -> const type ID = lit · ;, $
declstmt -> const type ID = lit · ;, namespace
declstmt -> const type ID = lit · ;, {
declstmt -> const type ID = lit · ;, ID
declstmt -> const type ID = lit · ;, void
declstmt -> const type ID = lit · ;, bool
declstmt -> const type ID = lit · ;, int
declstmt -> const type ID = lit · ;, long
declstmt -> const type ID = lit · ;, float
declstmt -> const type ID = lit · ;, double
declstmt -> const type ID = lit · ;, char
declstmt -> const type ID = lit · ;, string
declstmt -> const type ID = lit · ;, var
declstmt -> const type ID = lit · ;, own
declstmt -> const type ID = lit · ;, bor
declstmt -> const type ID = lit · ;, const
declstmt -> const type ID = lit · ;, extern
declstmt -> const type ID = lit · ;, class
declstmt -> const type ID = lit · ;, (
declstmt -> const type ID = lit · ;, this
declstmt -> const type ID = lit · ;, new
declstmt -> const type ID = lit · ;, LITBOOL
declstmt -> const type ID = lit · ;, LITINT
declstmt -> const type ID = lit · ;, LITLONG
declstmt -> const type ID = lit · ;, LITFLOAT
declstmt -> const type ID = lit · ;, LITDOUBLE
declstmt -> const type ID = lit · ;, LITCHAR
declstmt -> const type ID = lit · ;, LITSTRING
declstmt -> const type ID = lit · ;, null
declstmt -> const type ID = lit · ;, ++
declstmt -> const type ID = lit · ;, --
declstmt -> const type ID = lit · ;, break
declstmt -> const type ID = lit · ;, return
declstmt -> const type ID = lit · ;, delete
declstmt -> const type ID = lit · ;, while
declstmt -> const type ID = lit · ;, for
declstmt -> const type ID = lit · ;, if
declstmt -> const type ID = lit · ;, }
declstmt -> const type ID = lit · ;, &&
declstmt -> const type ID = lit · ;, ||
declstmt -> const type ID = lit · ;, +
declstmt -> const type ID = lit · ;, -
declstmt -> const type ID = lit · ;, *
declstmt -> const type ID = lit · ;, /
declstmt -> const type ID = lit · ;, %
declstmt -> const type ID = lit · ;, !
declstmt -> const type ID = lit · ;, else
***EndSet***
***EndState***
***State***
223
I_758_1181_1318_1553_1595_1663_1680
***Set***
declstmt -> own type ID = expr · ;, $
declstmt -> own type ID = expr · ;, namespace
declstmt -> own type ID = expr · ;, {
declstmt -> own type ID = expr · ;, ID
declstmt -> own type ID = expr · ;, void
declstmt -> own type ID = expr · ;, bool
declstmt -> own type ID = expr · ;, int
declstmt -> own type ID = expr · ;, long
declstmt -> own type ID = expr · ;, float
declstmt -> own type ID = expr · ;, double
declstmt -> own type ID = expr · ;, char
declstmt -> own type ID = expr · ;, string
declstmt -> own type ID = expr · ;, var
declstmt -> own type ID = expr · ;, own
declstmt -> own type ID = expr · ;, bor
declstmt -> own type ID = expr · ;, const
declstmt -> own type ID = expr · ;, extern
declstmt -> own type ID = expr · ;, class
declstmt -> own type ID = expr · ;, (
declstmt -> own type ID = expr · ;, this
declstmt -> own type ID = expr · ;, new
declstmt -> own type ID = expr · ;, LITBOOL
declstmt -> own type ID = expr · ;, LITINT
declstmt -> own type ID = expr · ;, LITLONG
declstmt -> own type ID = expr · ;, LITFLOAT
declstmt -> own type ID = expr · ;, LITDOUBLE
declstmt -> own type ID = expr · ;, LITCHAR
declstmt -> own type ID = expr · ;, LITSTRING
declstmt -> own type ID = expr · ;, null
declstmt -> own type ID = expr · ;, ++
declstmt -> own type ID = expr · ;, --
declstmt -> own type ID = expr · ;, break
declstmt -> own type ID = expr · ;, return
declstmt -> own type ID = expr · ;, delete
declstmt -> own type ID = expr · ;, while
declstmt -> own type ID = expr · ;, for
declstmt -> own type ID = expr · ;, if
declstmt -> own type ID = expr · ;, }
declstmt -> own type ID = expr · ;, &&
declstmt -> own type ID = expr · ;, ||
declstmt -> own type ID = expr · ;, +
declstmt -> own type ID = expr · ;, -
declstmt -> own type ID = expr · ;, *
declstmt -> own type ID = expr · ;, /
declstmt -> own type ID = expr · ;, %
declstmt -> own type ID = expr · ;, !
declstmt -> own type ID = expr · ;, else
***EndSet***
***EndState***
***State***
224
I_759_1182_1319_1554_1596_1664_1681
***Set***
declstmt -> bor type ID = expr · ;, $
declstmt -> bor type ID = expr · ;, namespace
declstmt -> bor type ID = expr · ;, {
declstmt -> bor type ID = expr · ;, ID
declstmt -> bor type ID = expr · ;, void
declstmt -> bor type ID = expr · ;, bool
declstmt -> bor type ID = expr · ;, int
declstmt -> bor type ID = expr · ;, long
declstmt -> bor type ID = expr · ;, float
declstmt -> bor type ID = expr · ;, double
declstmt -> bor type ID = expr · ;, char
declstmt -> bor type ID = expr · ;, string
declstmt -> bor type ID = expr · ;, var
declstmt -> bor type ID = expr · ;, own
declstmt -> bor type ID = expr · ;, bor
declstmt -> bor type ID = expr · ;, const
declstmt -> bor type ID = expr · ;, extern
declstmt -> bor type ID = expr · ;, class
declstmt -> bor type ID = expr · ;, (
declstmt -> bor type ID = expr · ;, this
declstmt -> bor type ID = expr · ;, new
declstmt -> bor type ID = expr · ;, LITBOOL
declstmt -> bor type ID = expr · ;, LITINT
declstmt -> bor type ID = expr · ;, LITLONG
declstmt -> bor type ID = expr · ;, LITFLOAT
declstmt -> bor type ID = expr · ;, LITDOUBLE
declstmt -> bor type ID = expr · ;, LITCHAR
declstmt -> bor type ID = expr · ;, LITSTRING
declstmt -> bor type ID = expr · ;, null
declstmt -> bor type ID = expr · ;, ++
declstmt -> bor type ID = expr · ;, --
declstmt -> bor type ID = expr · ;, break
declstmt -> bor type ID = expr · ;, return
declstmt -> bor type ID = expr · ;, delete
declstmt -> bor type ID = expr · ;, while
declstmt -> bor type ID = expr · ;, for
declstmt -> bor type ID = expr · ;, if
declstmt -> bor type ID = expr · ;, }
declstmt -> bor type ID = expr · ;, &&
declstmt -> bor type ID = expr · ;, ||
declstmt -> bor type ID = expr · ;, +
declstmt -> bor type ID = expr · ;, -
declstmt -> bor type ID = expr · ;, *
declstmt -> bor type ID = expr · ;, /
declstmt -> bor type ID = expr · ;, %
declstmt -> bor type ID = expr · ;, !
declstmt -> bor type ID = expr · ;, else
***EndSet***
***EndState***
***State***
225
I_766_1183_1320_1555_1597_1665_1682
***Set***
declstmt -> class ID inherit { declstatements · }, $
declstmt -> class ID inherit { declstatements · }, namespace
declstmt -> class ID inherit { declstatements · }, {
declstmt -> class ID inherit { declstatements · }, ID
declstmt -> class ID inherit { declstatements · }, void
declstmt -> class ID inherit { declstatements · }, bool
declstmt -> class ID inherit { declstatements · }, int
declstmt -> class ID inherit { declstatements · }, long
declstmt -> class ID inherit { declstatements · }, float
declstmt -> class ID inherit { declstatements · }, double
declstmt -> class ID inherit { declstatements · }, char
declstmt -> class ID inherit { declstatements · }, string
declstmt -> class ID inherit { declstatements · }, var
declstmt -> class ID inherit { declstatements · }, own
declstmt -> class ID inherit { declstatements · }, bor
declstmt -> class ID inherit { declstatements · }, const
declstmt -> class ID inherit { declstatements · }, extern
declstmt -> class ID inherit { declstatements · }, class
declstmt -> class ID inherit { declstatements · }, (
declstmt -> class ID inherit { declstatements · }, this
declstmt -> class ID inherit { declstatements · }, new
declstmt -> class ID inherit { declstatements · }, LITBOOL
declstmt -> class ID inherit { declstatements · }, LITINT
declstmt -> class ID inherit { declstatements · }, LITLONG
declstmt -> class ID inherit { declstatements · }, LITFLOAT
declstmt -> class ID inherit { declstatements · }, LITDOUBLE
declstmt -> class ID inherit { declstatements · }, LITCHAR
declstmt -> class ID inherit { declstatements · }, LITSTRING
declstmt -> class ID inherit { declstatements · }, null
declstmt -> class ID inherit { declstatements · }, ++
declstmt -> class ID inherit { declstatements · }, --
declstmt -> class ID inherit { declstatements · }, break
declstmt -> class ID inherit { declstatements · }, return
declstmt -> class ID inherit { declstatements · }, delete
declstmt -> class ID inherit { declstatements · }, while
declstmt -> class ID inherit { declstatements · }, for
declstmt -> class ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, long
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, double
declstatements -> declstatements · declstmt, char
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, var
declstatements -> declstatements · declstmt, own
declstatements -> declstatements · declstmt, bor
declstatements -> declstatements · declstmt, const
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { declstatements · }, }
declstmt -> class ID inherit { declstatements · }, &&
declstmt -> class ID inherit { declstatements · }, ||
declstmt -> class ID inherit { declstatements · }, +
declstmt -> class ID inherit { declstatements · }, -
declstmt -> class ID inherit { declstatements · }, *
declstmt -> class ID inherit { declstatements · }, /
declstmt -> class ID inherit { declstatements · }, %
declstmt -> class ID inherit { declstatements · }, !
declstmt -> class ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
226
I_767
***Set***
declstatements -> declstmt ·, }
declstatements -> declstmt ·, ID
declstatements -> declstmt ·, void
declstatements -> declstmt ·, bool
declstatements -> declstmt ·, int
declstatements -> declstmt ·, long
declstatements -> declstmt ·, float
declstatements -> declstmt ·, double
declstatements -> declstmt ·, char
declstatements -> declstmt ·, string
declstatements -> declstmt ·, var
declstatements -> declstmt ·, own
declstatements -> declstmt ·, bor
declstatements -> declstmt ·, const
declstatements -> declstmt ·, extern
declstatements -> declstmt ·, class
***EndSet***
***EndState***
***State***
227
I_775_868_1211_1261_1303_1310_1374_1381_1535_1542_1561
***Set***
cast -> ( type ) factor ·, ;
cast -> ( type ) factor ·, &&
cast -> ( type ) factor ·, ||
cast -> ( type ) factor ·, >
cast -> ( type ) factor ·, <
cast -> ( type ) factor ·, >=
cast -> ( type ) factor ·, <=
cast -> ( type ) factor ·, ==
cast -> ( type ) factor ·, !=
cast -> ( type ) factor ·, +
cast -> ( type ) factor ·, -
cast -> ( type ) factor ·, *
cast -> ( type ) factor ·, /
cast -> ( type ) factor ·, %
cast -> ( type ) factor ·, )
cast -> ( type ) factor ·, ,
cast -> ( type ) factor ·, ]
***EndSet***
***EndState***
***State***
228
I_829_1184_1321_1598_1666_1683
***Set***
stmt -> while ( expr ) stmt ·, $
stmt -> while ( expr ) stmt ·, namespace
stmt -> while ( expr ) stmt ·, {
stmt -> while ( expr ) stmt ·, ID
stmt -> while ( expr ) stmt ·, void
stmt -> while ( expr ) stmt ·, bool
stmt -> while ( expr ) stmt ·, int
stmt -> while ( expr ) stmt ·, long
stmt -> while ( expr ) stmt ·, float
stmt -> while ( expr ) stmt ·, double
stmt -> while ( expr ) stmt ·, char
stmt -> while ( expr ) stmt ·, string
stmt -> while ( expr ) stmt ·, var
stmt -> while ( expr ) stmt ·, own
stmt -> while ( expr ) stmt ·, bor
stmt -> while ( expr ) stmt ·, const
stmt -> while ( expr ) stmt ·, extern
stmt -> while ( expr ) stmt ·, class
stmt -> while ( expr ) stmt ·, (
stmt -> while ( expr ) stmt ·, this
stmt -> while ( expr ) stmt ·, new
stmt -> while ( expr ) stmt ·, LITBOOL
stmt -> while ( expr ) stmt ·, LITINT
stmt -> while ( expr ) stmt ·, LITLONG
stmt -> while ( expr ) stmt ·, LITFLOAT
stmt -> while ( expr ) stmt ·, LITDOUBLE
stmt -> while ( expr ) stmt ·, LITCHAR
stmt -> while ( expr ) stmt ·, LITSTRING
stmt -> while ( expr ) stmt ·, null
stmt -> while ( expr ) stmt ·, ++
stmt -> while ( expr ) stmt ·, --
stmt -> while ( expr ) stmt ·, break
stmt -> while ( expr ) stmt ·, return
stmt -> while ( expr ) stmt ·, delete
stmt -> while ( expr ) stmt ·, while
stmt -> while ( expr ) stmt ·, for
stmt -> while ( expr ) stmt ·, if
stmt -> while ( expr ) stmt ·, }
stmt -> while ( expr ) stmt ·, &&
stmt -> while ( expr ) stmt ·, ||
stmt -> while ( expr ) stmt ·, +
stmt -> while ( expr ) stmt ·, -
stmt -> while ( expr ) stmt ·, *
stmt -> while ( expr ) stmt ·, /
stmt -> while ( expr ) stmt ·, %
stmt -> while ( expr ) stmt ·, !
stmt -> while ( expr ) stmt ·, else
***EndSet***
***EndState***
***State***
229
I_842_1185_1322_1599_1667_1684
***Set***
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, $
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, {
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, void
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, int
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, long
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, float
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, double
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, char
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, string
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, var
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, own
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bor
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, const
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, class
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, (
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, this
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, new
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITLONG
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, null
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, --
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, break
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, return
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, while
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, for
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, if
stmtexpr -> · assign, )
stmtexpr -> · call, )
stmtexpr -> · incdec, )
stmtexpr -> · newobj, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
newobj -> · new ID ( ), )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, }
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, +
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, -
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, *
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, /
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, %
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, !
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
230
I_861_1201_1338_1600_1668_1685
***Set***
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, long
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, var
stmt -> if ( expr ) stmt · elifclauselist elseclause, own
stmt -> if ( expr ) stmt · elifclauselist elseclause, bor
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITLONG
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, long
elifclauselist -> · elifclauselist elifclause, long
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, var
elifclauselist -> · elifclauselist elifclause, var
elifclauselist -> ·, own
elifclauselist -> · elifclauselist elifclause, own
elifclauselist -> ·, bor
elifclauselist -> · elifclauselist elifclause, bor
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITLONG
elifclauselist -> · elifclauselist elifclause, LITLONG
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
231
I_1016
***Set***
args -> args , expr ·, )
args -> args , expr ·, ,
***EndSet***
***EndState***
***State***
232
I_1031_1205_1351_1556_1602_1670_1687
***Set***
declstmt -> type operator ID ( params · ) { statements }, $
declstmt -> type operator ID ( params · ) { statements }, namespace
declstmt -> type operator ID ( params · ) { statements }, {
declstmt -> type operator ID ( params · ) { statements }, ID
declstmt -> type operator ID ( params · ) { statements }, void
declstmt -> type operator ID ( params · ) { statements }, bool
declstmt -> type operator ID ( params · ) { statements }, int
declstmt -> type operator ID ( params · ) { statements }, long
declstmt -> type operator ID ( params · ) { statements }, float
declstmt -> type operator ID ( params · ) { statements }, double
declstmt -> type operator ID ( params · ) { statements }, char
declstmt -> type operator ID ( params · ) { statements }, string
declstmt -> type operator ID ( params · ) { statements }, var
declstmt -> type operator ID ( params · ) { statements }, own
declstmt -> type operator ID ( params · ) { statements }, bor
declstmt -> type operator ID ( params · ) { statements }, const
declstmt -> type operator ID ( params · ) { statements }, extern
declstmt -> type operator ID ( params · ) { statements }, class
declstmt -> type operator ID ( params · ) { statements }, (
declstmt -> type operator ID ( params · ) { statements }, this
declstmt -> type operator ID ( params · ) { statements }, new
declstmt -> type operator ID ( params · ) { statements }, LITBOOL
declstmt -> type operator ID ( params · ) { statements }, LITINT
declstmt -> type operator ID ( params · ) { statements }, LITLONG
declstmt -> type operator ID ( params · ) { statements }, LITFLOAT
declstmt -> type operator ID ( params · ) { statements }, LITDOUBLE
declstmt -> type operator ID ( params · ) { statements }, LITCHAR
declstmt -> type operator ID ( params · ) { statements }, LITSTRING
declstmt -> type operator ID ( params · ) { statements }, null
declstmt -> type operator ID ( params · ) { statements }, ++
declstmt -> type operator ID ( params · ) { statements }, --
declstmt -> type operator ID ( params · ) { statements }, break
declstmt -> type operator ID ( params · ) { statements }, return
declstmt -> type operator ID ( params · ) { statements }, delete
declstmt -> type operator ID ( params · ) { statements }, while
declstmt -> type operator ID ( params · ) { statements }, for
declstmt -> type operator ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , own type ID, )
params -> params · , bor type ID, )
params -> params · , type ID, ,
params -> params · , own type ID, ,
params -> params · , bor type ID, ,
declstmt -> type operator ID ( params · ) { statements }, }
declstmt -> type operator ID ( params · ) { statements }, &&
declstmt -> type operator ID ( params · ) { statements }, ||
declstmt -> type operator ID ( params · ) { statements }, +
declstmt -> type operator ID ( params · ) { statements }, -
declstmt -> type operator ID ( params · ) { statements }, *
declstmt -> type operator ID ( params · ) { statements }, /
declstmt -> type operator ID ( params · ) { statements }, %
declstmt -> type operator ID ( params · ) { statements }, !
declstmt -> type operator ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
233
I_1032
***Set***
params -> own type · ID, )
params -> own type · ID, ,
***EndSet***
***EndState***
***State***
234
I_1033
***Set***
params -> bor type · ID, )
params -> bor type · ID, ,
***EndSet***
***EndState***
***State***
235
I_1034
***Set***
params -> type ID ·, )
params -> type ID ·, ,
***EndSet***
***EndState***
***State***
236
I_1035_1269_1270
***Set***
params -> params , · type ID, )
params -> params , · own type ID, )
params -> params , · bor type ID, )
params -> params , · type ID, ,
params -> params , · own type ID, ,
params -> params , · bor type ID, ,
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
params -> params , own · type ID, )
params -> params , own · type ID, ,
params -> params , bor · type ID, )
params -> params , bor · type ID, ,
***EndSet***
***EndState***
***State***
237
I_1036_1206_1352_1557_1603_1671_1688
***Set***
declstmt -> type ID ( params ) · { statements }, $
declstmt -> type ID ( params ) · { statements }, namespace
declstmt -> type ID ( params ) · { statements }, {
declstmt -> type ID ( params ) · { statements }, ID
declstmt -> type ID ( params ) · { statements }, void
declstmt -> type ID ( params ) · { statements }, bool
declstmt -> type ID ( params ) · { statements }, int
declstmt -> type ID ( params ) · { statements }, long
declstmt -> type ID ( params ) · { statements }, float
declstmt -> type ID ( params ) · { statements }, double
declstmt -> type ID ( params ) · { statements }, char
declstmt -> type ID ( params ) · { statements }, string
declstmt -> type ID ( params ) · { statements }, var
declstmt -> type ID ( params ) · { statements }, own
declstmt -> type ID ( params ) · { statements }, bor
declstmt -> type ID ( params ) · { statements }, const
declstmt -> type ID ( params ) · { statements }, extern
declstmt -> type ID ( params ) · { statements }, class
declstmt -> type ID ( params ) · { statements }, (
declstmt -> type ID ( params ) · { statements }, this
declstmt -> type ID ( params ) · { statements }, new
declstmt -> type ID ( params ) · { statements }, LITBOOL
declstmt -> type ID ( params ) · { statements }, LITINT
declstmt -> type ID ( params ) · { statements }, LITLONG
declstmt -> type ID ( params ) · { statements }, LITFLOAT
declstmt -> type ID ( params ) · { statements }, LITDOUBLE
declstmt -> type ID ( params ) · { statements }, LITCHAR
declstmt -> type ID ( params ) · { statements }, LITSTRING
declstmt -> type ID ( params ) · { statements }, null
declstmt -> type ID ( params ) · { statements }, ++
declstmt -> type ID ( params ) · { statements }, --
declstmt -> type ID ( params ) · { statements }, break
declstmt -> type ID ( params ) · { statements }, return
declstmt -> type ID ( params ) · { statements }, delete
declstmt -> type ID ( params ) · { statements }, while
declstmt -> type ID ( params ) · { statements }, for
declstmt -> type ID ( params ) · { statements }, if
declstmt -> type ID ( params ) · { statements }, }
declstmt -> type ID ( params ) · { statements }, &&
declstmt -> type ID ( params ) · { statements }, ||
declstmt -> type ID ( params ) · { statements }, +
declstmt -> type ID ( params ) · { statements }, -
declstmt -> type ID ( params ) · { statements }, *
declstmt -> type ID ( params ) · { statements }, /
declstmt -> type ID ( params ) · { statements }, %
declstmt -> type ID ( params ) · { statements }, !
declstmt -> type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
238
I_1037_1207_1353_1558_1604_1672_1689
***Set***
declstmt -> type ID = expr ; ·, $
declstmt -> type ID = expr ; ·, namespace
declstmt -> type ID = expr ; ·, {
declstmt -> type ID = expr ; ·, ID
declstmt -> type ID = expr ; ·, void
declstmt -> type ID = expr ; ·, bool
declstmt -> type ID = expr ; ·, int
declstmt -> type ID = expr ; ·, long
declstmt -> type ID = expr ; ·, float
declstmt -> type ID = expr ; ·, double
declstmt -> type ID = expr ; ·, char
declstmt -> type ID = expr ; ·, string
declstmt -> type ID = expr ; ·, var
declstmt -> type ID = expr ; ·, own
declstmt -> type ID = expr ; ·, bor
declstmt -> type ID = expr ; ·, const
declstmt -> type ID = expr ; ·, extern
declstmt -> type ID = expr ; ·, class
declstmt -> type ID = expr ; ·, (
declstmt -> type ID = expr ; ·, this
declstmt -> type ID = expr ; ·, new
declstmt -> type ID = expr ; ·, LITBOOL
declstmt -> type ID = expr ; ·, LITINT
declstmt -> type ID = expr ; ·, LITLONG
declstmt -> type ID = expr ; ·, LITFLOAT
declstmt -> type ID = expr ; ·, LITDOUBLE
declstmt -> type ID = expr ; ·, LITCHAR
declstmt -> type ID = expr ; ·, LITSTRING
declstmt -> type ID = expr ; ·, null
declstmt -> type ID = expr ; ·, ++
declstmt -> type ID = expr ; ·, --
declstmt -> type ID = expr ; ·, break
declstmt -> type ID = expr ; ·, return
declstmt -> type ID = expr ; ·, delete
declstmt -> type ID = expr ; ·, while
declstmt -> type ID = expr ; ·, for
declstmt -> type ID = expr ; ·, if
declstmt -> type ID = expr ; ·, }
declstmt -> type ID = expr ; ·, &&
declstmt -> type ID = expr ; ·, ||
declstmt -> type ID = expr ; ·, +
declstmt -> type ID = expr ; ·, -
declstmt -> type ID = expr ; ·, *
declstmt -> type ID = expr ; ·, /
declstmt -> type ID = expr ; ·, %
declstmt -> type ID = expr ; ·, !
declstmt -> type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
239
I_1038_1386_1464_1625_1650_1698_1710
***Set***
declstmt -> extern type ID ( params ) · ;, $
declstmt -> extern type ID ( params ) · ;, namespace
declstmt -> extern type ID ( params ) · ;, {
declstmt -> extern type ID ( params ) · ;, ID
declstmt -> extern type ID ( params ) · ;, void
declstmt -> extern type ID ( params ) · ;, bool
declstmt -> extern type ID ( params ) · ;, int
declstmt -> extern type ID ( params ) · ;, long
declstmt -> extern type ID ( params ) · ;, float
declstmt -> extern type ID ( params ) · ;, double
declstmt -> extern type ID ( params ) · ;, char
declstmt -> extern type ID ( params ) · ;, string
declstmt -> extern type ID ( params ) · ;, var
declstmt -> extern type ID ( params ) · ;, own
declstmt -> extern type ID ( params ) · ;, bor
declstmt -> extern type ID ( params ) · ;, const
declstmt -> extern type ID ( params ) · ;, extern
declstmt -> extern type ID ( params ) · ;, class
declstmt -> extern type ID ( params ) · ;, (
declstmt -> extern type ID ( params ) · ;, this
declstmt -> extern type ID ( params ) · ;, new
declstmt -> extern type ID ( params ) · ;, LITBOOL
declstmt -> extern type ID ( params ) · ;, LITINT
declstmt -> extern type ID ( params ) · ;, LITLONG
declstmt -> extern type ID ( params ) · ;, LITFLOAT
declstmt -> extern type ID ( params ) · ;, LITDOUBLE
declstmt -> extern type ID ( params ) · ;, LITCHAR
declstmt -> extern type ID ( params ) · ;, LITSTRING
declstmt -> extern type ID ( params ) · ;, null
declstmt -> extern type ID ( params ) · ;, ++
declstmt -> extern type ID ( params ) · ;, --
declstmt -> extern type ID ( params ) · ;, break
declstmt -> extern type ID ( params ) · ;, return
declstmt -> extern type ID ( params ) · ;, delete
declstmt -> extern type ID ( params ) · ;, while
declstmt -> extern type ID ( params ) · ;, for
declstmt -> extern type ID ( params ) · ;, if
declstmt -> extern type ID ( params ) · ;, }
declstmt -> extern type ID ( params ) · ;, &&
declstmt -> extern type ID ( params ) · ;, ||
declstmt -> extern type ID ( params ) · ;, +
declstmt -> extern type ID ( params ) · ;, -
declstmt -> extern type ID ( params ) · ;, *
declstmt -> extern type ID ( params ) · ;, /
declstmt -> extern type ID ( params ) · ;, %
declstmt -> extern type ID ( params ) · ;, !
declstmt -> extern type ID ( params ) · ;, else
***EndSet***
***EndState***
***State***
240
I_1039_1387_1465_1626_1651_1699_1711
***Set***
declstmt -> const type ID = lit ; ·, $
declstmt -> const type ID = lit ; ·, namespace
declstmt -> const type ID = lit ; ·, {
declstmt -> const type ID = lit ; ·, ID
declstmt -> const type ID = lit ; ·, void
declstmt -> const type ID = lit ; ·, bool
declstmt -> const type ID = lit ; ·, int
declstmt -> const type ID = lit ; ·, long
declstmt -> const type ID = lit ; ·, float
declstmt -> const type ID = lit ; ·, double
declstmt -> const type ID = lit ; ·, char
declstmt -> const type ID = lit ; ·, string
declstmt -> const type ID = lit ; ·, var
declstmt -> const type ID = lit ; ·, own
declstmt -> const type ID = lit ; ·, bor
declstmt -> const type ID = lit ; ·, const
declstmt -> const type ID = lit ; ·, extern
declstmt -> const type ID = lit ; ·, class
declstmt -> const type ID = lit ; ·, (
declstmt -> const type ID = lit ; ·, this
declstmt -> const type ID = lit ; ·, new
declstmt -> const type ID = lit ; ·, LITBOOL
declstmt -> const type ID = lit ; ·, LITINT
declstmt -> const type ID = lit ; ·, LITLONG
declstmt -> const type ID = lit ; ·, LITFLOAT
declstmt -> const type ID = lit ; ·, LITDOUBLE
declstmt -> const type ID = lit ; ·, LITCHAR
declstmt -> const type ID = lit ; ·, LITSTRING
declstmt -> const type ID = lit ; ·, null
declstmt -> const type ID = lit ; ·, ++
declstmt -> const type ID = lit ; ·, --
declstmt -> const type ID = lit ; ·, break
declstmt -> const type ID = lit ; ·, return
declstmt -> const type ID = lit ; ·, delete
declstmt -> const type ID = lit ; ·, while
declstmt -> const type ID = lit ; ·, for
declstmt -> const type ID = lit ; ·, if
declstmt -> const type ID = lit ; ·, }
declstmt -> const type ID = lit ; ·, &&
declstmt -> const type ID = lit ; ·, ||
declstmt -> const type ID = lit ; ·, +
declstmt -> const type ID = lit ; ·, -
declstmt -> const type ID = lit ; ·, *
declstmt -> const type ID = lit ; ·, /
declstmt -> const type ID = lit ; ·, %
declstmt -> const type ID = lit ; ·, !
declstmt -> const type ID = lit ; ·, else
***EndSet***
***EndState***
***State***
241
I_1040_1388_1466_1627_1652_1700_1712
***Set***
declstmt -> own type ID = expr ; ·, $
declstmt -> own type ID = expr ; ·, namespace
declstmt -> own type ID = expr ; ·, {
declstmt -> own type ID = expr ; ·, ID
declstmt -> own type ID = expr ; ·, void
declstmt -> own type ID = expr ; ·, bool
declstmt -> own type ID = expr ; ·, int
declstmt -> own type ID = expr ; ·, long
declstmt -> own type ID = expr ; ·, float
declstmt -> own type ID = expr ; ·, double
declstmt -> own type ID = expr ; ·, char
declstmt -> own type ID = expr ; ·, string
declstmt -> own type ID = expr ; ·, var
declstmt -> own type ID = expr ; ·, own
declstmt -> own type ID = expr ; ·, bor
declstmt -> own type ID = expr ; ·, const
declstmt -> own type ID = expr ; ·, extern
declstmt -> own type ID = expr ; ·, class
declstmt -> own type ID = expr ; ·, (
declstmt -> own type ID = expr ; ·, this
declstmt -> own type ID = expr ; ·, new
declstmt -> own type ID = expr ; ·, LITBOOL
declstmt -> own type ID = expr ; ·, LITINT
declstmt -> own type ID = expr ; ·, LITLONG
declstmt -> own type ID = expr ; ·, LITFLOAT
declstmt -> own type ID = expr ; ·, LITDOUBLE
declstmt -> own type ID = expr ; ·, LITCHAR
declstmt -> own type ID = expr ; ·, LITSTRING
declstmt -> own type ID = expr ; ·, null
declstmt -> own type ID = expr ; ·, ++
declstmt -> own type ID = expr ; ·, --
declstmt -> own type ID = expr ; ·, break
declstmt -> own type ID = expr ; ·, return
declstmt -> own type ID = expr ; ·, delete
declstmt -> own type ID = expr ; ·, while
declstmt -> own type ID = expr ; ·, for
declstmt -> own type ID = expr ; ·, if
declstmt -> own type ID = expr ; ·, }
declstmt -> own type ID = expr ; ·, &&
declstmt -> own type ID = expr ; ·, ||
declstmt -> own type ID = expr ; ·, +
declstmt -> own type ID = expr ; ·, -
declstmt -> own type ID = expr ; ·, *
declstmt -> own type ID = expr ; ·, /
declstmt -> own type ID = expr ; ·, %
declstmt -> own type ID = expr ; ·, !
declstmt -> own type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
242
I_1041_1389_1467_1628_1653_1701_1713
***Set***
declstmt -> bor type ID = expr ; ·, $
declstmt -> bor type ID = expr ; ·, namespace
declstmt -> bor type ID = expr ; ·, {
declstmt -> bor type ID = expr ; ·, ID
declstmt -> bor type ID = expr ; ·, void
declstmt -> bor type ID = expr ; ·, bool
declstmt -> bor type ID = expr ; ·, int
declstmt -> bor type ID = expr ; ·, long
declstmt -> bor type ID = expr ; ·, float
declstmt -> bor type ID = expr ; ·, double
declstmt -> bor type ID = expr ; ·, char
declstmt -> bor type ID = expr ; ·, string
declstmt -> bor type ID = expr ; ·, var
declstmt -> bor type ID = expr ; ·, own
declstmt -> bor type ID = expr ; ·, bor
declstmt -> bor type ID = expr ; ·, const
declstmt -> bor type ID = expr ; ·, extern
declstmt -> bor type ID = expr ; ·, class
declstmt -> bor type ID = expr ; ·, (
declstmt -> bor type ID = expr ; ·, this
declstmt -> bor type ID = expr ; ·, new
declstmt -> bor type ID = expr ; ·, LITBOOL
declstmt -> bor type ID = expr ; ·, LITINT
declstmt -> bor type ID = expr ; ·, LITLONG
declstmt -> bor type ID = expr ; ·, LITFLOAT
declstmt -> bor type ID = expr ; ·, LITDOUBLE
declstmt -> bor type ID = expr ; ·, LITCHAR
declstmt -> bor type ID = expr ; ·, LITSTRING
declstmt -> bor type ID = expr ; ·, null
declstmt -> bor type ID = expr ; ·, ++
declstmt -> bor type ID = expr ; ·, --
declstmt -> bor type ID = expr ; ·, break
declstmt -> bor type ID = expr ; ·, return
declstmt -> bor type ID = expr ; ·, delete
declstmt -> bor type ID = expr ; ·, while
declstmt -> bor type ID = expr ; ·, for
declstmt -> bor type ID = expr ; ·, if
declstmt -> bor type ID = expr ; ·, }
declstmt -> bor type ID = expr ; ·, &&
declstmt -> bor type ID = expr ; ·, ||
declstmt -> bor type ID = expr ; ·, +
declstmt -> bor type ID = expr ; ·, -
declstmt -> bor type ID = expr ; ·, *
declstmt -> bor type ID = expr ; ·, /
declstmt -> bor type ID = expr ; ·, %
declstmt -> bor type ID = expr ; ·, !
declstmt -> bor type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
243
I_1048_1390_1468_1629_1654_1702_1714
***Set***
declstmt -> class ID inherit { declstatements } ·, $
declstmt -> class ID inherit { declstatements } ·, namespace
declstmt -> class ID inherit { declstatements } ·, {
declstmt -> class ID inherit { declstatements } ·, ID
declstmt -> class ID inherit { declstatements } ·, void
declstmt -> class ID inherit { declstatements } ·, bool
declstmt -> class ID inherit { declstatements } ·, int
declstmt -> class ID inherit { declstatements } ·, long
declstmt -> class ID inherit { declstatements } ·, float
declstmt -> class ID inherit { declstatements } ·, double
declstmt -> class ID inherit { declstatements } ·, char
declstmt -> class ID inherit { declstatements } ·, string
declstmt -> class ID inherit { declstatements } ·, var
declstmt -> class ID inherit { declstatements } ·, own
declstmt -> class ID inherit { declstatements } ·, bor
declstmt -> class ID inherit { declstatements } ·, const
declstmt -> class ID inherit { declstatements } ·, extern
declstmt -> class ID inherit { declstatements } ·, class
declstmt -> class ID inherit { declstatements } ·, (
declstmt -> class ID inherit { declstatements } ·, this
declstmt -> class ID inherit { declstatements } ·, new
declstmt -> class ID inherit { declstatements } ·, LITBOOL
declstmt -> class ID inherit { declstatements } ·, LITINT
declstmt -> class ID inherit { declstatements } ·, LITLONG
declstmt -> class ID inherit { declstatements } ·, LITFLOAT
declstmt -> class ID inherit { declstatements } ·, LITDOUBLE
declstmt -> class ID inherit { declstatements } ·, LITCHAR
declstmt -> class ID inherit { declstatements } ·, LITSTRING
declstmt -> class ID inherit { declstatements } ·, null
declstmt -> class ID inherit { declstatements } ·, ++
declstmt -> class ID inherit { declstatements } ·, --
declstmt -> class ID inherit { declstatements } ·, break
declstmt -> class ID inherit { declstatements } ·, return
declstmt -> class ID inherit { declstatements } ·, delete
declstmt -> class ID inherit { declstatements } ·, while
declstmt -> class ID inherit { declstatements } ·, for
declstmt -> class ID inherit { declstatements } ·, if
declstmt -> class ID inherit { declstatements } ·, }
declstmt -> class ID inherit { declstatements } ·, &&
declstmt -> class ID inherit { declstatements } ·, ||
declstmt -> class ID inherit { declstatements } ·, +
declstmt -> class ID inherit { declstatements } ·, -
declstmt -> class ID inherit { declstatements } ·, *
declstmt -> class ID inherit { declstatements } ·, /
declstmt -> class ID inherit { declstatements } ·, %
declstmt -> class ID inherit { declstatements } ·, !
declstmt -> class ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
244
I_1049
***Set***
declstatements -> declstatements declstmt ·, }
declstatements -> declstatements declstmt ·, ID
declstatements -> declstatements declstmt ·, void
declstatements -> declstatements declstmt ·, bool
declstatements -> declstatements declstmt ·, int
declstatements -> declstatements declstmt ·, long
declstatements -> declstatements declstmt ·, float
declstatements -> declstatements declstmt ·, double
declstatements -> declstatements declstmt ·, char
declstatements -> declstatements declstmt ·, string
declstatements -> declstatements declstmt ·, var
declstatements -> declstatements declstmt ·, own
declstatements -> declstatements declstmt ·, bor
declstatements -> declstatements declstmt ·, const
declstatements -> declstatements declstmt ·, extern
declstatements -> declstatements declstmt ·, class
***EndSet***
***EndState***
***State***
245
I_1124_1391_1469_1655_1703_1715
***Set***
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, $
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, {
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, void
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, int
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, long
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, float
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, double
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, char
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, string
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, var
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, own
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bor
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, const
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, class
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, (
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, this
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, new
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, null
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, --
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, break
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, return
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, while
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, for
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, if
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, }
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, +
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, -
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, *
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, /
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, %
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, !
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, else
***EndSet***
***EndState***
***State***
246
I_1148_1406_1484_1656_1704_1716
***Set***
stmt -> if ( expr ) stmt elifclauselist · elseclause, $
stmt -> if ( expr ) stmt elifclauselist · elseclause, namespace
stmt -> if ( expr ) stmt elifclauselist · elseclause, {
stmt -> if ( expr ) stmt elifclauselist · elseclause, ID
stmt -> if ( expr ) stmt elifclauselist · elseclause, void
stmt -> if ( expr ) stmt elifclauselist · elseclause, bool
stmt -> if ( expr ) stmt elifclauselist · elseclause, int
stmt -> if ( expr ) stmt elifclauselist · elseclause, long
stmt -> if ( expr ) stmt elifclauselist · elseclause, float
stmt -> if ( expr ) stmt elifclauselist · elseclause, double
stmt -> if ( expr ) stmt elifclauselist · elseclause, char
stmt -> if ( expr ) stmt elifclauselist · elseclause, string
stmt -> if ( expr ) stmt elifclauselist · elseclause, var
stmt -> if ( expr ) stmt elifclauselist · elseclause, own
stmt -> if ( expr ) stmt elifclauselist · elseclause, bor
stmt -> if ( expr ) stmt elifclauselist · elseclause, const
stmt -> if ( expr ) stmt elifclauselist · elseclause, extern
stmt -> if ( expr ) stmt elifclauselist · elseclause, class
stmt -> if ( expr ) stmt elifclauselist · elseclause, (
stmt -> if ( expr ) stmt elifclauselist · elseclause, this
stmt -> if ( expr ) stmt elifclauselist · elseclause, new
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITBOOL
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITINT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITLONG
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITCHAR
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITSTRING
stmt -> if ( expr ) stmt elifclauselist · elseclause, null
stmt -> if ( expr ) stmt elifclauselist · elseclause, ++
stmt -> if ( expr ) stmt elifclauselist · elseclause, --
stmt -> if ( expr ) stmt elifclauselist · elseclause, break
stmt -> if ( expr ) stmt elifclauselist · elseclause, return
stmt -> if ( expr ) stmt elifclauselist · elseclause, delete
stmt -> if ( expr ) stmt elifclauselist · elseclause, while
stmt -> if ( expr ) stmt elifclauselist · elseclause, for
stmt -> if ( expr ) stmt elifclauselist · elseclause, if
elifclauselist -> elifclauselist · elifclause, else
elifclauselist -> elifclauselist · elifclause, $
elifclauselist -> elifclauselist · elifclause, namespace
elifclauselist -> elifclauselist · elifclause, {
elifclauselist -> elifclauselist · elifclause, ID
elifclauselist -> elifclauselist · elifclause, void
elifclauselist -> elifclauselist · elifclause, bool
elifclauselist -> elifclauselist · elifclause, int
elifclauselist -> elifclauselist · elifclause, long
elifclauselist -> elifclauselist · elifclause, float
elifclauselist -> elifclauselist · elifclause, double
elifclauselist -> elifclauselist · elifclause, char
elifclauselist -> elifclauselist · elifclause, string
elifclauselist -> elifclauselist · elifclause, var
elifclauselist -> elifclauselist · elifclause, own
elifclauselist -> elifclauselist · elifclause, bor
elifclauselist -> elifclauselist · elifclause, const
elifclauselist -> elifclauselist · elifclause, extern
elifclauselist -> elifclauselist · elifclause, class
elifclauselist -> elifclauselist · elifclause, (
elifclauselist -> elifclauselist · elifclause, this
elifclauselist -> elifclauselist · elifclause, new
elifclauselist -> elifclauselist · elifclause, LITBOOL
elifclauselist -> elifclauselist · elifclause, LITINT
elifclauselist -> elifclauselist · elifclause, LITLONG
elifclauselist -> elifclauselist · elifclause, LITFLOAT
elifclauselist -> elifclauselist · elifclause, LITDOUBLE
elifclauselist -> elifclauselist · elifclause, LITCHAR
elifclauselist -> elifclauselist · elifclause, LITSTRING
elifclauselist -> elifclauselist · elifclause, null
elifclauselist -> elifclauselist · elifclause, ++
elifclauselist -> elifclauselist · elifclause, --
elifclauselist -> elifclauselist · elifclause, break
elifclauselist -> elifclauselist · elifclause, return
elifclauselist -> elifclauselist · elifclause, delete
elifclauselist -> elifclauselist · elifclause, while
elifclauselist -> elifclauselist · elifclause, for
elifclauselist -> elifclauselist · elifclause, if
elseclause -> ·, $
elseclause -> · else stmt, $
elseclause -> ·, namespace
elseclause -> · else stmt, namespace
elseclause -> ·, {
elseclause -> · else stmt, {
elseclause -> ·, ID
elseclause -> · else stmt, ID
elseclause -> ·, void
elseclause -> · else stmt, void
elseclause -> ·, bool
elseclause -> · else stmt, bool
elseclause -> ·, int
elseclause -> · else stmt, int
elseclause -> ·, long
elseclause -> · else stmt, long
elseclause -> ·, float
elseclause -> · else stmt, float
elseclause -> ·, double
elseclause -> · else stmt, double
elseclause -> ·, char
elseclause -> · else stmt, char
elseclause -> ·, string
elseclause -> · else stmt, string
elseclause -> ·, var
elseclause -> · else stmt, var
elseclause -> ·, own
elseclause -> · else stmt, own
elseclause -> ·, bor
elseclause -> · else stmt, bor
elseclause -> ·, const
elseclause -> · else stmt, const
elseclause -> ·, extern
elseclause -> · else stmt, extern
elseclause -> ·, class
elseclause -> · else stmt, class
elseclause -> ·, (
elseclause -> · else stmt, (
elseclause -> ·, this
elseclause -> · else stmt, this
elseclause -> ·, new
elseclause -> · else stmt, new
elseclause -> ·, LITBOOL
elseclause -> · else stmt, LITBOOL
elseclause -> ·, LITINT
elseclause -> · else stmt, LITINT
elseclause -> ·, LITLONG
elseclause -> · else stmt, LITLONG
elseclause -> ·, LITFLOAT
elseclause -> · else stmt, LITFLOAT
elseclause -> ·, LITDOUBLE
elseclause -> · else stmt, LITDOUBLE
elseclause -> ·, LITCHAR
elseclause -> · else stmt, LITCHAR
elseclause -> ·, LITSTRING
elseclause -> · else stmt, LITSTRING
elseclause -> ·, null
elseclause -> · else stmt, null
elseclause -> ·, ++
elseclause -> · else stmt, ++
elseclause -> ·, --
elseclause -> · else stmt, --
elseclause -> ·, break
elseclause -> · else stmt, break
elseclause -> ·, return
elseclause -> · else stmt, return
elseclause -> ·, delete
elseclause -> · else stmt, delete
elseclause -> ·, while
elseclause -> · else stmt, while
elseclause -> ·, for
elseclause -> · else stmt, for
elseclause -> ·, if
elseclause -> · else stmt, if
elifclause -> · else if ( expr ) stmt, else
elifclause -> · else if ( expr ) stmt, $
elifclause -> · else if ( expr ) stmt, namespace
elifclause -> · else if ( expr ) stmt, {
elifclause -> · else if ( expr ) stmt, ID
elifclause -> · else if ( expr ) stmt, void
elifclause -> · else if ( expr ) stmt, bool
elifclause -> · else if ( expr ) stmt, int
elifclause -> · else if ( expr ) stmt, long
elifclause -> · else if ( expr ) stmt, float
elifclause -> · else if ( expr ) stmt, double
elifclause -> · else if ( expr ) stmt, char
elifclause -> · else if ( expr ) stmt, string
elifclause -> · else if ( expr ) stmt, var
elifclause -> · else if ( expr ) stmt, own
elifclause -> · else if ( expr ) stmt, bor
elifclause -> · else if ( expr ) stmt, const
elifclause -> · else if ( expr ) stmt, extern
elifclause -> · else if ( expr ) stmt, class
elifclause -> · else if ( expr ) stmt, (
elifclause -> · else if ( expr ) stmt, this
elifclause -> · else if ( expr ) stmt, new
elifclause -> · else if ( expr ) stmt, LITBOOL
elifclause -> · else if ( expr ) stmt, LITINT
elifclause -> · else if ( expr ) stmt, LITLONG
elifclause -> · else if ( expr ) stmt, LITFLOAT
elifclause -> · else if ( expr ) stmt, LITDOUBLE
elifclause -> · else if ( expr ) stmt, LITCHAR
elifclause -> · else if ( expr ) stmt, LITSTRING
elifclause -> · else if ( expr ) stmt, null
elifclause -> · else if ( expr ) stmt, ++
elifclause -> · else if ( expr ) stmt, --
elifclause -> · else if ( expr ) stmt, break
elifclause -> · else if ( expr ) stmt, return
elifclause -> · else if ( expr ) stmt, delete
elifclause -> · else if ( expr ) stmt, while
elifclause -> · else if ( expr ) stmt, for
elifclause -> · else if ( expr ) stmt, if
stmt -> if ( expr ) stmt elifclauselist · elseclause, }
elifclauselist -> elifclauselist · elifclause, }
elseclause -> ·, }
elseclause -> · else stmt, }
elifclause -> · else if ( expr ) stmt, }
stmt -> if ( expr ) stmt elifclauselist · elseclause, &&
stmt -> if ( expr ) stmt elifclauselist · elseclause, ||
stmt -> if ( expr ) stmt elifclauselist · elseclause, +
stmt -> if ( expr ) stmt elifclauselist · elseclause, -
stmt -> if ( expr ) stmt elifclauselist · elseclause, *
stmt -> if ( expr ) stmt elifclauselist · elseclause, /
stmt -> if ( expr ) stmt elifclauselist · elseclause, %
stmt -> if ( expr ) stmt elifclauselist · elseclause, !
elifclauselist -> elifclauselist · elifclause, &&
elifclauselist -> elifclauselist · elifclause, ||
elifclauselist -> elifclauselist · elifclause, +
elifclauselist -> elifclauselist · elifclause, -
elifclauselist -> elifclauselist · elifclause, *
elifclauselist -> elifclauselist · elifclause, /
elifclauselist -> elifclauselist · elifclause, %
elifclauselist -> elifclauselist · elifclause, !
elseclause -> ·, &&
elseclause -> · else stmt, &&
elseclause -> ·, ||
elseclause -> · else stmt, ||
elseclause -> ·, +
elseclause -> · else stmt, +
elseclause -> ·, -
elseclause -> · else stmt, -
elseclause -> ·, *
elseclause -> · else stmt, *
elseclause -> ·, /
elseclause -> · else stmt, /
elseclause -> ·, %
elseclause -> · else stmt, %
elseclause -> ·, !
elseclause -> · else stmt, !
elifclause -> · else if ( expr ) stmt, &&
elifclause -> · else if ( expr ) stmt, ||
elifclause -> · else if ( expr ) stmt, +
elifclause -> · else if ( expr ) stmt, -
elifclause -> · else if ( expr ) stmt, *
elifclause -> · else if ( expr ) stmt, /
elifclause -> · else if ( expr ) stmt, %
elifclause -> · else if ( expr ) stmt, !
stmt -> if ( expr ) stmt elifclauselist · elseclause, else
elseclause -> ·, else
elseclause -> · else stmt, else
***EndSet***
***EndState***
***State***
247
I_1266_1410_1493_1630_1658_1706_1718
***Set***
declstmt -> type operator ID ( params ) · { statements }, $
declstmt -> type operator ID ( params ) · { statements }, namespace
declstmt -> type operator ID ( params ) · { statements }, {
declstmt -> type operator ID ( params ) · { statements }, ID
declstmt -> type operator ID ( params ) · { statements }, void
declstmt -> type operator ID ( params ) · { statements }, bool
declstmt -> type operator ID ( params ) · { statements }, int
declstmt -> type operator ID ( params ) · { statements }, long
declstmt -> type operator ID ( params ) · { statements }, float
declstmt -> type operator ID ( params ) · { statements }, double
declstmt -> type operator ID ( params ) · { statements }, char
declstmt -> type operator ID ( params ) · { statements }, string
declstmt -> type operator ID ( params ) · { statements }, var
declstmt -> type operator ID ( params ) · { statements }, own
declstmt -> type operator ID ( params ) · { statements }, bor
declstmt -> type operator ID ( params ) · { statements }, const
declstmt -> type operator ID ( params ) · { statements }, extern
declstmt -> type operator ID ( params ) · { statements }, class
declstmt -> type operator ID ( params ) · { statements }, (
declstmt -> type operator ID ( params ) · { statements }, this
declstmt -> type operator ID ( params ) · { statements }, new
declstmt -> type operator ID ( params ) · { statements }, LITBOOL
declstmt -> type operator ID ( params ) · { statements }, LITINT
declstmt -> type operator ID ( params ) · { statements }, LITLONG
declstmt -> type operator ID ( params ) · { statements }, LITFLOAT
declstmt -> type operator ID ( params ) · { statements }, LITDOUBLE
declstmt -> type operator ID ( params ) · { statements }, LITCHAR
declstmt -> type operator ID ( params ) · { statements }, LITSTRING
declstmt -> type operator ID ( params ) · { statements }, null
declstmt -> type operator ID ( params ) · { statements }, ++
declstmt -> type operator ID ( params ) · { statements }, --
declstmt -> type operator ID ( params ) · { statements }, break
declstmt -> type operator ID ( params ) · { statements }, return
declstmt -> type operator ID ( params ) · { statements }, delete
declstmt -> type operator ID ( params ) · { statements }, while
declstmt -> type operator ID ( params ) · { statements }, for
declstmt -> type operator ID ( params ) · { statements }, if
declstmt -> type operator ID ( params ) · { statements }, }
declstmt -> type operator ID ( params ) · { statements }, &&
declstmt -> type operator ID ( params ) · { statements }, ||
declstmt -> type operator ID ( params ) · { statements }, +
declstmt -> type operator ID ( params ) · { statements }, -
declstmt -> type operator ID ( params ) · { statements }, *
declstmt -> type operator ID ( params ) · { statements }, /
declstmt -> type operator ID ( params ) · { statements }, %
declstmt -> type operator ID ( params ) · { statements }, !
declstmt -> type operator ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
248
I_1267
***Set***
params -> own type ID ·, )
params -> own type ID ·, ,
***EndSet***
***EndState***
***State***
249
I_1268
***Set***
params -> bor type ID ·, )
params -> bor type ID ·, ,
***EndSet***
***EndState***
***State***
250
I_1271_1440_1441_1442_1548_1549
***Set***
params -> params , type · ID, )
params -> params , type · ID, ,
params -> params , own type · ID, )
params -> params , own type · ID, ,
params -> params , bor type · ID, )
params -> params , bor type · ID, ,
params -> params , type ID ·, )
params -> params , type ID ·, ,
params -> params , own type ID ·, )
params -> params , own type ID ·, ,
params -> params , bor type ID ·, )
params -> params , bor type ID ·, ,
***EndSet***
***EndState***
***State***
251
I_1272_1411_1494_1631_1659_1707_1719
***Set***
declstmt -> type ID ( params ) { · statements }, $
declstmt -> type ID ( params ) { · statements }, namespace
declstmt -> type ID ( params ) { · statements }, {
declstmt -> type ID ( params ) { · statements }, ID
declstmt -> type ID ( params ) { · statements }, void
declstmt -> type ID ( params ) { · statements }, bool
declstmt -> type ID ( params ) { · statements }, int
declstmt -> type ID ( params ) { · statements }, long
declstmt -> type ID ( params ) { · statements }, float
declstmt -> type ID ( params ) { · statements }, double
declstmt -> type ID ( params ) { · statements }, char
declstmt -> type ID ( params ) { · statements }, string
declstmt -> type ID ( params ) { · statements }, var
declstmt -> type ID ( params ) { · statements }, own
declstmt -> type ID ( params ) { · statements }, bor
declstmt -> type ID ( params ) { · statements }, const
declstmt -> type ID ( params ) { · statements }, extern
declstmt -> type ID ( params ) { · statements }, class
declstmt -> type ID ( params ) { · statements }, (
declstmt -> type ID ( params ) { · statements }, this
declstmt -> type ID ( params ) { · statements }, new
declstmt -> type ID ( params ) { · statements }, LITBOOL
declstmt -> type ID ( params ) { · statements }, LITINT
declstmt -> type ID ( params ) { · statements }, LITLONG
declstmt -> type ID ( params ) { · statements }, LITFLOAT
declstmt -> type ID ( params ) { · statements }, LITDOUBLE
declstmt -> type ID ( params ) { · statements }, LITCHAR
declstmt -> type ID ( params ) { · statements }, LITSTRING
declstmt -> type ID ( params ) { · statements }, null
declstmt -> type ID ( params ) { · statements }, ++
declstmt -> type ID ( params ) { · statements }, --
declstmt -> type ID ( params ) { · statements }, break
declstmt -> type ID ( params ) { · statements }, return
declstmt -> type ID ( params ) { · statements }, delete
declstmt -> type ID ( params ) { · statements }, while
declstmt -> type ID ( params ) { · statements }, for
declstmt -> type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { · statements }, }
declstmt -> type ID ( params ) { · statements }, &&
declstmt -> type ID ( params ) { · statements }, ||
declstmt -> type ID ( params ) { · statements }, +
declstmt -> type ID ( params ) { · statements }, -
declstmt -> type ID ( params ) { · statements }, *
declstmt -> type ID ( params ) { · statements }, /
declstmt -> type ID ( params ) { · statements }, %
declstmt -> type ID ( params ) { · statements }, !
declstmt -> type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
252
I_1273_1511_1566_1674_1691_1726_1734
***Set***
declstmt -> extern type ID ( params ) ; ·, $
declstmt -> extern type ID ( params ) ; ·, namespace
declstmt -> extern type ID ( params ) ; ·, {
declstmt -> extern type ID ( params ) ; ·, ID
declstmt -> extern type ID ( params ) ; ·, void
declstmt -> extern type ID ( params ) ; ·, bool
declstmt -> extern type ID ( params ) ; ·, int
declstmt -> extern type ID ( params ) ; ·, long
declstmt -> extern type ID ( params ) ; ·, float
declstmt -> extern type ID ( params ) ; ·, double
declstmt -> extern type ID ( params ) ; ·, char
declstmt -> extern type ID ( params ) ; ·, string
declstmt -> extern type ID ( params ) ; ·, var
declstmt -> extern type ID ( params ) ; ·, own
declstmt -> extern type ID ( params ) ; ·, bor
declstmt -> extern type ID ( params ) ; ·, const
declstmt -> extern type ID ( params ) ; ·, extern
declstmt -> extern type ID ( params ) ; ·, class
declstmt -> extern type ID ( params ) ; ·, (
declstmt -> extern type ID ( params ) ; ·, this
declstmt -> extern type ID ( params ) ; ·, new
declstmt -> extern type ID ( params ) ; ·, LITBOOL
declstmt -> extern type ID ( params ) ; ·, LITINT
declstmt -> extern type ID ( params ) ; ·, LITLONG
declstmt -> extern type ID ( params ) ; ·, LITFLOAT
declstmt -> extern type ID ( params ) ; ·, LITDOUBLE
declstmt -> extern type ID ( params ) ; ·, LITCHAR
declstmt -> extern type ID ( params ) ; ·, LITSTRING
declstmt -> extern type ID ( params ) ; ·, null
declstmt -> extern type ID ( params ) ; ·, ++
declstmt -> extern type ID ( params ) ; ·, --
declstmt -> extern type ID ( params ) ; ·, break
declstmt -> extern type ID ( params ) ; ·, return
declstmt -> extern type ID ( params ) ; ·, delete
declstmt -> extern type ID ( params ) ; ·, while
declstmt -> extern type ID ( params ) ; ·, for
declstmt -> extern type ID ( params ) ; ·, if
declstmt -> extern type ID ( params ) ; ·, }
declstmt -> extern type ID ( params ) ; ·, &&
declstmt -> extern type ID ( params ) ; ·, ||
declstmt -> extern type ID ( params ) ; ·, +
declstmt -> extern type ID ( params ) ; ·, -
declstmt -> extern type ID ( params ) ; ·, *
declstmt -> extern type ID ( params ) ; ·, /
declstmt -> extern type ID ( params ) ; ·, %
declstmt -> extern type ID ( params ) ; ·, !
declstmt -> extern type ID ( params ) ; ·, else
***EndSet***
***EndState***
***State***
253
I_1349_1512_1567_1692_1727_1735
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, $
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, {
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, void
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, int
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, long
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, float
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, double
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, char
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, string
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, var
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, own
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bor
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, const
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, class
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, (
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, this
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, new
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, null
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, --
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, break
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, return
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, while
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, for
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, +
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, -
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, *
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, /
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, %
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · own type ID = expr ;, else
declstmt -> · bor type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
254
I_1366_1525_1580_1693_1728_1736
***Set***
elseclause -> else · stmt, $
elseclause -> else · stmt, namespace
elseclause -> else · stmt, {
elseclause -> else · stmt, ID
elseclause -> else · stmt, void
elseclause -> else · stmt, bool
elseclause -> else · stmt, int
elseclause -> else · stmt, long
elseclause -> else · stmt, float
elseclause -> else · stmt, double
elseclause -> else · stmt, char
elseclause -> else · stmt, string
elseclause -> else · stmt, var
elseclause -> else · stmt, own
elseclause -> else · stmt, bor
elseclause -> else · stmt, const
elseclause -> else · stmt, extern
elseclause -> else · stmt, class
elseclause -> else · stmt, (
elseclause -> else · stmt, this
elseclause -> else · stmt, new
elseclause -> else · stmt, LITBOOL
elseclause -> else · stmt, LITINT
elseclause -> else · stmt, LITLONG
elseclause -> else · stmt, LITFLOAT
elseclause -> else · stmt, LITDOUBLE
elseclause -> else · stmt, LITCHAR
elseclause -> else · stmt, LITSTRING
elseclause -> else · stmt, null
elseclause -> else · stmt, ++
elseclause -> else · stmt, --
elseclause -> else · stmt, break
elseclause -> else · stmt, return
elseclause -> else · stmt, delete
elseclause -> else · stmt, while
elseclause -> else · stmt, for
elseclause -> else · stmt, if
elifclause -> else · if ( expr ) stmt, else
elifclause -> else · if ( expr ) stmt, $
elifclause -> else · if ( expr ) stmt, namespace
elifclause -> else · if ( expr ) stmt, {
elifclause -> else · if ( expr ) stmt, ID
elifclause -> else · if ( expr ) stmt, void
elifclause -> else · if ( expr ) stmt, bool
elifclause -> else · if ( expr ) stmt, int
elifclause -> else · if ( expr ) stmt, long
elifclause -> else · if ( expr ) stmt, float
elifclause -> else · if ( expr ) stmt, double
elifclause -> else · if ( expr ) stmt, char
elifclause -> else · if ( expr ) stmt, string
elifclause -> else · if ( expr ) stmt, var
elifclause -> else · if ( expr ) stmt, own
elifclause -> else · if ( expr ) stmt, bor
elifclause -> else · if ( expr ) stmt, const
elifclause -> else · if ( expr ) stmt, extern
elifclause -> else · if ( expr ) stmt, class
elifclause -> else · if ( expr ) stmt, (
elifclause -> else · if ( expr ) stmt, this
elifclause -> else · if ( expr ) stmt, new
elifclause -> else · if ( expr ) stmt, LITBOOL
elifclause -> else · if ( expr ) stmt, LITINT
elifclause -> else · if ( expr ) stmt, LITLONG
elifclause -> else · if ( expr ) stmt, LITFLOAT
elifclause -> else · if ( expr ) stmt, LITDOUBLE
elifclause -> else · if ( expr ) stmt, LITCHAR
elifclause -> else · if ( expr ) stmt, LITSTRING
elifclause -> else · if ( expr ) stmt, null
elifclause -> else · if ( expr ) stmt, ++
elifclause -> else · if ( expr ) stmt, --
elifclause -> else · if ( expr ) stmt, break
elifclause -> else · if ( expr ) stmt, return
elifclause -> else · if ( expr ) stmt, delete
elifclause -> else · if ( expr ) stmt, while
elifclause -> else · if ( expr ) stmt, for
elifclause -> else · if ( expr ) stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elseclause -> else · stmt, }
elifclause -> else · if ( expr ) stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elseclause -> else · stmt, &&
elseclause -> else · stmt, ||
elseclause -> else · stmt, +
elseclause -> else · stmt, -
elseclause -> else · stmt, *
elseclause -> else · stmt, /
elseclause -> else · stmt, %
elseclause -> else · stmt, !
elifclause -> else · if ( expr ) stmt, &&
elifclause -> else · if ( expr ) stmt, ||
elifclause -> else · if ( expr ) stmt, +
elifclause -> else · if ( expr ) stmt, -
elifclause -> else · if ( expr ) stmt, *
elifclause -> else · if ( expr ) stmt, /
elifclause -> else · if ( expr ) stmt, %
elifclause -> else · if ( expr ) stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
elseclause -> else · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · own type ID = expr ;, else
declstmt -> · bor type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
255
I_1367_1526_1581
***Set***
elifclauselist -> elifclauselist elifclause ·, else
elifclauselist -> elifclauselist elifclause ·, $
elifclauselist -> elifclauselist elifclause ·, namespace
elifclauselist -> elifclauselist elifclause ·, {
elifclauselist -> elifclauselist elifclause ·, ID
elifclauselist -> elifclauselist elifclause ·, void
elifclauselist -> elifclauselist elifclause ·, bool
elifclauselist -> elifclauselist elifclause ·, int
elifclauselist -> elifclauselist elifclause ·, long
elifclauselist -> elifclauselist elifclause ·, float
elifclauselist -> elifclauselist elifclause ·, double
elifclauselist -> elifclauselist elifclause ·, char
elifclauselist -> elifclauselist elifclause ·, string
elifclauselist -> elifclauselist elifclause ·, var
elifclauselist -> elifclauselist elifclause ·, own
elifclauselist -> elifclauselist elifclause ·, bor
elifclauselist -> elifclauselist elifclause ·, const
elifclauselist -> elifclauselist elifclause ·, extern
elifclauselist -> elifclauselist elifclause ·, class
elifclauselist -> elifclauselist elifclause ·, (
elifclauselist -> elifclauselist elifclause ·, this
elifclauselist -> elifclauselist elifclause ·, new
elifclauselist -> elifclauselist elifclause ·, LITBOOL
elifclauselist -> elifclauselist elifclause ·, LITINT
elifclauselist -> elifclauselist elifclause ·, LITLONG
elifclauselist -> elifclauselist elifclause ·, LITFLOAT
elifclauselist -> elifclauselist elifclause ·, LITDOUBLE
elifclauselist -> elifclauselist elifclause ·, LITCHAR
elifclauselist -> elifclauselist elifclause ·, LITSTRING
elifclauselist -> elifclauselist elifclause ·, null
elifclauselist -> elifclauselist elifclause ·, ++
elifclauselist -> elifclauselist elifclause ·, --
elifclauselist -> elifclauselist elifclause ·, break
elifclauselist -> elifclauselist elifclause ·, return
elifclauselist -> elifclauselist elifclause ·, delete
elifclauselist -> elifclauselist elifclause ·, while
elifclauselist -> elifclauselist elifclause ·, for
elifclauselist -> elifclauselist elifclause ·, if
elifclauselist -> elifclauselist elifclause ·, }
elifclauselist -> elifclauselist elifclause ·, &&
elifclauselist -> elifclauselist elifclause ·, ||
elifclauselist -> elifclauselist elifclause ·, +
elifclauselist -> elifclauselist elifclause ·, -
elifclauselist -> elifclauselist elifclause ·, *
elifclauselist -> elifclauselist elifclause ·, /
elifclauselist -> elifclauselist elifclause ·, %
elifclauselist -> elifclauselist elifclause ·, !
***EndSet***
***EndState***
***State***
256
I_1368_1527_1582_1694_1729_1737
***Set***
stmt -> if ( expr ) stmt elifclauselist elseclause ·, $
stmt -> if ( expr ) stmt elifclauselist elseclause ·, namespace
stmt -> if ( expr ) stmt elifclauselist elseclause ·, {
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ID
stmt -> if ( expr ) stmt elifclauselist elseclause ·, void
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bool
stmt -> if ( expr ) stmt elifclauselist elseclause ·, int
stmt -> if ( expr ) stmt elifclauselist elseclause ·, long
stmt -> if ( expr ) stmt elifclauselist elseclause ·, float
stmt -> if ( expr ) stmt elifclauselist elseclause ·, double
stmt -> if ( expr ) stmt elifclauselist elseclause ·, char
stmt -> if ( expr ) stmt elifclauselist elseclause ·, string
stmt -> if ( expr ) stmt elifclauselist elseclause ·, var
stmt -> if ( expr ) stmt elifclauselist elseclause ·, own
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bor
stmt -> if ( expr ) stmt elifclauselist elseclause ·, const
stmt -> if ( expr ) stmt elifclauselist elseclause ·, extern
stmt -> if ( expr ) stmt elifclauselist elseclause ·, class
stmt -> if ( expr ) stmt elifclauselist elseclause ·, (
stmt -> if ( expr ) stmt elifclauselist elseclause ·, this
stmt -> if ( expr ) stmt elifclauselist elseclause ·, new
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITBOOL
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITINT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITLONG
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITCHAR
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITSTRING
stmt -> if ( expr ) stmt elifclauselist elseclause ·, null
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ++
stmt -> if ( expr ) stmt elifclauselist elseclause ·, --
stmt -> if ( expr ) stmt elifclauselist elseclause ·, break
stmt -> if ( expr ) stmt elifclauselist elseclause ·, return
stmt -> if ( expr ) stmt elifclauselist elseclause ·, delete
stmt -> if ( expr ) stmt elifclauselist elseclause ·, while
stmt -> if ( expr ) stmt elifclauselist elseclause ·, for
stmt -> if ( expr ) stmt elifclauselist elseclause ·, if
stmt -> if ( expr ) stmt elifclauselist elseclause ·, }
stmt -> if ( expr ) stmt elifclauselist elseclause ·, &&
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ||
stmt -> if ( expr ) stmt elifclauselist elseclause ·, +
stmt -> if ( expr ) stmt elifclauselist elseclause ·, -
stmt -> if ( expr ) stmt elifclauselist elseclause ·, *
stmt -> if ( expr ) stmt elifclauselist elseclause ·, /
stmt -> if ( expr ) stmt elifclauselist elseclause ·, %
stmt -> if ( expr ) stmt elifclauselist elseclause ·, !
stmt -> if ( expr ) stmt elifclauselist elseclause ·, else
***EndSet***
***EndState***
***State***
257
I_1439_1531_1590_1675_1696_1731_1739
***Set***
declstmt -> type operator ID ( params ) { · statements }, $
declstmt -> type operator ID ( params ) { · statements }, namespace
declstmt -> type operator ID ( params ) { · statements }, {
declstmt -> type operator ID ( params ) { · statements }, ID
declstmt -> type operator ID ( params ) { · statements }, void
declstmt -> type operator ID ( params ) { · statements }, bool
declstmt -> type operator ID ( params ) { · statements }, int
declstmt -> type operator ID ( params ) { · statements }, long
declstmt -> type operator ID ( params ) { · statements }, float
declstmt -> type operator ID ( params ) { · statements }, double
declstmt -> type operator ID ( params ) { · statements }, char
declstmt -> type operator ID ( params ) { · statements }, string
declstmt -> type operator ID ( params ) { · statements }, var
declstmt -> type operator ID ( params ) { · statements }, own
declstmt -> type operator ID ( params ) { · statements }, bor
declstmt -> type operator ID ( params ) { · statements }, const
declstmt -> type operator ID ( params ) { · statements }, extern
declstmt -> type operator ID ( params ) { · statements }, class
declstmt -> type operator ID ( params ) { · statements }, (
declstmt -> type operator ID ( params ) { · statements }, this
declstmt -> type operator ID ( params ) { · statements }, new
declstmt -> type operator ID ( params ) { · statements }, LITBOOL
declstmt -> type operator ID ( params ) { · statements }, LITINT
declstmt -> type operator ID ( params ) { · statements }, LITLONG
declstmt -> type operator ID ( params ) { · statements }, LITFLOAT
declstmt -> type operator ID ( params ) { · statements }, LITDOUBLE
declstmt -> type operator ID ( params ) { · statements }, LITCHAR
declstmt -> type operator ID ( params ) { · statements }, LITSTRING
declstmt -> type operator ID ( params ) { · statements }, null
declstmt -> type operator ID ( params ) { · statements }, ++
declstmt -> type operator ID ( params ) { · statements }, --
declstmt -> type operator ID ( params ) { · statements }, break
declstmt -> type operator ID ( params ) { · statements }, return
declstmt -> type operator ID ( params ) { · statements }, delete
declstmt -> type operator ID ( params ) { · statements }, while
declstmt -> type operator ID ( params ) { · statements }, for
declstmt -> type operator ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, long
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, var
statements -> · statements stmt, own
statements -> · statements stmt, bor
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITLONG
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, long
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, var
statements -> · stmt, own
statements -> · stmt, bor
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITLONG
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, long
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, var
statements -> ·, own
statements -> ·, bor
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITLONG
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type operator ID ( params ) { · statements }, }
declstmt -> type operator ID ( params ) { · statements }, &&
declstmt -> type operator ID ( params ) { · statements }, ||
declstmt -> type operator ID ( params ) { · statements }, +
declstmt -> type operator ID ( params ) { · statements }, -
declstmt -> type operator ID ( params ) { · statements }, *
declstmt -> type operator ID ( params ) { · statements }, /
declstmt -> type operator ID ( params ) { · statements }, %
declstmt -> type operator ID ( params ) { · statements }, !
declstmt -> type operator ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
258
I_1443_1532_1591_1676_1697_1732_1740
***Set***
declstmt -> type ID ( params ) { statements · }, $
declstmt -> type ID ( params ) { statements · }, namespace
declstmt -> type ID ( params ) { statements · }, {
declstmt -> type ID ( params ) { statements · }, ID
declstmt -> type ID ( params ) { statements · }, void
declstmt -> type ID ( params ) { statements · }, bool
declstmt -> type ID ( params ) { statements · }, int
declstmt -> type ID ( params ) { statements · }, long
declstmt -> type ID ( params ) { statements · }, float
declstmt -> type ID ( params ) { statements · }, double
declstmt -> type ID ( params ) { statements · }, char
declstmt -> type ID ( params ) { statements · }, string
declstmt -> type ID ( params ) { statements · }, var
declstmt -> type ID ( params ) { statements · }, own
declstmt -> type ID ( params ) { statements · }, bor
declstmt -> type ID ( params ) { statements · }, const
declstmt -> type ID ( params ) { statements · }, extern
declstmt -> type ID ( params ) { statements · }, class
declstmt -> type ID ( params ) { statements · }, (
declstmt -> type ID ( params ) { statements · }, this
declstmt -> type ID ( params ) { statements · }, new
declstmt -> type ID ( params ) { statements · }, LITBOOL
declstmt -> type ID ( params ) { statements · }, LITINT
declstmt -> type ID ( params ) { statements · }, LITLONG
declstmt -> type ID ( params ) { statements · }, LITFLOAT
declstmt -> type ID ( params ) { statements · }, LITDOUBLE
declstmt -> type ID ( params ) { statements · }, LITCHAR
declstmt -> type ID ( params ) { statements · }, LITSTRING
declstmt -> type ID ( params ) { statements · }, null
declstmt -> type ID ( params ) { statements · }, ++
declstmt -> type ID ( params ) { statements · }, --
declstmt -> type ID ( params ) { statements · }, break
declstmt -> type ID ( params ) { statements · }, return
declstmt -> type ID ( params ) { statements · }, delete
declstmt -> type ID ( params ) { statements · }, while
declstmt -> type ID ( params ) { statements · }, for
declstmt -> type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { statements · }, }
declstmt -> type ID ( params ) { statements · }, &&
declstmt -> type ID ( params ) { statements · }, ||
declstmt -> type ID ( params ) { statements · }, +
declstmt -> type ID ( params ) { statements · }, -
declstmt -> type ID ( params ) { statements · }, *
declstmt -> type ID ( params ) { statements · }, /
declstmt -> type ID ( params ) { statements · }, %
declstmt -> type ID ( params ) { statements · }, !
declstmt -> type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
259
I_1491_1605_1633_1720_1743_1749
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, $
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, {
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ID
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, void
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bool
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, int
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, long
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, float
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, double
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, char
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, string
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, var
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, own
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bor
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, const
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, extern
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, class
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, (
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, this
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, new
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITLONG
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, null
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ++
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, --
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, break
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, return
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, delete
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, while
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, for
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, if
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, }
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, &&
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ||
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, +
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, -
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, *
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, /
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, %
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, !
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, else
***EndSet***
***EndState***
***State***
260
I_1504_1615_1643_1721_1744_1750
***Set***
elifclause -> else if · ( expr ) stmt, else
elifclause -> else if · ( expr ) stmt, $
elifclause -> else if · ( expr ) stmt, namespace
elifclause -> else if · ( expr ) stmt, {
elifclause -> else if · ( expr ) stmt, ID
elifclause -> else if · ( expr ) stmt, void
elifclause -> else if · ( expr ) stmt, bool
elifclause -> else if · ( expr ) stmt, int
elifclause -> else if · ( expr ) stmt, long
elifclause -> else if · ( expr ) stmt, float
elifclause -> else if · ( expr ) stmt, double
elifclause -> else if · ( expr ) stmt, char
elifclause -> else if · ( expr ) stmt, string
elifclause -> else if · ( expr ) stmt, var
elifclause -> else if · ( expr ) stmt, own
elifclause -> else if · ( expr ) stmt, bor
elifclause -> else if · ( expr ) stmt, const
elifclause -> else if · ( expr ) stmt, extern
elifclause -> else if · ( expr ) stmt, class
elifclause -> else if · ( expr ) stmt, (
elifclause -> else if · ( expr ) stmt, this
elifclause -> else if · ( expr ) stmt, new
elifclause -> else if · ( expr ) stmt, LITBOOL
elifclause -> else if · ( expr ) stmt, LITINT
elifclause -> else if · ( expr ) stmt, LITLONG
elifclause -> else if · ( expr ) stmt, LITFLOAT
elifclause -> else if · ( expr ) stmt, LITDOUBLE
elifclause -> else if · ( expr ) stmt, LITCHAR
elifclause -> else if · ( expr ) stmt, LITSTRING
elifclause -> else if · ( expr ) stmt, null
elifclause -> else if · ( expr ) stmt, ++
elifclause -> else if · ( expr ) stmt, --
elifclause -> else if · ( expr ) stmt, break
elifclause -> else if · ( expr ) stmt, return
elifclause -> else if · ( expr ) stmt, delete
elifclause -> else if · ( expr ) stmt, while
elifclause -> else if · ( expr ) stmt, for
elifclause -> else if · ( expr ) stmt, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, long
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, var
stmt -> if · ( expr ) stmt elifclauselist elseclause, own
stmt -> if · ( expr ) stmt elifclauselist elseclause, bor
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
elifclause -> else if · ( expr ) stmt, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
elifclause -> else if · ( expr ) stmt, &&
elifclause -> else if · ( expr ) stmt, ||
elifclause -> else if · ( expr ) stmt, +
elifclause -> else if · ( expr ) stmt, -
elifclause -> else if · ( expr ) stmt, *
elifclause -> else if · ( expr ) stmt, /
elifclause -> else if · ( expr ) stmt, %
elifclause -> else if · ( expr ) stmt, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
261
I_1505_1616_1644_1722_1745_1751
***Set***
elseclause -> else stmt ·, $
elseclause -> else stmt ·, namespace
elseclause -> else stmt ·, {
elseclause -> else stmt ·, ID
elseclause -> else stmt ·, void
elseclause -> else stmt ·, bool
elseclause -> else stmt ·, int
elseclause -> else stmt ·, long
elseclause -> else stmt ·, float
elseclause -> else stmt ·, double
elseclause -> else stmt ·, char
elseclause -> else stmt ·, string
elseclause -> else stmt ·, var
elseclause -> else stmt ·, own
elseclause -> else stmt ·, bor
elseclause -> else stmt ·, const
elseclause -> else stmt ·, extern
elseclause -> else stmt ·, class
elseclause -> else stmt ·, (
elseclause -> else stmt ·, this
elseclause -> else stmt ·, new
elseclause -> else stmt ·, LITBOOL
elseclause -> else stmt ·, LITINT
elseclause -> else stmt ·, LITLONG
elseclause -> else stmt ·, LITFLOAT
elseclause -> else stmt ·, LITDOUBLE
elseclause -> else stmt ·, LITCHAR
elseclause -> else stmt ·, LITSTRING
elseclause -> else stmt ·, null
elseclause -> else stmt ·, ++
elseclause -> else stmt ·, --
elseclause -> else stmt ·, break
elseclause -> else stmt ·, return
elseclause -> else stmt ·, delete
elseclause -> else stmt ·, while
elseclause -> else stmt ·, for
elseclause -> else stmt ·, if
elseclause -> else stmt ·, }
elseclause -> else stmt ·, &&
elseclause -> else stmt ·, ||
elseclause -> else stmt ·, +
elseclause -> else stmt ·, -
elseclause -> else stmt ·, *
elseclause -> else stmt ·, /
elseclause -> else stmt ·, %
elseclause -> else stmt ·, !
elseclause -> else stmt ·, else
***EndSet***
***EndState***
***State***
262
I_1547_1620_1648_1708_1724_1747_1753
***Set***
declstmt -> type operator ID ( params ) { statements · }, $
declstmt -> type operator ID ( params ) { statements · }, namespace
declstmt -> type operator ID ( params ) { statements · }, {
declstmt -> type operator ID ( params ) { statements · }, ID
declstmt -> type operator ID ( params ) { statements · }, void
declstmt -> type operator ID ( params ) { statements · }, bool
declstmt -> type operator ID ( params ) { statements · }, int
declstmt -> type operator ID ( params ) { statements · }, long
declstmt -> type operator ID ( params ) { statements · }, float
declstmt -> type operator ID ( params ) { statements · }, double
declstmt -> type operator ID ( params ) { statements · }, char
declstmt -> type operator ID ( params ) { statements · }, string
declstmt -> type operator ID ( params ) { statements · }, var
declstmt -> type operator ID ( params ) { statements · }, own
declstmt -> type operator ID ( params ) { statements · }, bor
declstmt -> type operator ID ( params ) { statements · }, const
declstmt -> type operator ID ( params ) { statements · }, extern
declstmt -> type operator ID ( params ) { statements · }, class
declstmt -> type operator ID ( params ) { statements · }, (
declstmt -> type operator ID ( params ) { statements · }, this
declstmt -> type operator ID ( params ) { statements · }, new
declstmt -> type operator ID ( params ) { statements · }, LITBOOL
declstmt -> type operator ID ( params ) { statements · }, LITINT
declstmt -> type operator ID ( params ) { statements · }, LITLONG
declstmt -> type operator ID ( params ) { statements · }, LITFLOAT
declstmt -> type operator ID ( params ) { statements · }, LITDOUBLE
declstmt -> type operator ID ( params ) { statements · }, LITCHAR
declstmt -> type operator ID ( params ) { statements · }, LITSTRING
declstmt -> type operator ID ( params ) { statements · }, null
declstmt -> type operator ID ( params ) { statements · }, ++
declstmt -> type operator ID ( params ) { statements · }, --
declstmt -> type operator ID ( params ) { statements · }, break
declstmt -> type operator ID ( params ) { statements · }, return
declstmt -> type operator ID ( params ) { statements · }, delete
declstmt -> type operator ID ( params ) { statements · }, while
declstmt -> type operator ID ( params ) { statements · }, for
declstmt -> type operator ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, long
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, var
statements -> statements · stmt, own
statements -> statements · stmt, bor
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITLONG
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type operator ID ( params ) { statements · }, }
declstmt -> type operator ID ( params ) { statements · }, &&
declstmt -> type operator ID ( params ) { statements · }, ||
declstmt -> type operator ID ( params ) { statements · }, +
declstmt -> type operator ID ( params ) { statements · }, -
declstmt -> type operator ID ( params ) { statements · }, *
declstmt -> type operator ID ( params ) { statements · }, /
declstmt -> type operator ID ( params ) { statements · }, %
declstmt -> type operator ID ( params ) { statements · }, !
declstmt -> type operator ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
263
I_1550_1621_1649_1709_1725_1748_1754
***Set***
declstmt -> type ID ( params ) { statements } ·, $
declstmt -> type ID ( params ) { statements } ·, namespace
declstmt -> type ID ( params ) { statements } ·, {
declstmt -> type ID ( params ) { statements } ·, ID
declstmt -> type ID ( params ) { statements } ·, void
declstmt -> type ID ( params ) { statements } ·, bool
declstmt -> type ID ( params ) { statements } ·, int
declstmt -> type ID ( params ) { statements } ·, long
declstmt -> type ID ( params ) { statements } ·, float
declstmt -> type ID ( params ) { statements } ·, double
declstmt -> type ID ( params ) { statements } ·, char
declstmt -> type ID ( params ) { statements } ·, string
declstmt -> type ID ( params ) { statements } ·, var
declstmt -> type ID ( params ) { statements } ·, own
declstmt -> type ID ( params ) { statements } ·, bor
declstmt -> type ID ( params ) { statements } ·, const
declstmt -> type ID ( params ) { statements } ·, extern
declstmt -> type ID ( params ) { statements } ·, class
declstmt -> type ID ( params ) { statements } ·, (
declstmt -> type ID ( params ) { statements } ·, this
declstmt -> type ID ( params ) { statements } ·, new
declstmt -> type ID ( params ) { statements } ·, LITBOOL
declstmt -> type ID ( params ) { statements } ·, LITINT
declstmt -> type ID ( params ) { statements } ·, LITLONG
declstmt -> type ID ( params ) { statements } ·, LITFLOAT
declstmt -> type ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type ID ( params ) { statements } ·, LITCHAR
declstmt -> type ID ( params ) { statements } ·, LITSTRING
declstmt -> type ID ( params ) { statements } ·, null
declstmt -> type ID ( params ) { statements } ·, ++
declstmt -> type ID ( params ) { statements } ·, --
declstmt -> type ID ( params ) { statements } ·, break
declstmt -> type ID ( params ) { statements } ·, return
declstmt -> type ID ( params ) { statements } ·, delete
declstmt -> type ID ( params ) { statements } ·, while
declstmt -> type ID ( params ) { statements } ·, for
declstmt -> type ID ( params ) { statements } ·, if
declstmt -> type ID ( params ) { statements } ·, }
declstmt -> type ID ( params ) { statements } ·, &&
declstmt -> type ID ( params ) { statements } ·, ||
declstmt -> type ID ( params ) { statements } ·, +
declstmt -> type ID ( params ) { statements } ·, -
declstmt -> type ID ( params ) { statements } ·, *
declstmt -> type ID ( params ) { statements } ·, /
declstmt -> type ID ( params ) { statements } ·, %
declstmt -> type ID ( params ) { statements } ·, !
declstmt -> type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
264
I_1601_1669_1686_1741_1756_1758
***Set***
elifclause -> else if ( · expr ) stmt, else
elifclause -> else if ( · expr ) stmt, $
elifclause -> else if ( · expr ) stmt, namespace
elifclause -> else if ( · expr ) stmt, {
elifclause -> else if ( · expr ) stmt, ID
elifclause -> else if ( · expr ) stmt, void
elifclause -> else if ( · expr ) stmt, bool
elifclause -> else if ( · expr ) stmt, int
elifclause -> else if ( · expr ) stmt, long
elifclause -> else if ( · expr ) stmt, float
elifclause -> else if ( · expr ) stmt, double
elifclause -> else if ( · expr ) stmt, char
elifclause -> else if ( · expr ) stmt, string
elifclause -> else if ( · expr ) stmt, var
elifclause -> else if ( · expr ) stmt, own
elifclause -> else if ( · expr ) stmt, bor
elifclause -> else if ( · expr ) stmt, const
elifclause -> else if ( · expr ) stmt, extern
elifclause -> else if ( · expr ) stmt, class
elifclause -> else if ( · expr ) stmt, (
elifclause -> else if ( · expr ) stmt, this
elifclause -> else if ( · expr ) stmt, new
elifclause -> else if ( · expr ) stmt, LITBOOL
elifclause -> else if ( · expr ) stmt, LITINT
elifclause -> else if ( · expr ) stmt, LITLONG
elifclause -> else if ( · expr ) stmt, LITFLOAT
elifclause -> else if ( · expr ) stmt, LITDOUBLE
elifclause -> else if ( · expr ) stmt, LITCHAR
elifclause -> else if ( · expr ) stmt, LITSTRING
elifclause -> else if ( · expr ) stmt, null
elifclause -> else if ( · expr ) stmt, ++
elifclause -> else if ( · expr ) stmt, --
elifclause -> else if ( · expr ) stmt, break
elifclause -> else if ( · expr ) stmt, return
elifclause -> else if ( · expr ) stmt, delete
elifclause -> else if ( · expr ) stmt, while
elifclause -> else if ( · expr ) stmt, for
elifclause -> else if ( · expr ) stmt, if
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, long
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, var
stmt -> if ( · expr ) stmt elifclauselist elseclause, own
stmt -> if ( · expr ) stmt elifclauselist elseclause, bor
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITLONG, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITLONG, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITLONG, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITLONG, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITLONG, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITLONG, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITLONG, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITLONG, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITLONG, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITLONG, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITLONG, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITLONG, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITLONG, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITLONG, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
elifclause -> else if ( · expr ) stmt, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
elifclause -> else if ( · expr ) stmt, &&
elifclause -> else if ( · expr ) stmt, ||
elifclause -> else if ( · expr ) stmt, +
elifclause -> else if ( · expr ) stmt, -
elifclause -> else if ( · expr ) stmt, *
elifclause -> else if ( · expr ) stmt, /
elifclause -> else if ( · expr ) stmt, %
elifclause -> else if ( · expr ) stmt, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
265
I_1624_1673_1690_1733_1742_1757_1759
***Set***
declstmt -> type operator ID ( params ) { statements } ·, $
declstmt -> type operator ID ( params ) { statements } ·, namespace
declstmt -> type operator ID ( params ) { statements } ·, {
declstmt -> type operator ID ( params ) { statements } ·, ID
declstmt -> type operator ID ( params ) { statements } ·, void
declstmt -> type operator ID ( params ) { statements } ·, bool
declstmt -> type operator ID ( params ) { statements } ·, int
declstmt -> type operator ID ( params ) { statements } ·, long
declstmt -> type operator ID ( params ) { statements } ·, float
declstmt -> type operator ID ( params ) { statements } ·, double
declstmt -> type operator ID ( params ) { statements } ·, char
declstmt -> type operator ID ( params ) { statements } ·, string
declstmt -> type operator ID ( params ) { statements } ·, var
declstmt -> type operator ID ( params ) { statements } ·, own
declstmt -> type operator ID ( params ) { statements } ·, bor
declstmt -> type operator ID ( params ) { statements } ·, const
declstmt -> type operator ID ( params ) { statements } ·, extern
declstmt -> type operator ID ( params ) { statements } ·, class
declstmt -> type operator ID ( params ) { statements } ·, (
declstmt -> type operator ID ( params ) { statements } ·, this
declstmt -> type operator ID ( params ) { statements } ·, new
declstmt -> type operator ID ( params ) { statements } ·, LITBOOL
declstmt -> type operator ID ( params ) { statements } ·, LITINT
declstmt -> type operator ID ( params ) { statements } ·, LITLONG
declstmt -> type operator ID ( params ) { statements } ·, LITFLOAT
declstmt -> type operator ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type operator ID ( params ) { statements } ·, LITCHAR
declstmt -> type operator ID ( params ) { statements } ·, LITSTRING
declstmt -> type operator ID ( params ) { statements } ·, null
declstmt -> type operator ID ( params ) { statements } ·, ++
declstmt -> type operator ID ( params ) { statements } ·, --
declstmt -> type operator ID ( params ) { statements } ·, break
declstmt -> type operator ID ( params ) { statements } ·, return
declstmt -> type operator ID ( params ) { statements } ·, delete
declstmt -> type operator ID ( params ) { statements } ·, while
declstmt -> type operator ID ( params ) { statements } ·, for
declstmt -> type operator ID ( params ) { statements } ·, if
declstmt -> type operator ID ( params ) { statements } ·, }
declstmt -> type operator ID ( params ) { statements } ·, &&
declstmt -> type operator ID ( params ) { statements } ·, ||
declstmt -> type operator ID ( params ) { statements } ·, +
declstmt -> type operator ID ( params ) { statements } ·, -
declstmt -> type operator ID ( params ) { statements } ·, *
declstmt -> type operator ID ( params ) { statements } ·, /
declstmt -> type operator ID ( params ) { statements } ·, %
declstmt -> type operator ID ( params ) { statements } ·, !
declstmt -> type operator ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
266
I_1657_1705_1717_1755_1761_1762
***Set***
elifclause -> else if ( expr · ) stmt, else
elifclause -> else if ( expr · ) stmt, $
elifclause -> else if ( expr · ) stmt, namespace
elifclause -> else if ( expr · ) stmt, {
elifclause -> else if ( expr · ) stmt, ID
elifclause -> else if ( expr · ) stmt, void
elifclause -> else if ( expr · ) stmt, bool
elifclause -> else if ( expr · ) stmt, int
elifclause -> else if ( expr · ) stmt, long
elifclause -> else if ( expr · ) stmt, float
elifclause -> else if ( expr · ) stmt, double
elifclause -> else if ( expr · ) stmt, char
elifclause -> else if ( expr · ) stmt, string
elifclause -> else if ( expr · ) stmt, var
elifclause -> else if ( expr · ) stmt, own
elifclause -> else if ( expr · ) stmt, bor
elifclause -> else if ( expr · ) stmt, const
elifclause -> else if ( expr · ) stmt, extern
elifclause -> else if ( expr · ) stmt, class
elifclause -> else if ( expr · ) stmt, (
elifclause -> else if ( expr · ) stmt, this
elifclause -> else if ( expr · ) stmt, new
elifclause -> else if ( expr · ) stmt, LITBOOL
elifclause -> else if ( expr · ) stmt, LITINT
elifclause -> else if ( expr · ) stmt, LITLONG
elifclause -> else if ( expr · ) stmt, LITFLOAT
elifclause -> else if ( expr · ) stmt, LITDOUBLE
elifclause -> else if ( expr · ) stmt, LITCHAR
elifclause -> else if ( expr · ) stmt, LITSTRING
elifclause -> else if ( expr · ) stmt, null
elifclause -> else if ( expr · ) stmt, ++
elifclause -> else if ( expr · ) stmt, --
elifclause -> else if ( expr · ) stmt, break
elifclause -> else if ( expr · ) stmt, return
elifclause -> else if ( expr · ) stmt, delete
elifclause -> else if ( expr · ) stmt, while
elifclause -> else if ( expr · ) stmt, for
elifclause -> else if ( expr · ) stmt, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, long
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, var
stmt -> if ( expr · ) stmt elifclauselist elseclause, own
stmt -> if ( expr · ) stmt elifclauselist elseclause, bor
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
elifclause -> else if ( expr · ) stmt, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
elifclause -> else if ( expr · ) stmt, &&
elifclause -> else if ( expr · ) stmt, ||
elifclause -> else if ( expr · ) stmt, +
elifclause -> else if ( expr · ) stmt, -
elifclause -> else if ( expr · ) stmt, *
elifclause -> else if ( expr · ) stmt, /
elifclause -> else if ( expr · ) stmt, %
elifclause -> else if ( expr · ) stmt, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
267
I_1695_1730_1738_1760_1764_1765
***Set***
elifclause -> else if ( expr ) · stmt, else
elifclause -> else if ( expr ) · stmt, $
elifclause -> else if ( expr ) · stmt, namespace
elifclause -> else if ( expr ) · stmt, {
elifclause -> else if ( expr ) · stmt, ID
elifclause -> else if ( expr ) · stmt, void
elifclause -> else if ( expr ) · stmt, bool
elifclause -> else if ( expr ) · stmt, int
elifclause -> else if ( expr ) · stmt, long
elifclause -> else if ( expr ) · stmt, float
elifclause -> else if ( expr ) · stmt, double
elifclause -> else if ( expr ) · stmt, char
elifclause -> else if ( expr ) · stmt, string
elifclause -> else if ( expr ) · stmt, var
elifclause -> else if ( expr ) · stmt, own
elifclause -> else if ( expr ) · stmt, bor
elifclause -> else if ( expr ) · stmt, const
elifclause -> else if ( expr ) · stmt, extern
elifclause -> else if ( expr ) · stmt, class
elifclause -> else if ( expr ) · stmt, (
elifclause -> else if ( expr ) · stmt, this
elifclause -> else if ( expr ) · stmt, new
elifclause -> else if ( expr ) · stmt, LITBOOL
elifclause -> else if ( expr ) · stmt, LITINT
elifclause -> else if ( expr ) · stmt, LITLONG
elifclause -> else if ( expr ) · stmt, LITFLOAT
elifclause -> else if ( expr ) · stmt, LITDOUBLE
elifclause -> else if ( expr ) · stmt, LITCHAR
elifclause -> else if ( expr ) · stmt, LITSTRING
elifclause -> else if ( expr ) · stmt, null
elifclause -> else if ( expr ) · stmt, ++
elifclause -> else if ( expr ) · stmt, --
elifclause -> else if ( expr ) · stmt, break
elifclause -> else if ( expr ) · stmt, return
elifclause -> else if ( expr ) · stmt, delete
elifclause -> else if ( expr ) · stmt, while
elifclause -> else if ( expr ) · stmt, for
elifclause -> else if ( expr ) · stmt, if
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, long
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, var
stmt -> if ( expr ) · stmt elifclauselist elseclause, own
stmt -> if ( expr ) · stmt elifclauselist elseclause, bor
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITLONG
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, long
stmt -> · statementblock, long
stmt -> · declstmt, long
stmt -> · stmtexpr ;, long
stmt -> · break ;, long
stmt -> · return expr ;, long
stmt -> · return ;, long
stmt -> · delete expr ;, long
stmt -> · while ( expr ) stmt, long
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, long
stmt -> · if ( expr ) stmt elifclauselist elseclause, long
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, var
stmt -> · statementblock, var
stmt -> · declstmt, var
stmt -> · stmtexpr ;, var
stmt -> · break ;, var
stmt -> · return expr ;, var
stmt -> · return ;, var
stmt -> · delete expr ;, var
stmt -> · while ( expr ) stmt, var
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, var
stmt -> · if ( expr ) stmt elifclauselist elseclause, var
stmt -> · namespaceblock, own
stmt -> · statementblock, own
stmt -> · declstmt, own
stmt -> · stmtexpr ;, own
stmt -> · break ;, own
stmt -> · return expr ;, own
stmt -> · return ;, own
stmt -> · delete expr ;, own
stmt -> · while ( expr ) stmt, own
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, own
stmt -> · if ( expr ) stmt elifclauselist elseclause, own
stmt -> · namespaceblock, bor
stmt -> · statementblock, bor
stmt -> · declstmt, bor
stmt -> · stmtexpr ;, bor
stmt -> · break ;, bor
stmt -> · return expr ;, bor
stmt -> · return ;, bor
stmt -> · delete expr ;, bor
stmt -> · while ( expr ) stmt, bor
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bor
stmt -> · if ( expr ) stmt elifclauselist elseclause, bor
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITLONG
stmt -> · statementblock, LITLONG
stmt -> · declstmt, LITLONG
stmt -> · stmtexpr ;, LITLONG
stmt -> · break ;, LITLONG
stmt -> · return expr ;, LITLONG
stmt -> · return ;, LITLONG
stmt -> · delete expr ;, LITLONG
stmt -> · while ( expr ) stmt, LITLONG
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITLONG
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITLONG
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · own type ID = expr ;, else
declstmt -> · bor type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · type operator ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · own type ID = expr ;, $
declstmt -> · bor type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · type operator ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · own type ID = expr ;, namespace
declstmt -> · bor type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · type operator ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · own type ID = expr ;, {
declstmt -> · bor type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · type operator ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · own type ID = expr ;, ID
declstmt -> · bor type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · type operator ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · own type ID = expr ;, void
declstmt -> · bor type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · type operator ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · own type ID = expr ;, bool
declstmt -> · bor type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · type operator ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · own type ID = expr ;, int
declstmt -> · bor type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · type operator ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, long
statementblock -> · { statements }, long
declstmt -> · type ID = expr ;, long
declstmt -> · own type ID = expr ;, long
declstmt -> · bor type ID = expr ;, long
declstmt -> · const type ID = lit ;, long
declstmt -> · type ID ( params ) { statements }, long
declstmt -> · type operator ID ( params ) { statements }, long
declstmt -> · extern type ID ( params ) ;, long
declstmt -> · class ID inherit { declstatements }, long
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · own type ID = expr ;, float
declstmt -> · bor type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · type operator ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · own type ID = expr ;, double
declstmt -> · bor type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · type operator ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · own type ID = expr ;, char
declstmt -> · bor type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · type operator ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · own type ID = expr ;, string
declstmt -> · bor type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · type operator ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, var
statementblock -> · { statements }, var
declstmt -> · type ID = expr ;, var
declstmt -> · own type ID = expr ;, var
declstmt -> · bor type ID = expr ;, var
declstmt -> · const type ID = lit ;, var
declstmt -> · type ID ( params ) { statements }, var
declstmt -> · type operator ID ( params ) { statements }, var
declstmt -> · extern type ID ( params ) ;, var
declstmt -> · class ID inherit { declstatements }, var
namespaceblock -> · namespace ID { statements }, own
statementblock -> · { statements }, own
declstmt -> · type ID = expr ;, own
declstmt -> · own type ID = expr ;, own
declstmt -> · bor type ID = expr ;, own
declstmt -> · const type ID = lit ;, own
declstmt -> · type ID ( params ) { statements }, own
declstmt -> · type operator ID ( params ) { statements }, own
declstmt -> · extern type ID ( params ) ;, own
declstmt -> · class ID inherit { declstatements }, own
namespaceblock -> · namespace ID { statements }, bor
statementblock -> · { statements }, bor
declstmt -> · type ID = expr ;, bor
declstmt -> · own type ID = expr ;, bor
declstmt -> · bor type ID = expr ;, bor
declstmt -> · const type ID = lit ;, bor
declstmt -> · type ID ( params ) { statements }, bor
declstmt -> · type operator ID ( params ) { statements }, bor
declstmt -> · extern type ID ( params ) ;, bor
declstmt -> · class ID inherit { declstatements }, bor
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · own type ID = expr ;, const
declstmt -> · bor type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · type operator ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · own type ID = expr ;, extern
declstmt -> · bor type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · type operator ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · own type ID = expr ;, class
declstmt -> · bor type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · type operator ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · own type ID = expr ;, (
declstmt -> · bor type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · type operator ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · own type ID = expr ;, this
declstmt -> · bor type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · type operator ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · own type ID = expr ;, new
declstmt -> · bor type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · type operator ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · own type ID = expr ;, LITBOOL
declstmt -> · bor type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · type operator ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · own type ID = expr ;, LITINT
declstmt -> · bor type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · type operator ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITLONG
statementblock -> · { statements }, LITLONG
declstmt -> · type ID = expr ;, LITLONG
declstmt -> · own type ID = expr ;, LITLONG
declstmt -> · bor type ID = expr ;, LITLONG
declstmt -> · const type ID = lit ;, LITLONG
declstmt -> · type ID ( params ) { statements }, LITLONG
declstmt -> · type operator ID ( params ) { statements }, LITLONG
declstmt -> · extern type ID ( params ) ;, LITLONG
declstmt -> · class ID inherit { declstatements }, LITLONG
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · own type ID = expr ;, LITFLOAT
declstmt -> · bor type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · type operator ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · own type ID = expr ;, LITDOUBLE
declstmt -> · bor type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · type operator ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · own type ID = expr ;, LITCHAR
declstmt -> · bor type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · type operator ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · own type ID = expr ;, LITSTRING
declstmt -> · bor type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · type operator ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · own type ID = expr ;, null
declstmt -> · bor type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · type operator ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · own type ID = expr ;, ++
declstmt -> · bor type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · type operator ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · own type ID = expr ;, --
declstmt -> · bor type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · type operator ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · own type ID = expr ;, break
declstmt -> · bor type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · type operator ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · own type ID = expr ;, return
declstmt -> · bor type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · type operator ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · own type ID = expr ;, delete
declstmt -> · bor type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · type operator ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · own type ID = expr ;, while
declstmt -> · bor type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · type operator ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · own type ID = expr ;, for
declstmt -> · bor type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · type operator ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · own type ID = expr ;, if
declstmt -> · bor type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · type operator ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
type -> · var, ID
type -> · arrtype, operator
type -> · stype, operator
type -> · var, operator
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
arrtype -> · stypeBracket, operator
stype -> · primitive, operator
stype -> · ID, operator
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · long, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
stypeBracket -> · idBracket, operator
stypeBracket -> · primitiveBracket, operator
primitive -> · void, operator
primitive -> · bool, operator
primitive -> · int, operator
primitive -> · long, operator
primitive -> · float, operator
primitive -> · double, operator
primitive -> · char, operator
primitive -> · string, operator
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], operator
primitiveBracket -> · primitive [ optidx ], operator
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITLONG, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · long, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elifclause -> else if ( expr ) · stmt, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · own type ID = expr ;, }
declstmt -> · bor type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · type operator ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elifclause -> else if ( expr ) · stmt, &&
elifclause -> else if ( expr ) · stmt, ||
elifclause -> else if ( expr ) · stmt, +
elifclause -> else if ( expr ) · stmt, -
elifclause -> else if ( expr ) · stmt, *
elifclause -> else if ( expr ) · stmt, /
elifclause -> else if ( expr ) · stmt, %
elifclause -> else if ( expr ) · stmt, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · own type ID = expr ;, &&
declstmt -> · bor type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · type operator ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · own type ID = expr ;, ||
declstmt -> · bor type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · type operator ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · own type ID = expr ;, +
declstmt -> · bor type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · type operator ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · own type ID = expr ;, -
declstmt -> · bor type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · type operator ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · own type ID = expr ;, *
declstmt -> · bor type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · type operator ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · own type ID = expr ;, /
declstmt -> · bor type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · type operator ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · own type ID = expr ;, %
declstmt -> · bor type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · type operator ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · own type ID = expr ;, !
declstmt -> · bor type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · type operator ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
268
I_1723_1746_1752_1763_1766_1767
***Set***
elifclause -> else if ( expr ) stmt ·, else
elifclause -> else if ( expr ) stmt ·, $
elifclause -> else if ( expr ) stmt ·, namespace
elifclause -> else if ( expr ) stmt ·, {
elifclause -> else if ( expr ) stmt ·, ID
elifclause -> else if ( expr ) stmt ·, void
elifclause -> else if ( expr ) stmt ·, bool
elifclause -> else if ( expr ) stmt ·, int
elifclause -> else if ( expr ) stmt ·, long
elifclause -> else if ( expr ) stmt ·, float
elifclause -> else if ( expr ) stmt ·, double
elifclause -> else if ( expr ) stmt ·, char
elifclause -> else if ( expr ) stmt ·, string
elifclause -> else if ( expr ) stmt ·, var
elifclause -> else if ( expr ) stmt ·, own
elifclause -> else if ( expr ) stmt ·, bor
elifclause -> else if ( expr ) stmt ·, const
elifclause -> else if ( expr ) stmt ·, extern
elifclause -> else if ( expr ) stmt ·, class
elifclause -> else if ( expr ) stmt ·, (
elifclause -> else if ( expr ) stmt ·, this
elifclause -> else if ( expr ) stmt ·, new
elifclause -> else if ( expr ) stmt ·, LITBOOL
elifclause -> else if ( expr ) stmt ·, LITINT
elifclause -> else if ( expr ) stmt ·, LITLONG
elifclause -> else if ( expr ) stmt ·, LITFLOAT
elifclause -> else if ( expr ) stmt ·, LITDOUBLE
elifclause -> else if ( expr ) stmt ·, LITCHAR
elifclause -> else if ( expr ) stmt ·, LITSTRING
elifclause -> else if ( expr ) stmt ·, null
elifclause -> else if ( expr ) stmt ·, ++
elifclause -> else if ( expr ) stmt ·, --
elifclause -> else if ( expr ) stmt ·, break
elifclause -> else if ( expr ) stmt ·, return
elifclause -> else if ( expr ) stmt ·, delete
elifclause -> else if ( expr ) stmt ·, while
elifclause -> else if ( expr ) stmt ·, for
elifclause -> else if ( expr ) stmt ·, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, long
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, var
stmt -> if ( expr ) stmt · elifclauselist elseclause, own
stmt -> if ( expr ) stmt · elifclauselist elseclause, bor
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITLONG
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, long
elifclauselist -> · elifclauselist elifclause, long
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, var
elifclauselist -> · elifclauselist elifclause, var
elifclauselist -> ·, own
elifclauselist -> · elifclauselist elifclause, own
elifclauselist -> ·, bor
elifclauselist -> · elifclauselist elifclause, bor
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITLONG
elifclauselist -> · elifclauselist elifclause, LITLONG
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
elifclause -> else if ( expr ) stmt ·, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
elifclause -> else if ( expr ) stmt ·, &&
elifclause -> else if ( expr ) stmt ·, ||
elifclause -> else if ( expr ) stmt ·, +
elifclause -> else if ( expr ) stmt ·, -
elifclause -> else if ( expr ) stmt ·, *
elifclause -> else if ( expr ) stmt ·, /
elifclause -> else if ( expr ) stmt ·, %
elifclause -> else if ( expr ) stmt ·, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***Table***
ACTION_TABLE
0
r4,r4,r4,r4,r4,,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,r4,,,r4,r4,r4,r4,r4,,r4,r4,r4,r4,,,,r4,,,,,,,,r4,r4,,,,,,,,,,,,,,,,,,r4,r4,r4,r4,r4,r4,r4,r4,r4
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s5,,,,,,,,,,,,,,,,,,,,
2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,acc
3
s1,r8,r8,r8,r8,,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,r8,,,r8,r8,r8,r8,r8,,r8,r8,r8,r8,,,,r8,,,,,,,,r8,r8,,,,,,,,,,,,,,,,,,r8,r8,r8,r8,r8,r8,r8,r8,r8
4
r3,r3,r3,r3,r3,,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,r3,,,r3,r3,r3,r3,r3,,r3,r3,r3,r3,,,,r3,,,,,,,,r3,r3,,,,,,,,,,,,,,,,,,r3,r3,r3,r3,r3,r3,r3,r3,r3
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s10,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s11,
7
r2,r2,r2,r2,r2,,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,r2,,,r2,r2,r2,r2,r2,,r2,r2,r2,r2,,,,r2,,,,,,,,r2,r2,,,,,,,,,,,,,,,,,,r2,r2,r2,r2,r2,r2,r2,r2,r2
8
,s6,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,r12
9
,r7,r7,r7,r7,,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,r7,,,r7,r7,r7,r7,r7,,r7,r7,r7,r7,,,,r7,,,,,,,,r7,r7,,,,,,,,,,,,,,,,,,r7,r7,r7,r7,r7,r7,r7,r7,r7
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s72,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,,,,,s73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s74,
13
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
14
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
15
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
16
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
17
,,,,,r53,,,,,,,,,,,,,,,,,,,,,,,,,,r53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r53,
18
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s81,
19
,,,,,r57,,,,,,,,,,,,,,,,,,,,,,,,,,r57,r57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r57,
20
,,,,,r58,,,,,,,,,,,,,,,,,,,,,,,,,,r58,r58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r58,
21
,,,,,r59,,,,,,,,,,,,,,,,,,,,,,,,,,r59,r59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r59,
22
,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,,r60,r60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r60,
23
,,,,,r61,,,,,,,,,,,,,,,,,,,,,,,,,,r61,r61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r61,
24
,,,,,r62,,,,,,,,,,,,,,,,,,,,,,,,,,r62,r62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r62,
25
,,,,,r63,,,,,,,,,,,,,,,,,,,,,,,,,,r63,r63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r63,
26
,,,,,r64,,,,,,,,,,,,,,,,,,,,,,,,,,r64,r64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r64,
27
,,,,,,,,,,,,,,,,,,,r122,r122,,,,,,,,,,,r122,,r122,,,,,,,,,,,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,,,,r122,,,,,,,,,
28
,,,,,,,,,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s82,
29
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
30
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33
,,,,,,,,,,,,,,,,,,,,s105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34
,,,,,,,,,,,,,,,,,,s27,,s106,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
35
,,,,,,,,,,,,,,,,,,,r96,r96,,,,,,,,,,,r96,,r96,,,,,,,,,,,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,,,,r96,,,,,,,,,
36
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
37
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
38
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s110,
39
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s111,
40
,,,,,,,,,,,,,,,,,,,r115,r115,,,,,,,,,,,r115,,r115,,,,,,,,,,,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,,,,r115,,,,,,,,,
41
,,,,,,,,,,,,,,,,,,,r116,r116,,,,,,,,,,,r116,,r116,,,,,,,,,,,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,,,,r116,,,,,,,,,
42
,,,,,,,,,,,,,,,,,,,r117,r117,,,,,,,,,,,r117,,r117,,,,,,,,,,,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,,,,r117,,,,,,,,,
43
,,,,,,,,,,,,,,,,,,,r118,r118,,,,,,,,,,,r118,,r118,,,,,,,,,,,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,,,,r118,,,,,,,,,
44
,,,,,,,,,,,,,,,,,,,r119,r119,,,,,,,,,,,r119,,r119,,,,,,,,,,,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,,,,r119,,,,,,,,,
45
,,,,,,,,,,,,,,,,,,,r120,r120,,,,,,,,,,,r120,,r120,,,,,,,,,,,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,,,,r120,,,,,,,,,
46
,,,,,,,,,,,,,,,,,,,r121,r121,,,,,,,,,,,r121,,r121,,,,,,,,,,,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,,,,r121,,,,,,,,,
47
,,,,,r56,,,,,,,,,,,,,,,,,,,,,,,,,s112,r56,s113,,,,r48,r48,r48,r48,r48,r48,s114,s115,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,,,r95,,,,,,,,r56,
48
,r6,r6,r6,r6,,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,r6,,,r6,r6,r6,r6,r6,,r6,r6,r6,r6,,,,r6,,,,,,,,r6,r6,,,,,,,,,,,,,,,,,,r6,r6,r6,r6,r6,r6,r6,r6,r6
49
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,r1
50
,,r18,r18,r18,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,,,,,,,r18,r18,,,,,,,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,r18,r18,r18,r18,r18,r18,r18
51
,,r19,r19,r19,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,,,,,,,r19,r19,,,,,,,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,r19,r19,r19,r19,r19,r19,r19
52
,,r11,r11,r11,,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,r11,,,r11,r11,r11,r11,r11,,r11,r11,r11,r11,,,,r11,r11,,,,,,,r11,r11,,,,,,,,,,,,,,,,,,r11,r11,r11,r11,r11,r11,r11,r11,r11
53
,,r20,r20,r20,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,,,,,,,r20,r20,,,,,,,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,r20,r20,r20,r20,r20,r20,r20
54
,,,,,,,,,,,,,,,,,,,,s117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
55
,,,,,,,,,,,,,,,,,,,,r67,,,,,,,,,,,r67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
56
,,,,,,,,,,,,,,,,,,,,r68,,,,,,,,,,,r68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r99,,,,,,,,,
57
,,,,,,,,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,,,,r50,r50,r50,r50,r50,r50,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,,,r98,,,,,,,,,
58
,,,,,,,,,,,,,,,,,,,,r70,,,,,,,,,,,r70,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r100,,,,,,,,,
59
,,,,,,,,,,,,,,,,,,,r101,r101,,,,,,,,,,,r101,,r101,,,,,,,,,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,,,r101,,,,,,,,,
60
,,,,,,,,,,,,,,,,,,,,r69,,,,,,,,,,,r69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
61
,,,,,s118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s119,
62
,,,,,r52,,,,,,,,,,,,,,,,,,,,,,,,,,r52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r52,
63
,,,,,r51,,,,,,,,,,,,,,,,,,,,,,,,,,r51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r51,
64
,,,,,r55,,,,,,,,,,,,,,,,,,,,,,,,,,r55,s120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,
65
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s121,,,,,,,,,
66
,,,,,,,,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,r102,,,,,,,,,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,,,r102,,,,,,,,,
67
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s122,s123,s124,s125,s126,s127,,,,,,,,,,,,,,,,,,,,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,r97,r97,,,,,,,,,,s128,r97,s129,,,,r49,r49,r49,r49,r49,r49,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,,,r97,,,,,,,,,
69
,,,,,r54,,,,,,,,,,,,,,,,,,,,,,,,,,r54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r54,
70
,,,,,r133,,,,,,,,,,,,,,,,,,,,,,,,,,r133,,,,,r109,r109,r109,r109,r109,r109,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,,,r109,,,,,,,,r133,
71
,,,,,r134,,,,,,,,,,,,,,r134,r134,,,,,,,,,,,r134,,r134,,,,,,,,,,,r134,r134,r134,r134,r134,r134,r134,r134,r134,r134,r134,r134,r134,,,,r134,,,,,,,,r134,
72
r5,r5,r5,r5,r5,,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,r5,,,r5,r5,r5,r5,r5,,r5,r5,r5,r5,,,,r5,,,,,,,,r5,r5,,,,,,,,,,,,,,,,,,r5,r5,r5,r5,r5,r5,r5,r5,r5
73
,r9,r9,r9,r9,,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,r9,,,r9,r9,r9,r9,r9,,r9,r9,r9,r9,,,,r9,,,,,,,,r9,r9,,,,,,,,,,,,,,,,,,r9,r9,r9,r9,r9,r9,r9,r9,r9
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
75
,,,,,r56,,,,,,,,,,,,,,,,,,,,,,,,,,,s113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,
76
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s131,
77
,,,,,r133,,,,,,,,,,,,,,r133,r133,,,,,,,,,,,r133,,r133,,,,,,,,,,,r133,r133,r133,r133,r133,r133,r133,r133,r133,r133,r133,r133,r133,,,,r133,,,,,,,,r133,
78
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s132,
79
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s133,
80
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s134,
81
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r140,,,,,,,,,,,,,,,,,,,,,,,,s135,,,,,,,,,,,
82
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s137,,s113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
84
,,,,,,,,,,,,,,,,,,,r112,r112,,,,,,,,,,,r112,,r112,,,,,,,,,,,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,,,,r112,,,,,,,,,
85
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s47,
86
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
87
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
88
,,,,,,,,,,,,,,,,,,,r95,r95,,,,,,,,,,s112,r95,s113,,,,r48,r48,r48,r48,r48,r48,s114,s115,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,,,r95,,,,,,,,,
89
,,,,,,,,,,,,,,,,,,,r65,r65,,,,,,,,,,,r65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
90
,,,,,,,,,,,,,,,,,,,r99,r99,,,,,,,,,,,r99,,r99,,,,,,,,,,,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,,,r99,,,,,,,,,
91
,,,,,,,,,,,,,,,,,,,r100,r100,,,,,,,,,,,r100,,r100,,,,,,,,,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,,,r100,,,,,,,,,
92
,,,,,,,,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,r89,,,,,,,,,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,,,,,,,,,,,,
93
,,,,,,,,,,,,,,,,,,,,s144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
94
,,,,,,,,,,,,,,,,,,,r66,r66,,,,,,,,,,,r66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,r71,r71,,,,,,,,,,,r71,,,,,,,,,,,,,,,,,,,,,,,,s145,s146,,,,,,,,,,,,,
96
,,,,,,,,,,,,,,,,,,,r72,r72,,,,,,,,,,,r72,,,,,,,,,,,,,s147,s148,s149,s150,s151,s152,s153,s154,,,,,,,,,,,,,,,,,,
97
,,,,,,,,,,,,,,,,,,,r84,r84,,,,,,,,,,,r84,,r84,,,,,,,,,,,r84,r84,r84,r84,r84,r84,r84,r84,s155,s156,s157,r84,r84,,,,,,,,,,,,,
98
,,,,,,,,,,,,,,,,,,,r81,r81,,,,,,,,,,,r81,,,,,,,,,,,,,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r81,r81,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,r93,,,,,,,,,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,,,s121,,,,,,,,,
100
,,,,,,,,,,,,,,,,,,,r92,r92,,,,,,,,,,,r92,,r92,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,,,,,,,,,,,,
101
,,,,,,,,,,,,,,,,,,,r109,r109,,,,,,,,,,,r109,,r109,,,r109,r109,r109,r109,r109,r109,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,,,r109,,,,,,,,,
102
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
103
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
104
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
105
,,r22,r22,r22,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,,,,,,,r22,r22,,,,,,,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,r22,r22,r22,r22,r22,r22,r22
106
,,r24,r24,r24,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,,,,,,,r24,r24,,,,,,,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,r24,r24,r24,r24,r24,r24,r24
107
,,,,,,,,,,,,,,,,,,,,s161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
108
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
109
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s163,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
110
,,,,,,,,,,,,,,,,,,,r104,r104,,,,,,,,,,,r104,,r104,,,,,,,,,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,,,,,,,,,,,,
111
,,,,,,,,,,,,,,,,,,,r103,r103,,,,,,,,,,,r103,,r103,,,,,,,,,,,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,,,,,,,,,,,,,
112
,,,,,,,,,,,,,,,,,,s27,r130,,s28,,,,,,,,s35,s85,r130,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
113
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,r138,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
114
,,,,,,,,,,,,,,,,,,,r106,r106,,,,,,,,,,,r106,,r106,,,,,,,,,,,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,,,,,,,,,,,,,
115
,,,,,,,,,,,,,,,,,,,r105,r105,,,,,,,,,,,r105,,r105,,,,,,,,,,,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,,,,,,,,,,,,,
116
,,r10,r10,r10,,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,r10,,,r10,r10,r10,r10,r10,,r10,r10,r10,r10,,,,r10,r10,,,,,,,r10,r10,,,,,,,,,,,,,,,,,,r10,r10,r10,r10,r10,r10,r10,r10,r10
117
,,r21,r21,r21,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,,,,,,,r21,r21,,,,,,,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,r21,r21,r21,r21,r21,r21,r21
118
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s169,
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s170,,,,,,s171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
120
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,r138,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
121
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s173,
122
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
123
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
124
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
125
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
126
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
127
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
128
,,,,,,,,,,,,,,,,,,s27,r130,,s28,,,,,,,,s35,s85,r130,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
129
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
130
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
131
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
132
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
134
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
135
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s187,
136
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
137
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
138
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
139
,,,,,,,,,,,,,,,,,,,r95,r95,,,,,,,,,,s112,r95,s113,r95,,,,,,,,,s114,s115,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,,,r95,,,,,,,,,
140
,,,,,,,,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,r98,,,,,,,,,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,,,r98,,,,,,,,,
141
,,,,,,,,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,r91,,,,,,,,,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,,,,,,,,,,,,
142
,,,,,,,,,,,,,,,,,,,r97,r97,,,,,,,,,,s128,r97,s129,r97,,,,,,,,,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,,,r97,,,,,,,,,
143
,,,,,,,,,,,,,,,,,,,r90,r90,,,,,,,,,,,r90,,r90,,,,,,,,,,,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,,,,,,,,,,,,
144
,,r25,r25,r25,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,,,,,,,r25,r25,,,,,,,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,r25,r25,r25,r25,r25,r25,r25
145
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
146
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
147
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
148
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
149
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
150
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
151
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
152
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
153
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
154
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
155
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
156
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
157
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s205,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
160
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
161
,,r23,r23,r23,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,,,,,,,r23,r23,,,,,,,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,r23,r23,r23,r23,r23,r23,r23
162
,,,,,,,,,,,,,,,,,,,r94,r94,,,,,,,,,,,r94,,r94,,,,,,,,,,,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,,,,r94,,,,,,,,,
163
,,r14,r14,r14,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,,,,,,,r14,r14,,,,,,,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,r14,r14,r14,r14,r14,r14,r14
164
,,,,,,,,,,,,,,,,,,,r131,,,,,,,,,,,,r131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,,,,,,s208,,,,,,,,,,,,s209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r137,,,,,,,,,,,,,,,,,s153,s154,,,,,,,,,,,,,,,,,,
167
,,,,,,,,,,,,,,,,,,,r88,r88,,,,,,,,,,,r88,,r88,,,,,,,,,,,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,,,,,,,,,,,,
168
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,s212,s213,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r123,,,,,,,,,,,,r123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
171
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
172
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
173
,,,,,,,,,,,,,,,,,,,r114,r114,,,,,,,,,,r114,r114,r114,r114,,,r114,r114,r114,r114,r114,r114,,,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,,,,r114,,,,,,,,,
174
,,,,,,,,,,,,,,,,,,,r42,r42,,,,,,,,,,,r42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
175
,,,,,,,,,,,,,,,,,,,r43,r43,,,,,,,,,,,r43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
176
,,,,,,,,,,,,,,,,,,,r44,r44,,,,,,,,,,,r44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
177
,,,,,,,,,,,,,,,,,,,r45,r45,,,,,,,,,,,r45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
178
,,,,,,,,,,,,,,,,,,,r46,r46,,,,,,,,,,,r46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,r47,r47,,,,,,,,,,,r47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,,,,,s208,,,,,,,,,,,,s218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s219,,,,,,,,,,,,,,,,,s153,s154,,,,,,,,,,,,,,,,,,
182
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s220,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
183
,,,,,,s212,s213,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r123,,,,,,,,,,,,r123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
184
,,,,,,,,,,,,,,,,,,s27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,,
185
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
186
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
187
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
188
,,,r17,r17,,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
189
,,,,,,,,,,,,,,,,,,,r111,r111,,,,,,,,,,,r111,,r111,,,,,,,,,,,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,,,,r111,,,,,,,,,
190
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s139,
191
,,,,,,,,,,,,,,,,,,,r74,r74,,,,,,,,,,,r74,,,,,,,,,,,,,,,,,,,,,,,,r74,r74,,,,,,,,,,,,,
192
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s147,s148,s149,s150,s151,s152,s153,s154,,,,,,,,,,,,,,,,,,
193
,,,,,,,,,,,,,,,,,,,r73,r73,,,,,,,,,,,r73,,,,,,,,,,,,,,,,,,,,,,,,r73,r73,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,,,,,r79,r79,,,,,,,,,,,r79,,,,,,,,,,,,,,,,,,,s153,s154,,,,r79,r79,,,,,,,,,,,,,
195
,,,,,,,,,,,,,,,,,,,r80,r80,,,,,,,,,,,r80,,,,,,,,,,,,,,,,,,,s153,s154,,,,r80,r80,,,,,,,,,,,,,
196
,,,,,,,,,,,,,,,,,,,r78,r78,,,,,,,,,,,r78,,,,,,,,,,,,,,,,,,,s153,s154,,,,r78,r78,,,,,,,,,,,,,
197
,,,,,,,,,,,,,,,,,,,r77,r77,,,,,,,,,,,r77,,,,,,,,,,,,,,,,,,,s153,s154,,,,r77,r77,,,,,,,,,,,,,
198
,,,,,,,,,,,,,,,,,,,r75,r75,,,,,,,,,,,r75,,,,,,,,,,,,,,,,,,,s153,s154,,,,r75,r75,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,,,,,,r76,r76,,,,,,,,,,,r76,,,,,,,,,,,,,,,,,,,s153,s154,,,,r76,r76,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,,,,r82,r82,,,,,,,,,,,r82,,r82,,,,,,,,,,,r82,r82,r82,r82,r82,r82,r82,r82,s155,s156,s157,r82,r82,,,,,,,,,,,,,
201
,,,,,,,,,,,,,,,,,,,r83,r83,,,,,,,,,,,r83,,r83,,,,,,,,,,,r83,r83,r83,r83,r83,r83,r83,r83,s155,s156,s157,r83,r83,,,,,,,,,,,,,
202
,,,,,,,,,,,,,,,,,,,r85,r85,,,,,,,,,,,r85,,r85,,,,,,,,,,,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,,,,,,,,,,,,,
203
,,,,,,,,,,,,,,,,,,,r86,r86,,,,,,,,,,,r86,,r86,,,,,,,,,,,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,,,,,,,,,,,,
204
,,,,,,,,,,,,,,,,,,,r87,r87,,,,,,,,,,,r87,,r87,,,,,,,,,,,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,,,,,,,,,,,,,
205
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
206
,,,,,,,,,,,,,,,,,,,,s229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s145,s146,,,,,,,,,,,,,
207
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
208
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
209
,,,,,,,,,,,,,,,,,,,r107,r107,,,,,,,,,,,r107,,r107,,,,,,,,,,,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,,,,r107,,,,,,,,,
210
,,,,,r135,,,,,,,,,,,,,,r135,r135,,,,,,,,,,,r135,,r135,,,r135,r135,r135,r135,r135,r135,,,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,r135,,,,r135,,,,,,,,r135,
211
,,,,,,s212,s213,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,r123,,,,,,,,,,,,r123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
212
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
213
,,,,,,,,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
214
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s235,
215
,,,,,,,,,,,,,,,,,,,s236,,,,,,,,,,,,s237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
216
,,,,,,,,,,,,,,,,,,,,s238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
217
,,,,,r136,,,,,,,,,,,,,,r136,r136,,,,,,,,,,,r136,,r136,,,,,,,,,,,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,r136,,,,r136,,,,,,,,r136,
218
,,,,,,,,,,,,,,,,,,,r108,r108,,,,,,,,,,,r108,,r108,,,,,,,,,,,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,,,,r108,,,,,,,,,
219
,,,,,,,,,,,,,,,,,,,r110,r110,,,,,,,,,,,r110,,r110,,,r110,r110,r110,r110,r110,r110,,,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,,,,r110,,,,,,,,,
220
,,r13,r13,r13,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,,,,,,,r13,r13,,,,,,,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,r13,r13,r13,r13,r13,r13,r13
221
,,,,,,,,,,,,,,,,,,,s236,,,,,,,,,,,,s239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
222
,,,,,,,,,,,,,,,,,,,,s240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
223
,,,,,,,,,,,,,,,,,,,,s241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
224
,,,,,,,,,,,,,,,,,,,,s242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
225
,,,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,s243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
226
,,,r16,r16,,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,r16,,,,,,,,,,,,,,,,,,r16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r16,
227
,,,,,,,,,,,,,,,,,,,r113,r113,,,,,,,,,,,r113,,r113,,,,,,,,,,,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,,,,,,,,,,,,,
228
,,r26,r26,r26,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,,,,,,,r26,r26,,,,,,,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,r26,r26,r26,r26,r26,r26,r26
229
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s36,,,,,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s88,
230
,,r37,r37,r37,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,,,,,,,r37,r37,,,,,,,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,r37,r37,r37,r37,r37,r37,r37
231
,,,,,,,,,,,,,,,,,,,r132,,,,,,,,,,,,r132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
232
,,,,,,,,,,,,,,,,,,,s236,,,,,,,,,,,,s247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
233
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s248,
234
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s249,
235
,,,,,,,,,,,,,,,,,,,r124,,,,,,,,,,,,r124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
236
,,,,,,s236,s236,s17,,s19,s20,s21,s22,s23,s24,s25,s26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
237
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
238
,,r29,r29,r29,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,,,,,,,r29,r29,,,,,,,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,r29,r29,r29,r29,r29,r29,r29
239
,,,,,,,,,,,,,,,,,,,,s252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
240
,,r32,r32,r32,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,,,,,,,r32,r32,,,,,,,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,r32,r32,r32,r32,r32,r32,r32
241
,,r30,r30,r30,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,,,,,,,r30,r30,,,,,,,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,r30,r30,r30,r30,r30,r30,r30
242
,,r31,r31,r31,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,,,,,,,r31,r31,,,,,,,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,r31,r31,r31,r31,r31,r31,r31
243
,,r36,r36,r36,,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,,,,,,,r36,r36,,,,,,,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,r36,r36,r36,r36,r36,r36,r36
244
,,,r15,r15,,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,r15,,,,,,,,,,,,,,,,,,r15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r15,
245
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
246
,,r40,r40,r40,,r40,r40,r40,r40,r40,r40,r40,r40,r40,r40,r40,r40,r40,,,r40,r40,r40,r40,r40,s254,r40,r40,r40,r40,,,,r40,r40,,,,,,,r40,r40,,,,,,,r40,r40,r40,r40,r40,r40,r40,r40,,,,r40,r40,r40,r40,r40,r40,r40,r40,r40
247
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
248
,,,,,,,,,,,,,,,,,,,r125,,,,,,,,,,,,r125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
249
,,,,,,,,,,,,,,,,,,,r126,,,,,,,,,,,,r126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
250
,,,,,,,,,,,,,,,,,,,r127,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s250,
251
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
252
,,r35,r35,r35,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,,,,,,,r35,r35,,,,,,,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,r35,r35,r35,r35,r35,r35,r35
253
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
254
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s260,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
255
,,r38,r38,r38,,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,,,,,,,r38,r38,,,,,,,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,r38,r38,r38,r38,r38,r38,r38
256
,,r28,r28,r28,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,,,,,,,r28,r28,,,,,,,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,r28,r28,r28,r28,r28,r28,r28
257
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12,
258
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s263,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
259
,,r27,r27,r27,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,,,,,,,r27,r27,,,,,,,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,r27,r27,r27,r27,r27,r27,r27
260
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
261
,,r41,r41,r41,,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,,,r41,r41,r41,r41,r41,r41,r41,r41,r41,r41,,,,r41,r41,,,,,,,r41,r41,,,,,,,r41,r41,r41,r41,r41,r41,r41,r41,,,,r41,r41,r41,r41,r41,r41,r41,r41,r41
262
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,s265,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
263
,,r33,r33,r33,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,,,,,,,r33,r33,,,,,,,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,r33,r33,r33,r33,r33,r33,r33
264
,,,,,,,,,,,,,,,,,,s27,,,s28,,,,,,,,s35,s85,,,,,,,,,,,,s38,s39,,,,,,,,s86,,,,,,s87,,,,s40,s41,s42,s43,s44,s45,s46,s88,
265
,,r34,r34,r34,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,,,,,,,r34,r34,,,,,,,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,r34,r34,r34,r34,r34,r34,r34
266
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
267
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,,,s28,s29,s30,s31,s32,,s33,s34,s35,s36,,,,s37,,,,,,,,s38,s39,,,,,,,,,,,,,,,,,,s40,s41,s42,s43,s44,s45,s46,s47,
268
,,r39,r39,r39,,r39,r39,r39,r39,r39,r39,r39,r39,r39,r39,r39,r39,r39,,,r39,r39,r39,r39,r39,r39,r39,r39,r39,r39,,,,r39,r39,,,,,,,r39,r39,,,,,,,r39,r39,r39,r39,r39,r39,r39,r39,,,,r39,r39,r39,r39,r39,r39,r39,r39,r39
GOTO_TABLE
0
1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3
1,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8
,6,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,48,49,50,51,,52,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,,,,,73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,76,62,63,64,,,,,,,,,,,,,,69,77,71,,,
14
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,78,62,63,64,,,,,,,,,,,,,,69,77,71,,,
15
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,79,62,63,64,,,,,,,,,,,,,,69,77,71,,,
16
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,80,62,63,64,,,,,,,,,,,,,,69,77,71,,,
18
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,83,,,,,,,,,,,,,,84,77,71,,,
29
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,93,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
30
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33
,,,,,,,,,,,,,,,,,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34
,,,,,,,,,,,,,,,,,,27,,106,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,107,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
36
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,108,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
37
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,109,50,51,,52,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
38
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
47
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
49
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
54
,,,,,,,,,,,,,,,,,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
61
,,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
64
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
65
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
67
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,123,124,125,126,127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
75
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
78
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
79
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
80
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
81
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,
82
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
85
,,,,,,,,17,,19,20,21,22,23,24,25,26,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,47,,,,,,,,,,,,,,,,,89,90,57,91,59,92,138,62,63,64,108,94,95,96,97,98,99,66,100,67,68,,,69,70,71,,,
86
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,141,99,66,100,,142,,,,101,,,,
87
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,143,99,66,100,,142,,,,101,,,,
88
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
93
,,,,,,,,,,,,,,,,,,,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
96
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,147,148,149,150,151,152,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
97
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
102
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,158,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
103
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,159,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
104
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,160,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
107
,,,,,,,,,,,,,,,,,,,,161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
108
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
109
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,163,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
112
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,164,94,95,96,97,98,99,66,100,67,68,,165,,101,,,,
113
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,166,97,167,99,66,100,,142,,,,101,,168,,
118
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,170,,,,,,171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
120
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,166,97,167,99,66,100,,142,,,,101,,172,,
121
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
122
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,174,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
123
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,175,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
124
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,176,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
125
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,177,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
126
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,178,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
127
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,179,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
128
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,164,94,95,96,97,98,99,66,100,67,68,,180,,101,,,,
129
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,181,97,167,99,66,100,,142,,,,101,,,,
130
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,182,50,51,,52,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
131
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
132
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
134
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
135
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
136
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
137
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
138
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
139
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,113,,,,,,,,,,114,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
142
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
145
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,191,192,97,98,99,66,100,,142,,,,101,,,,
146
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,193,192,97,98,99,66,100,,142,,,,101,,,,
147
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,194,97,167,99,66,100,,142,,,,101,,,,
148
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,195,97,167,99,66,100,,142,,,,101,,,,
149
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,196,97,167,99,66,100,,142,,,,101,,,,
150
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,197,97,167,99,66,100,,142,,,,101,,,,
151
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,198,97,167,99,66,100,,142,,,,101,,,,
152
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,199,97,167,99,66,100,,142,,,,101,,,,
153
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,200,167,99,66,100,,142,,,,101,,,,
154
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,201,167,99,66,100,,142,,,,101,,,,
155
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,202,99,66,100,,142,,,,101,,,,
156
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,203,99,66,100,,142,,,,101,,,,
157
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,204,99,66,100,,142,,,,101,,,,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,205,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,206,192,97,98,99,66,100,,142,,,,101,,,,
160
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,,,,,,208,,,,,,,,,,,,209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
168
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,212,213,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,214,62,63,64,,,,,,,,,,,,215,,69,77,71,,,
171
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,216,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
172
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,,,,,208,,,,,,,,,,,,218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,219,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,220,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
183
,,,,,,212,213,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,214,62,63,64,,,,,,,,,,,,221,,69,77,71,,,
184
,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,222,,,,,,,,,,,
185
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,223,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
186
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,224,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
188
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,225,,226,,,,,,,,,,,61,62,63,64,,,,,,,,,,,,,,69,77,71,,,
190
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,139,,,,,,,,,,,,,,,,,,90,140,91,59,92,,,,,,,,,,227,99,66,100,,142,,,,101,,,,
191
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
192
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,147,148,149,150,151,152,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
193
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
195
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
196
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
197
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
198
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
201
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,156,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
205
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,228,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
206
,,,,,,,,,,,,,,,,,,,,229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
207
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,230,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
208
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,231,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
211
,,,,,,212,213,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,214,62,63,64,,,,,,,,,,,,232,,69,77,71,,,
212
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,233,62,63,64,,,,,,,,,,,,,,69,77,71,,,
213
,,,,,,,,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,234,62,63,64,,,,,,,,,,,,,,69,77,71,,,
214
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,235,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
215
,,,,,,,,,,,,,,,,,,,236,,,,,,,,,,,,237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
216
,,,,,,,,,,,,,,,,,,,,238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
221
,,,,,,,,,,,,,,,,,,,236,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
222
,,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
223
,,,,,,,,,,,,,,,,,,,,241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
224
,,,,,,,,,,,,,,,,,,,,242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
225
,,,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,244,,,,,,,,,,,61,62,63,64,,,,,,,,,,,,,,69,77,71,,,
229
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,36,,,,,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,245,55,56,57,58,59,60,,,,,,,,,,,65,66,,67,68,,,,101,,,,
230
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
232
,,,,,,,,,,,,,,,,,,,236,,,,,,,,,,,,247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
233
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,248,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
234
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
236
,,,,,,236,236,17,,19,20,21,22,23,24,25,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,250,62,63,64,,,,,,,,,,,,,,69,77,71,,,
237
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
239
,,,,,,,,,,,,,,,,,,,,252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
245
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
246
,,,,,,,,,,,,,,,,,,,,,,,,,,254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,255,256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
247
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
250
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
251
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,258,50,51,,52,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
253
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,259,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
254
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,260,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,261,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
257
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,262,50,51,,52,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
258
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,263,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
260
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
262
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,265,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,116,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
264
,,,,,,,,,,,,,,,,,,27,,,28,,,,,,,,35,85,,,,,,,,,,,,38,39,,,,,,,,86,,,,,,87,,,,40,41,42,43,44,45,46,88,,,,,,,,,,,,,,,,,89,90,57,91,59,92,,,,,266,94,95,96,97,98,99,66,100,67,68,,,,101,,,,
266
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
267
,,12,13,14,,15,16,17,18,19,20,21,22,23,24,25,26,27,,,28,29,30,31,32,,33,34,35,36,,,,37,,,,,,,,38,39,,,,,,,,,,,,,,,,,,40,41,42,43,44,45,46,47,,,,,,,,50,51,,268,53,,,,54,55,56,57,58,59,60,61,62,63,64,,,,,,,65,66,,67,68,,,69,70,71,,,
268
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENDTABLE
