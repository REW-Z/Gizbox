import <"core">  
import <"stdlib">  

using Core;  
using Console;
using Collections;

int globalVar1 = 1;
float globalVar2 = 1.0f;

void test()
{
	GC::Disable();

	int result = globalVar1 + (int)globalVar2;
	Console::Log("result:" + (string)result);
}

test();

// 中间代码  
// --------------------------------------------------
// 0   |status 3  |entry:test@:
// 1   |status 3  |func_begin:test@:   FUNC_BEGIN test@
// 2   |status 3  |                    CALL Core::GC::Disable@ %LITINT:0
// 3   |status 3  |                    = tmp@0 %RET
// 4   |status 3  |                    CAST tmp@1 int globalVar2
// 5   |status 3  |                    + tmp@2 globalVar1 tmp@1
// 6   |status 3  |                    = result tmp@2
// 7   |status 3  |                    PARAM result
// 8   |status 3  |                    CALL Core::Extern::IntToString@_int %LITINT:1
// 9   |status 3  |                    = tmp@4 %RET
// 10  |status 3  |                    PARAM tmp@4
// 11  |status 3  |                    CALL Console::Log@_string %LITINT:1
// 12  |status 3  |                    = tmp@3 %RET
// 13  |status 3  |                    RETURN
// 14  |status 3  |func_end:test@:     FUNC_END test@
// 15  |status 3  |exit:test@:
// 16  |status 2  |entry:Main:
// 17  |status 2  |func_begin:Main:    FUNC_BEGIN Main
// 18  |status 2  |                    = globalVar1 %LITINT:1
// 19  |status 2  |                    = globalVar2 %LITFLOAT:1.0f
// 20  |status 2  |
// 21  |status 2  |func_end:Main:      FUNC_END Main
// 22  |status 2  |exit:Main:
// --------------------------------------------------

//  汇编编译结果（未完成）
//  section .data
//          LITFLOAT_1_0f  Gizbox.Src.Backend.IROperandExpr
//          globalVar1  0
//          globalVar2  0
//  
//  section .text
//  
//  entry:test@
//  func_begin:test@
//          push  RBP                                         ; // 1 : FUNC_BEGIN test@
//          mov  RBP,  RSP
//           <callee_save>
//           <caller_save>                                    ; // 2 : CALL Core::GC::Disable@ %LITINT:0
//          and  RSP,  -16
//          sub  RSP,  32
//          call  Core::GC::Disable@
//           <caller_restore>
//          mov  vreg%tmp@0,  RAX                             ; // 3 : = tmp@0 %RET
//          cvttss2si  vreg%tmp@1,  [rel globalVar2]          ; // 4 : CAST tmp@1 int globalVar2
//          mov  vreg%tmp@2,  [rel globalVar1]                ; // 5 : + tmp@2 globalVar1 tmp@1
//          add  vreg%tmp@2,  vreg%tmp@1
//          mov  vreg%result,  vreg%tmp@2                     ; // 6 : = result tmp@2//  none: 7 : PARAM result
//           <caller_save>                                    ; // 8 : CALL Core::Extern::IntToString@_int %LITINT:1
//          and  RSP,  -16
//          sub  RSP,  32
//          mov  RCX,  vreg%result
//          mov  [RSP+8],  vreg%result
//          call  Core::Extern::IntToString@_int
//           <caller_restore>
//          mov  vreg%tmp@4,  RAX                             ; // 9 : = tmp@4 %RET//  none: 10 : PARAM tmp@4
//           <caller_save>                                    ; // 11 : CALL Console::Log@_string %LITINT:1
//          and  RSP,  -16
//          sub  RSP,  32
//          mov  RCX,  vreg%tmp@4
//          mov  [RSP+8],  vreg%tmp@4
//          call  Console::Log@_string
//           <caller_restore>
//          mov  vreg%tmp@3,  RAX                             ; // 12 : = tmp@3 %RET
//          jmp  func_end:test@                               ; // 13 : RETURN
//  func_end:test@
//          mov  RSP,  RBP                                    ; // 14 : FUNC_END test@
//          pop  RBP
//          ret
//           <callee_restore>
//  exit:test@
//  entry:Main
//  func_begin:Main
//          push  RBP                                         ; // 17 : FUNC_BEGIN Main
//          mov  RBP,  RSP
//           <callee_save>
//          mov  [rel globalVar1],  1                         ; // 18 : = globalVar1 %LITINT:1
//          movss  [rel globalVar2],  [rel LITFLOAT_1_0f]     ; // 19 : = globalVar2 %LITFLOAT:1.0f
//  func_end:Main
//          mov  RSP,  RBP                                    ; // 21 : FUNC_END Main
//          pop  RBP
//          ret
//           <callee_restore>
//  exit:Main