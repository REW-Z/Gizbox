import <"core">

namespace Math
{
	const float Pi = 3.14159265358979323846f;

	float Abs(float number)
	{
		float result = number;
		if(number < 0.0f)
			result = -number;
		return result;
	}

	float Pow(float bs, int exp)
	{
		float result = 1.0f;
		bool isNegativeExponent = (exp < 0);
		if (isNegativeExponent) {
		    exp = -exp;
		}

		for (int i = 0; i < exp; ++i) {
		    result *= bs;
		}

		if (isNegativeExponent) {
		    result = 1.0f / result;
		}

		return result;
	}

	float Sqrt(float number) 
	{
		if (number < 0.0f) 
		{
			return 0.0f;
		}
		float precision = 0.0000001f;
		float guess = number / 2.0f;
		while (Math::Abs(guess * guess - number) > precision) 
		{
		    guess = (guess + (number / guess)) / 2.0f;
		}
		return guess;
	}

}


namespace Collections
{
	class List
	{
		Core::Object[] data = new Core::Object[10];
		int opacity = 10;
		int count = 0;

		void Add(Core::Object v)
		{
			if(this.count >= this.opacity)
			{
				this.Resize();
			}

			this.data[this.count] = v;
			this.count += 1;
		}

		Core::Object Get(int idx)
		{
			return this.data[idx];
		}

		void Resize()
		{
			Core::Object[] newdata = new Core::Object[this.opacity * 2];
			for(int i = 0; i < this.opacity; ++i)
			{
				newdata[i] = this.data[i];
			}
			this.data = newdata;
			this.opacity *= 2;
		}
	}
}