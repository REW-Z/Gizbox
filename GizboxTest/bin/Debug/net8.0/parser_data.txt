***Raw Terminals***
import
using
namespace
extern
const
var
class
void
bool
int
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
***Raw Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
***Raw Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε



***Data***
***Terminals***
import
using
namespace
extern
const
var
class
void
bool
int
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
$
***Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
S'
***Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> const type ID = lit ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> term % factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε
S' -> S
***States***
***State***
0
I_0
***Set***
S' -> · S, $
S -> · importations namespaceusings statements, $
importations -> · importations importation, using
importations -> · importations importation, namespace
importations -> · importations importation, {
importations -> · importations importation, ID
importations -> · importations importation, void
importations -> · importations importation, bool
importations -> · importations importation, int
importations -> · importations importation, float
importations -> · importations importation, double
importations -> · importations importation, char
importations -> · importations importation, string
importations -> · importations importation, const
importations -> · importations importation, extern
importations -> · importations importation, class
importations -> · importations importation, (
importations -> · importations importation, this
importations -> · importations importation, new
importations -> · importations importation, LITBOOL
importations -> · importations importation, LITINT
importations -> · importations importation, LITFLOAT
importations -> · importations importation, LITDOUBLE
importations -> · importations importation, LITCHAR
importations -> · importations importation, LITSTRING
importations -> · importations importation, null
importations -> · importations importation, ++
importations -> · importations importation, --
importations -> · importations importation, break
importations -> · importations importation, return
importations -> · importations importation, delete
importations -> · importations importation, while
importations -> · importations importation, for
importations -> · importations importation, if
importations -> · importations importation, $
importations -> · importation, using
importations -> · importation, namespace
importations -> · importation, {
importations -> · importation, ID
importations -> · importation, void
importations -> · importation, bool
importations -> · importation, int
importations -> · importation, float
importations -> · importation, double
importations -> · importation, char
importations -> · importation, string
importations -> · importation, const
importations -> · importation, extern
importations -> · importation, class
importations -> · importation, (
importations -> · importation, this
importations -> · importation, new
importations -> · importation, LITBOOL
importations -> · importation, LITINT
importations -> · importation, LITFLOAT
importations -> · importation, LITDOUBLE
importations -> · importation, LITCHAR
importations -> · importation, LITSTRING
importations -> · importation, null
importations -> · importation, ++
importations -> · importation, --
importations -> · importation, break
importations -> · importation, return
importations -> · importation, delete
importations -> · importation, while
importations -> · importation, for
importations -> · importation, if
importations -> · importation, $
importations -> ·, using
importations -> ·, namespace
importations -> ·, {
importations -> ·, ID
importations -> ·, void
importations -> ·, bool
importations -> ·, int
importations -> ·, float
importations -> ·, double
importations -> ·, char
importations -> ·, string
importations -> ·, const
importations -> ·, extern
importations -> ·, class
importations -> ·, (
importations -> ·, this
importations -> ·, new
importations -> ·, LITBOOL
importations -> ·, LITINT
importations -> ·, LITFLOAT
importations -> ·, LITDOUBLE
importations -> ·, LITCHAR
importations -> ·, LITSTRING
importations -> ·, null
importations -> ·, ++
importations -> ·, --
importations -> ·, break
importations -> ·, return
importations -> ·, delete
importations -> ·, while
importations -> ·, for
importations -> ·, if
importations -> ·, $
importations -> · importations importation, import
importations -> · importation, import
importations -> ·, import
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
***EndSet***
***EndState***
***State***
1
I_1
***Set***
importation -> import · < LITSTRING >, using
importation -> import · < LITSTRING >, namespace
importation -> import · < LITSTRING >, {
importation -> import · < LITSTRING >, ID
importation -> import · < LITSTRING >, void
importation -> import · < LITSTRING >, bool
importation -> import · < LITSTRING >, int
importation -> import · < LITSTRING >, float
importation -> import · < LITSTRING >, double
importation -> import · < LITSTRING >, char
importation -> import · < LITSTRING >, string
importation -> import · < LITSTRING >, const
importation -> import · < LITSTRING >, extern
importation -> import · < LITSTRING >, class
importation -> import · < LITSTRING >, (
importation -> import · < LITSTRING >, this
importation -> import · < LITSTRING >, new
importation -> import · < LITSTRING >, LITBOOL
importation -> import · < LITSTRING >, LITINT
importation -> import · < LITSTRING >, LITFLOAT
importation -> import · < LITSTRING >, LITDOUBLE
importation -> import · < LITSTRING >, LITCHAR
importation -> import · < LITSTRING >, LITSTRING
importation -> import · < LITSTRING >, null
importation -> import · < LITSTRING >, ++
importation -> import · < LITSTRING >, --
importation -> import · < LITSTRING >, break
importation -> import · < LITSTRING >, return
importation -> import · < LITSTRING >, delete
importation -> import · < LITSTRING >, while
importation -> import · < LITSTRING >, for
importation -> import · < LITSTRING >, if
importation -> import · < LITSTRING >, $
importation -> import · < LITSTRING >, import
***EndSet***
***EndState***
***State***
2
I_2
***Set***
S' -> S ·, $
***EndSet***
***EndState***
***State***
3
I_3
***Set***
S -> importations · namespaceusings statements, $
importations -> importations · importation, using
importations -> importations · importation, namespace
importations -> importations · importation, {
importations -> importations · importation, ID
importations -> importations · importation, void
importations -> importations · importation, bool
importations -> importations · importation, int
importations -> importations · importation, float
importations -> importations · importation, double
importations -> importations · importation, char
importations -> importations · importation, string
importations -> importations · importation, const
importations -> importations · importation, extern
importations -> importations · importation, class
importations -> importations · importation, (
importations -> importations · importation, this
importations -> importations · importation, new
importations -> importations · importation, LITBOOL
importations -> importations · importation, LITINT
importations -> importations · importation, LITFLOAT
importations -> importations · importation, LITDOUBLE
importations -> importations · importation, LITCHAR
importations -> importations · importation, LITSTRING
importations -> importations · importation, null
importations -> importations · importation, ++
importations -> importations · importation, --
importations -> importations · importation, break
importations -> importations · importation, return
importations -> importations · importation, delete
importations -> importations · importation, while
importations -> importations · importation, for
importations -> importations · importation, if
importations -> importations · importation, $
importations -> importations · importation, import
namespaceusings -> · namespaceusings namespaceusing, namespace
namespaceusings -> · namespaceusings namespaceusing, {
namespaceusings -> · namespaceusings namespaceusing, ID
namespaceusings -> · namespaceusings namespaceusing, void
namespaceusings -> · namespaceusings namespaceusing, bool
namespaceusings -> · namespaceusings namespaceusing, int
namespaceusings -> · namespaceusings namespaceusing, float
namespaceusings -> · namespaceusings namespaceusing, double
namespaceusings -> · namespaceusings namespaceusing, char
namespaceusings -> · namespaceusings namespaceusing, string
namespaceusings -> · namespaceusings namespaceusing, const
namespaceusings -> · namespaceusings namespaceusing, extern
namespaceusings -> · namespaceusings namespaceusing, class
namespaceusings -> · namespaceusings namespaceusing, (
namespaceusings -> · namespaceusings namespaceusing, this
namespaceusings -> · namespaceusings namespaceusing, new
namespaceusings -> · namespaceusings namespaceusing, LITBOOL
namespaceusings -> · namespaceusings namespaceusing, LITINT
namespaceusings -> · namespaceusings namespaceusing, LITFLOAT
namespaceusings -> · namespaceusings namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusings namespaceusing, LITCHAR
namespaceusings -> · namespaceusings namespaceusing, LITSTRING
namespaceusings -> · namespaceusings namespaceusing, null
namespaceusings -> · namespaceusings namespaceusing, ++
namespaceusings -> · namespaceusings namespaceusing, --
namespaceusings -> · namespaceusings namespaceusing, break
namespaceusings -> · namespaceusings namespaceusing, return
namespaceusings -> · namespaceusings namespaceusing, delete
namespaceusings -> · namespaceusings namespaceusing, while
namespaceusings -> · namespaceusings namespaceusing, for
namespaceusings -> · namespaceusings namespaceusing, if
namespaceusings -> · namespaceusings namespaceusing, $
namespaceusings -> · namespaceusing, namespace
namespaceusings -> · namespaceusing, {
namespaceusings -> · namespaceusing, ID
namespaceusings -> · namespaceusing, void
namespaceusings -> · namespaceusing, bool
namespaceusings -> · namespaceusing, int
namespaceusings -> · namespaceusing, float
namespaceusings -> · namespaceusing, double
namespaceusings -> · namespaceusing, char
namespaceusings -> · namespaceusing, string
namespaceusings -> · namespaceusing, const
namespaceusings -> · namespaceusing, extern
namespaceusings -> · namespaceusing, class
namespaceusings -> · namespaceusing, (
namespaceusings -> · namespaceusing, this
namespaceusings -> · namespaceusing, new
namespaceusings -> · namespaceusing, LITBOOL
namespaceusings -> · namespaceusing, LITINT
namespaceusings -> · namespaceusing, LITFLOAT
namespaceusings -> · namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusing, LITCHAR
namespaceusings -> · namespaceusing, LITSTRING
namespaceusings -> · namespaceusing, null
namespaceusings -> · namespaceusing, ++
namespaceusings -> · namespaceusing, --
namespaceusings -> · namespaceusing, break
namespaceusings -> · namespaceusing, return
namespaceusings -> · namespaceusing, delete
namespaceusings -> · namespaceusing, while
namespaceusings -> · namespaceusing, for
namespaceusings -> · namespaceusing, if
namespaceusings -> · namespaceusing, $
namespaceusings -> ·, namespace
namespaceusings -> ·, {
namespaceusings -> ·, ID
namespaceusings -> ·, void
namespaceusings -> ·, bool
namespaceusings -> ·, int
namespaceusings -> ·, float
namespaceusings -> ·, double
namespaceusings -> ·, char
namespaceusings -> ·, string
namespaceusings -> ·, const
namespaceusings -> ·, extern
namespaceusings -> ·, class
namespaceusings -> ·, (
namespaceusings -> ·, this
namespaceusings -> ·, new
namespaceusings -> ·, LITBOOL
namespaceusings -> ·, LITINT
namespaceusings -> ·, LITFLOAT
namespaceusings -> ·, LITDOUBLE
namespaceusings -> ·, LITCHAR
namespaceusings -> ·, LITSTRING
namespaceusings -> ·, null
namespaceusings -> ·, ++
namespaceusings -> ·, --
namespaceusings -> ·, break
namespaceusings -> ·, return
namespaceusings -> ·, delete
namespaceusings -> ·, while
namespaceusings -> ·, for
namespaceusings -> ·, if
namespaceusings -> ·, $
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, const
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
namespaceusings -> · namespaceusings namespaceusing, using
namespaceusings -> · namespaceusing, using
namespaceusings -> ·, using
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
***EndSet***
***EndState***
***State***
4
I_4
***Set***
importations -> importation ·, using
importations -> importation ·, namespace
importations -> importation ·, {
importations -> importation ·, ID
importations -> importation ·, void
importations -> importation ·, bool
importations -> importation ·, int
importations -> importation ·, float
importations -> importation ·, double
importations -> importation ·, char
importations -> importation ·, string
importations -> importation ·, const
importations -> importation ·, extern
importations -> importation ·, class
importations -> importation ·, (
importations -> importation ·, this
importations -> importation ·, new
importations -> importation ·, LITBOOL
importations -> importation ·, LITINT
importations -> importation ·, LITFLOAT
importations -> importation ·, LITDOUBLE
importations -> importation ·, LITCHAR
importations -> importation ·, LITSTRING
importations -> importation ·, null
importations -> importation ·, ++
importations -> importation ·, --
importations -> importation ·, break
importations -> importation ·, return
importations -> importation ·, delete
importations -> importation ·, while
importations -> importation ·, for
importations -> importation ·, if
importations -> importation ·, $
importations -> importation ·, import
***EndSet***
***EndState***
***State***
5
I_5
***Set***
importation -> import < · LITSTRING >, using
importation -> import < · LITSTRING >, namespace
importation -> import < · LITSTRING >, {
importation -> import < · LITSTRING >, ID
importation -> import < · LITSTRING >, void
importation -> import < · LITSTRING >, bool
importation -> import < · LITSTRING >, int
importation -> import < · LITSTRING >, float
importation -> import < · LITSTRING >, double
importation -> import < · LITSTRING >, char
importation -> import < · LITSTRING >, string
importation -> import < · LITSTRING >, const
importation -> import < · LITSTRING >, extern
importation -> import < · LITSTRING >, class
importation -> import < · LITSTRING >, (
importation -> import < · LITSTRING >, this
importation -> import < · LITSTRING >, new
importation -> import < · LITSTRING >, LITBOOL
importation -> import < · LITSTRING >, LITINT
importation -> import < · LITSTRING >, LITFLOAT
importation -> import < · LITSTRING >, LITDOUBLE
importation -> import < · LITSTRING >, LITCHAR
importation -> import < · LITSTRING >, LITSTRING
importation -> import < · LITSTRING >, null
importation -> import < · LITSTRING >, ++
importation -> import < · LITSTRING >, --
importation -> import < · LITSTRING >, break
importation -> import < · LITSTRING >, return
importation -> import < · LITSTRING >, delete
importation -> import < · LITSTRING >, while
importation -> import < · LITSTRING >, for
importation -> import < · LITSTRING >, if
importation -> import < · LITSTRING >, $
importation -> import < · LITSTRING >, import
***EndSet***
***EndState***
***State***
6
I_6
***Set***
namespaceusing -> using · ID ;, namespace
namespaceusing -> using · ID ;, {
namespaceusing -> using · ID ;, ID
namespaceusing -> using · ID ;, void
namespaceusing -> using · ID ;, bool
namespaceusing -> using · ID ;, int
namespaceusing -> using · ID ;, float
namespaceusing -> using · ID ;, double
namespaceusing -> using · ID ;, char
namespaceusing -> using · ID ;, string
namespaceusing -> using · ID ;, const
namespaceusing -> using · ID ;, extern
namespaceusing -> using · ID ;, class
namespaceusing -> using · ID ;, (
namespaceusing -> using · ID ;, this
namespaceusing -> using · ID ;, new
namespaceusing -> using · ID ;, LITBOOL
namespaceusing -> using · ID ;, LITINT
namespaceusing -> using · ID ;, LITFLOAT
namespaceusing -> using · ID ;, LITDOUBLE
namespaceusing -> using · ID ;, LITCHAR
namespaceusing -> using · ID ;, LITSTRING
namespaceusing -> using · ID ;, null
namespaceusing -> using · ID ;, ++
namespaceusing -> using · ID ;, --
namespaceusing -> using · ID ;, break
namespaceusing -> using · ID ;, return
namespaceusing -> using · ID ;, delete
namespaceusing -> using · ID ;, while
namespaceusing -> using · ID ;, for
namespaceusing -> using · ID ;, if
namespaceusing -> using · ID ;, $
namespaceusing -> using · ID ;, using
***EndSet***
***EndState***
***State***
7
I_7
***Set***
importations -> importations importation ·, using
importations -> importations importation ·, namespace
importations -> importations importation ·, {
importations -> importations importation ·, ID
importations -> importations importation ·, void
importations -> importations importation ·, bool
importations -> importations importation ·, int
importations -> importations importation ·, float
importations -> importations importation ·, double
importations -> importations importation ·, char
importations -> importations importation ·, string
importations -> importations importation ·, const
importations -> importations importation ·, extern
importations -> importations importation ·, class
importations -> importations importation ·, (
importations -> importations importation ·, this
importations -> importations importation ·, new
importations -> importations importation ·, LITBOOL
importations -> importations importation ·, LITINT
importations -> importations importation ·, LITFLOAT
importations -> importations importation ·, LITDOUBLE
importations -> importations importation ·, LITCHAR
importations -> importations importation ·, LITSTRING
importations -> importations importation ·, null
importations -> importations importation ·, ++
importations -> importations importation ·, --
importations -> importations importation ·, break
importations -> importations importation ·, return
importations -> importations importation ·, delete
importations -> importations importation ·, while
importations -> importations importation ·, for
importations -> importations importation ·, if
importations -> importations importation ·, $
importations -> importations importation ·, import
***EndSet***
***EndState***
***State***
8
I_8
***Set***
S -> importations namespaceusings · statements, $
namespaceusings -> namespaceusings · namespaceusing, namespace
namespaceusings -> namespaceusings · namespaceusing, {
namespaceusings -> namespaceusings · namespaceusing, ID
namespaceusings -> namespaceusings · namespaceusing, void
namespaceusings -> namespaceusings · namespaceusing, bool
namespaceusings -> namespaceusings · namespaceusing, int
namespaceusings -> namespaceusings · namespaceusing, float
namespaceusings -> namespaceusings · namespaceusing, double
namespaceusings -> namespaceusings · namespaceusing, char
namespaceusings -> namespaceusings · namespaceusing, string
namespaceusings -> namespaceusings · namespaceusing, const
namespaceusings -> namespaceusings · namespaceusing, extern
namespaceusings -> namespaceusings · namespaceusing, class
namespaceusings -> namespaceusings · namespaceusing, (
namespaceusings -> namespaceusings · namespaceusing, this
namespaceusings -> namespaceusings · namespaceusing, new
namespaceusings -> namespaceusings · namespaceusing, LITBOOL
namespaceusings -> namespaceusings · namespaceusing, LITINT
namespaceusings -> namespaceusings · namespaceusing, LITFLOAT
namespaceusings -> namespaceusings · namespaceusing, LITDOUBLE
namespaceusings -> namespaceusings · namespaceusing, LITCHAR
namespaceusings -> namespaceusings · namespaceusing, LITSTRING
namespaceusings -> namespaceusings · namespaceusing, null
namespaceusings -> namespaceusings · namespaceusing, ++
namespaceusings -> namespaceusings · namespaceusing, --
namespaceusings -> namespaceusings · namespaceusing, break
namespaceusings -> namespaceusings · namespaceusing, return
namespaceusings -> namespaceusings · namespaceusing, delete
namespaceusings -> namespaceusings · namespaceusing, while
namespaceusings -> namespaceusings · namespaceusing, for
namespaceusings -> namespaceusings · namespaceusing, if
namespaceusings -> namespaceusings · namespaceusing, $
namespaceusings -> namespaceusings · namespaceusing, using
statements -> · statements stmt, $
statements -> · stmt, $
statements -> ·, $
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, const
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
9
I_9
***Set***
namespaceusings -> namespaceusing ·, namespace
namespaceusings -> namespaceusing ·, {
namespaceusings -> namespaceusing ·, ID
namespaceusings -> namespaceusing ·, void
namespaceusings -> namespaceusing ·, bool
namespaceusings -> namespaceusing ·, int
namespaceusings -> namespaceusing ·, float
namespaceusings -> namespaceusing ·, double
namespaceusings -> namespaceusing ·, char
namespaceusings -> namespaceusing ·, string
namespaceusings -> namespaceusing ·, const
namespaceusings -> namespaceusing ·, extern
namespaceusings -> namespaceusing ·, class
namespaceusings -> namespaceusing ·, (
namespaceusings -> namespaceusing ·, this
namespaceusings -> namespaceusing ·, new
namespaceusings -> namespaceusing ·, LITBOOL
namespaceusings -> namespaceusing ·, LITINT
namespaceusings -> namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusing ·, LITCHAR
namespaceusings -> namespaceusing ·, LITSTRING
namespaceusings -> namespaceusing ·, null
namespaceusings -> namespaceusing ·, ++
namespaceusings -> namespaceusing ·, --
namespaceusings -> namespaceusing ·, break
namespaceusings -> namespaceusing ·, return
namespaceusings -> namespaceusing ·, delete
namespaceusings -> namespaceusing ·, while
namespaceusings -> namespaceusing ·, for
namespaceusings -> namespaceusing ·, if
namespaceusings -> namespaceusing ·, $
namespaceusings -> namespaceusing ·, using
***EndSet***
***EndState***
***State***
10
I_10
***Set***
importation -> import < LITSTRING · >, using
importation -> import < LITSTRING · >, namespace
importation -> import < LITSTRING · >, {
importation -> import < LITSTRING · >, ID
importation -> import < LITSTRING · >, void
importation -> import < LITSTRING · >, bool
importation -> import < LITSTRING · >, int
importation -> import < LITSTRING · >, float
importation -> import < LITSTRING · >, double
importation -> import < LITSTRING · >, char
importation -> import < LITSTRING · >, string
importation -> import < LITSTRING · >, const
importation -> import < LITSTRING · >, extern
importation -> import < LITSTRING · >, class
importation -> import < LITSTRING · >, (
importation -> import < LITSTRING · >, this
importation -> import < LITSTRING · >, new
importation -> import < LITSTRING · >, LITBOOL
importation -> import < LITSTRING · >, LITINT
importation -> import < LITSTRING · >, LITFLOAT
importation -> import < LITSTRING · >, LITDOUBLE
importation -> import < LITSTRING · >, LITCHAR
importation -> import < LITSTRING · >, LITSTRING
importation -> import < LITSTRING · >, null
importation -> import < LITSTRING · >, ++
importation -> import < LITSTRING · >, --
importation -> import < LITSTRING · >, break
importation -> import < LITSTRING · >, return
importation -> import < LITSTRING · >, delete
importation -> import < LITSTRING · >, while
importation -> import < LITSTRING · >, for
importation -> import < LITSTRING · >, if
importation -> import < LITSTRING · >, $
importation -> import < LITSTRING · >, import
***EndSet***
***EndState***
***State***
11
I_11
***Set***
namespaceusing -> using ID · ;, namespace
namespaceusing -> using ID · ;, {
namespaceusing -> using ID · ;, ID
namespaceusing -> using ID · ;, void
namespaceusing -> using ID · ;, bool
namespaceusing -> using ID · ;, int
namespaceusing -> using ID · ;, float
namespaceusing -> using ID · ;, double
namespaceusing -> using ID · ;, char
namespaceusing -> using ID · ;, string
namespaceusing -> using ID · ;, const
namespaceusing -> using ID · ;, extern
namespaceusing -> using ID · ;, class
namespaceusing -> using ID · ;, (
namespaceusing -> using ID · ;, this
namespaceusing -> using ID · ;, new
namespaceusing -> using ID · ;, LITBOOL
namespaceusing -> using ID · ;, LITINT
namespaceusing -> using ID · ;, LITFLOAT
namespaceusing -> using ID · ;, LITDOUBLE
namespaceusing -> using ID · ;, LITCHAR
namespaceusing -> using ID · ;, LITSTRING
namespaceusing -> using ID · ;, null
namespaceusing -> using ID · ;, ++
namespaceusing -> using ID · ;, --
namespaceusing -> using ID · ;, break
namespaceusing -> using ID · ;, return
namespaceusing -> using ID · ;, delete
namespaceusing -> using ID · ;, while
namespaceusing -> using ID · ;, for
namespaceusing -> using ID · ;, if
namespaceusing -> using ID · ;, $
namespaceusing -> using ID · ;, using
***EndSet***
***EndState***
***State***
12
I_12_158_256_779_1094_1217
***Set***
namespaceblock -> namespace · ID { statements }, $
namespaceblock -> namespace · ID { statements }, namespace
namespaceblock -> namespace · ID { statements }, {
namespaceblock -> namespace · ID { statements }, ID
namespaceblock -> namespace · ID { statements }, void
namespaceblock -> namespace · ID { statements }, bool
namespaceblock -> namespace · ID { statements }, int
namespaceblock -> namespace · ID { statements }, float
namespaceblock -> namespace · ID { statements }, double
namespaceblock -> namespace · ID { statements }, char
namespaceblock -> namespace · ID { statements }, string
namespaceblock -> namespace · ID { statements }, const
namespaceblock -> namespace · ID { statements }, extern
namespaceblock -> namespace · ID { statements }, class
namespaceblock -> namespace · ID { statements }, (
namespaceblock -> namespace · ID { statements }, this
namespaceblock -> namespace · ID { statements }, new
namespaceblock -> namespace · ID { statements }, LITBOOL
namespaceblock -> namespace · ID { statements }, LITINT
namespaceblock -> namespace · ID { statements }, LITFLOAT
namespaceblock -> namespace · ID { statements }, LITDOUBLE
namespaceblock -> namespace · ID { statements }, LITCHAR
namespaceblock -> namespace · ID { statements }, LITSTRING
namespaceblock -> namespace · ID { statements }, null
namespaceblock -> namespace · ID { statements }, ++
namespaceblock -> namespace · ID { statements }, --
namespaceblock -> namespace · ID { statements }, break
namespaceblock -> namespace · ID { statements }, return
namespaceblock -> namespace · ID { statements }, delete
namespaceblock -> namespace · ID { statements }, while
namespaceblock -> namespace · ID { statements }, for
namespaceblock -> namespace · ID { statements }, if
namespaceblock -> namespace · ID { statements }, }
namespaceblock -> namespace · ID { statements }, &&
namespaceblock -> namespace · ID { statements }, ||
namespaceblock -> namespace · ID { statements }, +
namespaceblock -> namespace · ID { statements }, -
namespaceblock -> namespace · ID { statements }, *
namespaceblock -> namespace · ID { statements }, /
namespaceblock -> namespace · ID { statements }, %
namespaceblock -> namespace · ID { statements }, !
namespaceblock -> namespace · ID { statements }, else
***EndSet***
***EndState***
***State***
13
I_13_159_257_700_780_1095_1218
***Set***
declstmt -> extern · type ID ( params ) ;, $
declstmt -> extern · type ID ( params ) ;, namespace
declstmt -> extern · type ID ( params ) ;, {
declstmt -> extern · type ID ( params ) ;, ID
declstmt -> extern · type ID ( params ) ;, void
declstmt -> extern · type ID ( params ) ;, bool
declstmt -> extern · type ID ( params ) ;, int
declstmt -> extern · type ID ( params ) ;, float
declstmt -> extern · type ID ( params ) ;, double
declstmt -> extern · type ID ( params ) ;, char
declstmt -> extern · type ID ( params ) ;, string
declstmt -> extern · type ID ( params ) ;, const
declstmt -> extern · type ID ( params ) ;, extern
declstmt -> extern · type ID ( params ) ;, class
declstmt -> extern · type ID ( params ) ;, (
declstmt -> extern · type ID ( params ) ;, this
declstmt -> extern · type ID ( params ) ;, new
declstmt -> extern · type ID ( params ) ;, LITBOOL
declstmt -> extern · type ID ( params ) ;, LITINT
declstmt -> extern · type ID ( params ) ;, LITFLOAT
declstmt -> extern · type ID ( params ) ;, LITDOUBLE
declstmt -> extern · type ID ( params ) ;, LITCHAR
declstmt -> extern · type ID ( params ) ;, LITSTRING
declstmt -> extern · type ID ( params ) ;, null
declstmt -> extern · type ID ( params ) ;, ++
declstmt -> extern · type ID ( params ) ;, --
declstmt -> extern · type ID ( params ) ;, break
declstmt -> extern · type ID ( params ) ;, return
declstmt -> extern · type ID ( params ) ;, delete
declstmt -> extern · type ID ( params ) ;, while
declstmt -> extern · type ID ( params ) ;, for
declstmt -> extern · type ID ( params ) ;, if
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern · type ID ( params ) ;, }
declstmt -> extern · type ID ( params ) ;, &&
declstmt -> extern · type ID ( params ) ;, ||
declstmt -> extern · type ID ( params ) ;, +
declstmt -> extern · type ID ( params ) ;, -
declstmt -> extern · type ID ( params ) ;, *
declstmt -> extern · type ID ( params ) ;, /
declstmt -> extern · type ID ( params ) ;, %
declstmt -> extern · type ID ( params ) ;, !
declstmt -> extern · type ID ( params ) ;, else
***EndSet***
***EndState***
***State***
14
I_14_160_258_701_781_1096_1219
***Set***
declstmt -> const · type ID = lit ;, $
declstmt -> const · type ID = lit ;, namespace
declstmt -> const · type ID = lit ;, {
declstmt -> const · type ID = lit ;, ID
declstmt -> const · type ID = lit ;, void
declstmt -> const · type ID = lit ;, bool
declstmt -> const · type ID = lit ;, int
declstmt -> const · type ID = lit ;, float
declstmt -> const · type ID = lit ;, double
declstmt -> const · type ID = lit ;, char
declstmt -> const · type ID = lit ;, string
declstmt -> const · type ID = lit ;, const
declstmt -> const · type ID = lit ;, extern
declstmt -> const · type ID = lit ;, class
declstmt -> const · type ID = lit ;, (
declstmt -> const · type ID = lit ;, this
declstmt -> const · type ID = lit ;, new
declstmt -> const · type ID = lit ;, LITBOOL
declstmt -> const · type ID = lit ;, LITINT
declstmt -> const · type ID = lit ;, LITFLOAT
declstmt -> const · type ID = lit ;, LITDOUBLE
declstmt -> const · type ID = lit ;, LITCHAR
declstmt -> const · type ID = lit ;, LITSTRING
declstmt -> const · type ID = lit ;, null
declstmt -> const · type ID = lit ;, ++
declstmt -> const · type ID = lit ;, --
declstmt -> const · type ID = lit ;, break
declstmt -> const · type ID = lit ;, return
declstmt -> const · type ID = lit ;, delete
declstmt -> const · type ID = lit ;, while
declstmt -> const · type ID = lit ;, for
declstmt -> const · type ID = lit ;, if
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> const · type ID = lit ;, }
declstmt -> const · type ID = lit ;, &&
declstmt -> const · type ID = lit ;, ||
declstmt -> const · type ID = lit ;, +
declstmt -> const · type ID = lit ;, -
declstmt -> const · type ID = lit ;, *
declstmt -> const · type ID = lit ;, /
declstmt -> const · type ID = lit ;, %
declstmt -> const · type ID = lit ;, !
declstmt -> const · type ID = lit ;, else
***EndSet***
***EndState***
***State***
15
I_15_161_259_702_782_1097_1220
***Set***
declstmt -> class · ID inherit { declstatements }, $
declstmt -> class · ID inherit { declstatements }, namespace
declstmt -> class · ID inherit { declstatements }, {
declstmt -> class · ID inherit { declstatements }, ID
declstmt -> class · ID inherit { declstatements }, void
declstmt -> class · ID inherit { declstatements }, bool
declstmt -> class · ID inherit { declstatements }, int
declstmt -> class · ID inherit { declstatements }, float
declstmt -> class · ID inherit { declstatements }, double
declstmt -> class · ID inherit { declstatements }, char
declstmt -> class · ID inherit { declstatements }, string
declstmt -> class · ID inherit { declstatements }, const
declstmt -> class · ID inherit { declstatements }, extern
declstmt -> class · ID inherit { declstatements }, class
declstmt -> class · ID inherit { declstatements }, (
declstmt -> class · ID inherit { declstatements }, this
declstmt -> class · ID inherit { declstatements }, new
declstmt -> class · ID inherit { declstatements }, LITBOOL
declstmt -> class · ID inherit { declstatements }, LITINT
declstmt -> class · ID inherit { declstatements }, LITFLOAT
declstmt -> class · ID inherit { declstatements }, LITDOUBLE
declstmt -> class · ID inherit { declstatements }, LITCHAR
declstmt -> class · ID inherit { declstatements }, LITSTRING
declstmt -> class · ID inherit { declstatements }, null
declstmt -> class · ID inherit { declstatements }, ++
declstmt -> class · ID inherit { declstatements }, --
declstmt -> class · ID inherit { declstatements }, break
declstmt -> class · ID inherit { declstatements }, return
declstmt -> class · ID inherit { declstatements }, delete
declstmt -> class · ID inherit { declstatements }, while
declstmt -> class · ID inherit { declstatements }, for
declstmt -> class · ID inherit { declstatements }, if
declstmt -> class · ID inherit { declstatements }, }
declstmt -> class · ID inherit { declstatements }, &&
declstmt -> class · ID inherit { declstatements }, ||
declstmt -> class · ID inherit { declstatements }, +
declstmt -> class · ID inherit { declstatements }, -
declstmt -> class · ID inherit { declstatements }, *
declstmt -> class · ID inherit { declstatements }, /
declstmt -> class · ID inherit { declstatements }, %
declstmt -> class · ID inherit { declstatements }, !
declstmt -> class · ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
16
I_16_75_209
***Set***
primitive -> void ·, ID
primitive -> void ·, [
primitive -> void ·, )
***EndSet***
***EndState***
***State***
17
I_17_76_210
***Set***
primitive -> bool ·, ID
primitive -> bool ·, [
primitive -> bool ·, )
***EndSet***
***EndState***
***State***
18
I_18_77_211
***Set***
primitive -> int ·, ID
primitive -> int ·, [
primitive -> int ·, )
***EndSet***
***EndState***
***State***
19
I_19_78_212
***Set***
primitive -> float ·, ID
primitive -> float ·, [
primitive -> float ·, )
***EndSet***
***EndState***
***State***
20
I_20_79_213
***Set***
primitive -> double ·, ID
primitive -> double ·, [
primitive -> double ·, )
***EndSet***
***EndState***
***State***
21
I_21_80_214
***Set***
primitive -> char ·, ID
primitive -> char ·, [
primitive -> char ·, )
***EndSet***
***EndState***
***State***
22
I_22_81_215
***Set***
primitive -> string ·, ID
primitive -> string ·, [
primitive -> string ·, )
***EndSet***
***EndState***
***State***
23
I_23_87_125_334_368_433_466_530_563_692_869_902_973
***Set***
lit -> null ·, .
lit -> null ·, ;
lit -> null ·, &&
lit -> null ·, ||
lit -> null ·, >
lit -> null ·, <
lit -> null ·, >=
lit -> null ·, <=
lit -> null ·, ==
lit -> null ·, !=
lit -> null ·, +
lit -> null ·, -
lit -> null ·, *
lit -> null ·, /
lit -> null ·, %
lit -> null ·, )
lit -> null ·, ,
lit -> null ·, ]
***EndSet***
***EndState***
***State***
24
I_24_88_126_335_369_434_467_531_564_870_903_974_1034
***Set***
newobj -> new · ID ( ), ;
newobj -> new · ID ( ), .
newarr -> new · stypeBracket, .
stypeBracket -> · idBracket, .
stypeBracket -> · primitiveBracket, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> · primitive [ optidx ], .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
newarr -> new · stypeBracket, ;
newobj -> new · ID ( ), &&
newarr -> new · stypeBracket, &&
newobj -> new · ID ( ), ||
newarr -> new · stypeBracket, ||
newobj -> new · ID ( ), >
newarr -> new · stypeBracket, >
newobj -> new · ID ( ), <
newarr -> new · stypeBracket, <
newobj -> new · ID ( ), >=
newarr -> new · stypeBracket, >=
newobj -> new · ID ( ), <=
newarr -> new · stypeBracket, <=
newobj -> new · ID ( ), ==
newarr -> new · stypeBracket, ==
newobj -> new · ID ( ), !=
newarr -> new · stypeBracket, !=
newobj -> new · ID ( ), +
newarr -> new · stypeBracket, +
newobj -> new · ID ( ), -
newarr -> new · stypeBracket, -
newobj -> new · ID ( ), *
newarr -> new · stypeBracket, *
newobj -> new · ID ( ), /
newarr -> new · stypeBracket, /
newobj -> new · ID ( ), %
newarr -> new · stypeBracket, %
stypeBracket -> · idBracket, ;
stypeBracket -> · primitiveBracket, ;
stypeBracket -> · idBracket, &&
stypeBracket -> · primitiveBracket, &&
stypeBracket -> · idBracket, ||
stypeBracket -> · primitiveBracket, ||
stypeBracket -> · idBracket, >
stypeBracket -> · primitiveBracket, >
stypeBracket -> · idBracket, <
stypeBracket -> · primitiveBracket, <
stypeBracket -> · idBracket, >=
stypeBracket -> · primitiveBracket, >=
stypeBracket -> · idBracket, <=
stypeBracket -> · primitiveBracket, <=
stypeBracket -> · idBracket, ==
stypeBracket -> · primitiveBracket, ==
stypeBracket -> · idBracket, !=
stypeBracket -> · primitiveBracket, !=
stypeBracket -> · idBracket, +
stypeBracket -> · primitiveBracket, +
stypeBracket -> · idBracket, -
stypeBracket -> · primitiveBracket, -
stypeBracket -> · idBracket, *
stypeBracket -> · primitiveBracket, *
stypeBracket -> · idBracket, /
stypeBracket -> · primitiveBracket, /
stypeBracket -> · idBracket, %
stypeBracket -> · primitiveBracket, %
idBracket -> · ID [ optidx ], ;
primitiveBracket -> · primitive [ optidx ], ;
idBracket -> · ID [ optidx ], &&
primitiveBracket -> · primitive [ optidx ], &&
idBracket -> · ID [ optidx ], ||
primitiveBracket -> · primitive [ optidx ], ||
idBracket -> · ID [ optidx ], >
primitiveBracket -> · primitive [ optidx ], >
idBracket -> · ID [ optidx ], <
primitiveBracket -> · primitive [ optidx ], <
idBracket -> · ID [ optidx ], >=
primitiveBracket -> · primitive [ optidx ], >=
idBracket -> · ID [ optidx ], <=
primitiveBracket -> · primitive [ optidx ], <=
idBracket -> · ID [ optidx ], ==
primitiveBracket -> · primitive [ optidx ], ==
idBracket -> · ID [ optidx ], !=
primitiveBracket -> · primitive [ optidx ], !=
idBracket -> · ID [ optidx ], +
primitiveBracket -> · primitive [ optidx ], +
idBracket -> · ID [ optidx ], -
primitiveBracket -> · primitive [ optidx ], -
idBracket -> · ID [ optidx ], *
primitiveBracket -> · primitive [ optidx ], *
idBracket -> · ID [ optidx ], /
primitiveBracket -> · primitive [ optidx ], /
idBracket -> · ID [ optidx ], %
primitiveBracket -> · primitive [ optidx ], %
newobj -> new · ID ( ), )
newarr -> new · stypeBracket, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
newobj -> new · ID ( ), ,
newarr -> new · stypeBracket, ,
stypeBracket -> · idBracket, ,
stypeBracket -> · primitiveBracket, ,
idBracket -> · ID [ optidx ], ,
primitiveBracket -> · primitive [ optidx ], ,
newobj -> new · ID ( ), ]
newarr -> new · stypeBracket, ]
stypeBracket -> · idBracket, ]
stypeBracket -> · primitiveBracket, ]
idBracket -> · ID [ optidx ], ]
primitiveBracket -> · primitive [ optidx ], ]
***EndSet***
***EndState***
***State***
25
I_25_162_260_783_1098_1221
***Set***
stmt -> delete · expr ;, $
stmt -> delete · expr ;, namespace
stmt -> delete · expr ;, {
stmt -> delete · expr ;, ID
stmt -> delete · expr ;, void
stmt -> delete · expr ;, bool
stmt -> delete · expr ;, int
stmt -> delete · expr ;, float
stmt -> delete · expr ;, double
stmt -> delete · expr ;, char
stmt -> delete · expr ;, string
stmt -> delete · expr ;, const
stmt -> delete · expr ;, extern
stmt -> delete · expr ;, class
stmt -> delete · expr ;, (
stmt -> delete · expr ;, this
stmt -> delete · expr ;, new
stmt -> delete · expr ;, LITBOOL
stmt -> delete · expr ;, LITINT
stmt -> delete · expr ;, LITFLOAT
stmt -> delete · expr ;, LITDOUBLE
stmt -> delete · expr ;, LITCHAR
stmt -> delete · expr ;, LITSTRING
stmt -> delete · expr ;, null
stmt -> delete · expr ;, ++
stmt -> delete · expr ;, --
stmt -> delete · expr ;, break
stmt -> delete · expr ;, return
stmt -> delete · expr ;, delete
stmt -> delete · expr ;, while
stmt -> delete · expr ;, for
stmt -> delete · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> delete · expr ;, }
stmt -> delete · expr ;, &&
stmt -> delete · expr ;, ||
stmt -> delete · expr ;, +
stmt -> delete · expr ;, -
stmt -> delete · expr ;, *
stmt -> delete · expr ;, /
stmt -> delete · expr ;, %
stmt -> delete · expr ;, !
stmt -> delete · expr ;, else
***EndSet***
***EndState***
***State***
26
I_26_163_261_784_1099_1222
***Set***
stmt -> while · ( expr ) stmt, $
stmt -> while · ( expr ) stmt, namespace
stmt -> while · ( expr ) stmt, {
stmt -> while · ( expr ) stmt, ID
stmt -> while · ( expr ) stmt, void
stmt -> while · ( expr ) stmt, bool
stmt -> while · ( expr ) stmt, int
stmt -> while · ( expr ) stmt, float
stmt -> while · ( expr ) stmt, double
stmt -> while · ( expr ) stmt, char
stmt -> while · ( expr ) stmt, string
stmt -> while · ( expr ) stmt, const
stmt -> while · ( expr ) stmt, extern
stmt -> while · ( expr ) stmt, class
stmt -> while · ( expr ) stmt, (
stmt -> while · ( expr ) stmt, this
stmt -> while · ( expr ) stmt, new
stmt -> while · ( expr ) stmt, LITBOOL
stmt -> while · ( expr ) stmt, LITINT
stmt -> while · ( expr ) stmt, LITFLOAT
stmt -> while · ( expr ) stmt, LITDOUBLE
stmt -> while · ( expr ) stmt, LITCHAR
stmt -> while · ( expr ) stmt, LITSTRING
stmt -> while · ( expr ) stmt, null
stmt -> while · ( expr ) stmt, ++
stmt -> while · ( expr ) stmt, --
stmt -> while · ( expr ) stmt, break
stmt -> while · ( expr ) stmt, return
stmt -> while · ( expr ) stmt, delete
stmt -> while · ( expr ) stmt, while
stmt -> while · ( expr ) stmt, for
stmt -> while · ( expr ) stmt, if
stmt -> while · ( expr ) stmt, }
stmt -> while · ( expr ) stmt, &&
stmt -> while · ( expr ) stmt, ||
stmt -> while · ( expr ) stmt, +
stmt -> while · ( expr ) stmt, -
stmt -> while · ( expr ) stmt, *
stmt -> while · ( expr ) stmt, /
stmt -> while · ( expr ) stmt, %
stmt -> while · ( expr ) stmt, !
stmt -> while · ( expr ) stmt, else
***EndSet***
***EndState***
***State***
27
I_27_164_262_785_1100_1223
***Set***
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
28
I_28_165_263_786_1101_1224
***Set***
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
29
I_29_166_264_787_1102_1225
***Set***
stmt -> break · ;, $
stmt -> break · ;, namespace
stmt -> break · ;, {
stmt -> break · ;, ID
stmt -> break · ;, void
stmt -> break · ;, bool
stmt -> break · ;, int
stmt -> break · ;, float
stmt -> break · ;, double
stmt -> break · ;, char
stmt -> break · ;, string
stmt -> break · ;, const
stmt -> break · ;, extern
stmt -> break · ;, class
stmt -> break · ;, (
stmt -> break · ;, this
stmt -> break · ;, new
stmt -> break · ;, LITBOOL
stmt -> break · ;, LITINT
stmt -> break · ;, LITFLOAT
stmt -> break · ;, LITDOUBLE
stmt -> break · ;, LITCHAR
stmt -> break · ;, LITSTRING
stmt -> break · ;, null
stmt -> break · ;, ++
stmt -> break · ;, --
stmt -> break · ;, break
stmt -> break · ;, return
stmt -> break · ;, delete
stmt -> break · ;, while
stmt -> break · ;, for
stmt -> break · ;, if
stmt -> break · ;, }
stmt -> break · ;, &&
stmt -> break · ;, ||
stmt -> break · ;, +
stmt -> break · ;, -
stmt -> break · ;, *
stmt -> break · ;, /
stmt -> break · ;, %
stmt -> break · ;, !
stmt -> break · ;, else
***EndSet***
***EndState***
***State***
30
I_30_167_265_788_1103_1226
***Set***
stmt -> return · expr ;, $
stmt -> return · ;, $
stmt -> return · expr ;, namespace
stmt -> return · ;, namespace
stmt -> return · expr ;, {
stmt -> return · ;, {
stmt -> return · expr ;, ID
stmt -> return · ;, ID
stmt -> return · expr ;, void
stmt -> return · ;, void
stmt -> return · expr ;, bool
stmt -> return · ;, bool
stmt -> return · expr ;, int
stmt -> return · ;, int
stmt -> return · expr ;, float
stmt -> return · ;, float
stmt -> return · expr ;, double
stmt -> return · ;, double
stmt -> return · expr ;, char
stmt -> return · ;, char
stmt -> return · expr ;, string
stmt -> return · ;, string
stmt -> return · expr ;, const
stmt -> return · ;, const
stmt -> return · expr ;, extern
stmt -> return · ;, extern
stmt -> return · expr ;, class
stmt -> return · ;, class
stmt -> return · expr ;, (
stmt -> return · ;, (
stmt -> return · expr ;, this
stmt -> return · ;, this
stmt -> return · expr ;, new
stmt -> return · ;, new
stmt -> return · expr ;, LITBOOL
stmt -> return · ;, LITBOOL
stmt -> return · expr ;, LITINT
stmt -> return · ;, LITINT
stmt -> return · expr ;, LITFLOAT
stmt -> return · ;, LITFLOAT
stmt -> return · expr ;, LITDOUBLE
stmt -> return · ;, LITDOUBLE
stmt -> return · expr ;, LITCHAR
stmt -> return · ;, LITCHAR
stmt -> return · expr ;, LITSTRING
stmt -> return · ;, LITSTRING
stmt -> return · expr ;, null
stmt -> return · ;, null
stmt -> return · expr ;, ++
stmt -> return · ;, ++
stmt -> return · expr ;, --
stmt -> return · ;, --
stmt -> return · expr ;, break
stmt -> return · ;, break
stmt -> return · expr ;, return
stmt -> return · ;, return
stmt -> return · expr ;, delete
stmt -> return · ;, delete
stmt -> return · expr ;, while
stmt -> return · ;, while
stmt -> return · expr ;, for
stmt -> return · ;, for
stmt -> return · expr ;, if
stmt -> return · ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> return · expr ;, }
stmt -> return · ;, }
stmt -> return · expr ;, &&
stmt -> return · expr ;, ||
stmt -> return · expr ;, +
stmt -> return · expr ;, -
stmt -> return · expr ;, *
stmt -> return · expr ;, /
stmt -> return · expr ;, %
stmt -> return · expr ;, !
stmt -> return · ;, &&
stmt -> return · ;, ||
stmt -> return · ;, +
stmt -> return · ;, -
stmt -> return · ;, *
stmt -> return · ;, /
stmt -> return · ;, %
stmt -> return · ;, !
stmt -> return · expr ;, else
stmt -> return · ;, else
***EndSet***
***EndState***
***State***
31
I_31_89_127_336_370_435_468_532_565_871_904_975
***Set***
primary -> this ·, .
primary -> this ·, ;
primary -> this ·, &&
primary -> this ·, ||
primary -> this ·, >
primary -> this ·, <
primary -> this ·, >=
primary -> this ·, <=
primary -> this ·, ==
primary -> this ·, !=
primary -> this ·, +
primary -> this ·, -
primary -> this ·, *
primary -> this ·, /
primary -> this ·, %
primary -> this ·, )
primary -> this ·, ,
primary -> this ·, ]
***EndSet***
***EndState***
***State***
32
I_32
***Set***
primary -> ( · expr ), .
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
33
I_33_168_266_789_1104_1227
***Set***
statementblock -> { · statements }, $
statementblock -> { · statements }, namespace
statementblock -> { · statements }, {
statementblock -> { · statements }, ID
statementblock -> { · statements }, void
statementblock -> { · statements }, bool
statementblock -> { · statements }, int
statementblock -> { · statements }, float
statementblock -> { · statements }, double
statementblock -> { · statements }, char
statementblock -> { · statements }, string
statementblock -> { · statements }, const
statementblock -> { · statements }, extern
statementblock -> { · statements }, class
statementblock -> { · statements }, (
statementblock -> { · statements }, this
statementblock -> { · statements }, new
statementblock -> { · statements }, LITBOOL
statementblock -> { · statements }, LITINT
statementblock -> { · statements }, LITFLOAT
statementblock -> { · statements }, LITDOUBLE
statementblock -> { · statements }, LITCHAR
statementblock -> { · statements }, LITSTRING
statementblock -> { · statements }, null
statementblock -> { · statements }, ++
statementblock -> { · statements }, --
statementblock -> { · statements }, break
statementblock -> { · statements }, return
statementblock -> { · statements }, delete
statementblock -> { · statements }, while
statementblock -> { · statements }, for
statementblock -> { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { · statements }, }
statementblock -> { · statements }, &&
statementblock -> { · statements }, ||
statementblock -> { · statements }, +
statementblock -> { · statements }, -
statementblock -> { · statements }, *
statementblock -> { · statements }, /
statementblock -> { · statements }, %
statementblock -> { · statements }, !
statementblock -> { · statements }, else
***EndSet***
***EndState***
***State***
34
I_34_91_129_338_372_437_470_534_567_873_906_977_1035
***Set***
incdec -> -- · ID, ;
incdec -> -- · ID, &&
incdec -> -- · ID, ||
incdec -> -- · ID, >
incdec -> -- · ID, <
incdec -> -- · ID, >=
incdec -> -- · ID, <=
incdec -> -- · ID, ==
incdec -> -- · ID, !=
incdec -> -- · ID, +
incdec -> -- · ID, -
incdec -> -- · ID, *
incdec -> -- · ID, /
incdec -> -- · ID, %
incdec -> -- · ID, )
incdec -> -- · ID, ,
incdec -> -- · ID, ]
***EndSet***
***EndState***
***State***
35
I_35_92_130_339_373_438_471_535_568_874_907_978_1036
***Set***
incdec -> ++ · ID, ;
incdec -> ++ · ID, &&
incdec -> ++ · ID, ||
incdec -> ++ · ID, >
incdec -> ++ · ID, <
incdec -> ++ · ID, >=
incdec -> ++ · ID, <=
incdec -> ++ · ID, ==
incdec -> ++ · ID, !=
incdec -> ++ · ID, +
incdec -> ++ · ID, -
incdec -> ++ · ID, *
incdec -> ++ · ID, /
incdec -> ++ · ID, %
incdec -> ++ · ID, )
incdec -> ++ · ID, ,
incdec -> ++ · ID, ]
***EndSet***
***EndState***
***State***
36
I_36_95_133_342_376_441_474_538_571_693_877_910_981
***Set***
lit -> LITBOOL ·, .
lit -> LITBOOL ·, ;
lit -> LITBOOL ·, &&
lit -> LITBOOL ·, ||
lit -> LITBOOL ·, >
lit -> LITBOOL ·, <
lit -> LITBOOL ·, >=
lit -> LITBOOL ·, <=
lit -> LITBOOL ·, ==
lit -> LITBOOL ·, !=
lit -> LITBOOL ·, +
lit -> LITBOOL ·, -
lit -> LITBOOL ·, *
lit -> LITBOOL ·, /
lit -> LITBOOL ·, %
lit -> LITBOOL ·, )
lit -> LITBOOL ·, ,
lit -> LITBOOL ·, ]
***EndSet***
***EndState***
***State***
37
I_37_96_134_343_377_442_475_539_572_694_878_911_982
***Set***
lit -> LITINT ·, .
lit -> LITINT ·, ;
lit -> LITINT ·, &&
lit -> LITINT ·, ||
lit -> LITINT ·, >
lit -> LITINT ·, <
lit -> LITINT ·, >=
lit -> LITINT ·, <=
lit -> LITINT ·, ==
lit -> LITINT ·, !=
lit -> LITINT ·, +
lit -> LITINT ·, -
lit -> LITINT ·, *
lit -> LITINT ·, /
lit -> LITINT ·, %
lit -> LITINT ·, )
lit -> LITINT ·, ,
lit -> LITINT ·, ]
***EndSet***
***EndState***
***State***
38
I_38_97_135_344_378_443_476_540_573_695_879_912_983
***Set***
lit -> LITFLOAT ·, .
lit -> LITFLOAT ·, ;
lit -> LITFLOAT ·, &&
lit -> LITFLOAT ·, ||
lit -> LITFLOAT ·, >
lit -> LITFLOAT ·, <
lit -> LITFLOAT ·, >=
lit -> LITFLOAT ·, <=
lit -> LITFLOAT ·, ==
lit -> LITFLOAT ·, !=
lit -> LITFLOAT ·, +
lit -> LITFLOAT ·, -
lit -> LITFLOAT ·, *
lit -> LITFLOAT ·, /
lit -> LITFLOAT ·, %
lit -> LITFLOAT ·, )
lit -> LITFLOAT ·, ,
lit -> LITFLOAT ·, ]
***EndSet***
***EndState***
***State***
39
I_39_98_136_345_379_444_477_541_574_696_880_913_984
***Set***
lit -> LITDOUBLE ·, .
lit -> LITDOUBLE ·, ;
lit -> LITDOUBLE ·, &&
lit -> LITDOUBLE ·, ||
lit -> LITDOUBLE ·, >
lit -> LITDOUBLE ·, <
lit -> LITDOUBLE ·, >=
lit -> LITDOUBLE ·, <=
lit -> LITDOUBLE ·, ==
lit -> LITDOUBLE ·, !=
lit -> LITDOUBLE ·, +
lit -> LITDOUBLE ·, -
lit -> LITDOUBLE ·, *
lit -> LITDOUBLE ·, /
lit -> LITDOUBLE ·, %
lit -> LITDOUBLE ·, )
lit -> LITDOUBLE ·, ,
lit -> LITDOUBLE ·, ]
***EndSet***
***EndState***
***State***
40
I_40_99_137_346_380_445_478_542_575_697_881_914_985
***Set***
lit -> LITCHAR ·, .
lit -> LITCHAR ·, ;
lit -> LITCHAR ·, &&
lit -> LITCHAR ·, ||
lit -> LITCHAR ·, >
lit -> LITCHAR ·, <
lit -> LITCHAR ·, >=
lit -> LITCHAR ·, <=
lit -> LITCHAR ·, ==
lit -> LITCHAR ·, !=
lit -> LITCHAR ·, +
lit -> LITCHAR ·, -
lit -> LITCHAR ·, *
lit -> LITCHAR ·, /
lit -> LITCHAR ·, %
lit -> LITCHAR ·, )
lit -> LITCHAR ·, ,
lit -> LITCHAR ·, ]
***EndSet***
***EndState***
***State***
41
I_41_100_138_347_381_446_479_543_576_698_882_915_986
***Set***
lit -> LITSTRING ·, .
lit -> LITSTRING ·, ;
lit -> LITSTRING ·, &&
lit -> LITSTRING ·, ||
lit -> LITSTRING ·, >
lit -> LITSTRING ·, <
lit -> LITSTRING ·, >=
lit -> LITSTRING ·, <=
lit -> LITSTRING ·, ==
lit -> LITSTRING ·, !=
lit -> LITSTRING ·, +
lit -> LITSTRING ·, -
lit -> LITSTRING ·, *
lit -> LITSTRING ·, /
lit -> LITSTRING ·, %
lit -> LITSTRING ·, )
lit -> LITSTRING ·, ,
lit -> LITSTRING ·, ]
***EndSet***
***EndState***
***State***
42
I_42_216
***Set***
call -> ID · ( args ), ;
incdec -> ID · ++, ;
incdec -> ID · --, ;
stype -> ID ·, ID
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], ID
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
stype -> ID ·, )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), )
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
***EndSet***
***EndState***
***State***
43
I_43
***Set***
namespaceusings -> namespaceusings namespaceusing ·, namespace
namespaceusings -> namespaceusings namespaceusing ·, {
namespaceusings -> namespaceusings namespaceusing ·, ID
namespaceusings -> namespaceusings namespaceusing ·, void
namespaceusings -> namespaceusings namespaceusing ·, bool
namespaceusings -> namespaceusings namespaceusing ·, int
namespaceusings -> namespaceusings namespaceusing ·, float
namespaceusings -> namespaceusings namespaceusing ·, double
namespaceusings -> namespaceusings namespaceusing ·, char
namespaceusings -> namespaceusings namespaceusing ·, string
namespaceusings -> namespaceusings namespaceusing ·, const
namespaceusings -> namespaceusings namespaceusing ·, extern
namespaceusings -> namespaceusings namespaceusing ·, class
namespaceusings -> namespaceusings namespaceusing ·, (
namespaceusings -> namespaceusings namespaceusing ·, this
namespaceusings -> namespaceusings namespaceusing ·, new
namespaceusings -> namespaceusings namespaceusing ·, LITBOOL
namespaceusings -> namespaceusings namespaceusing ·, LITINT
namespaceusings -> namespaceusings namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusings namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusings namespaceusing ·, LITCHAR
namespaceusings -> namespaceusings namespaceusing ·, LITSTRING
namespaceusings -> namespaceusings namespaceusing ·, null
namespaceusings -> namespaceusings namespaceusing ·, ++
namespaceusings -> namespaceusings namespaceusing ·, --
namespaceusings -> namespaceusings namespaceusing ·, break
namespaceusings -> namespaceusings namespaceusing ·, return
namespaceusings -> namespaceusings namespaceusing ·, delete
namespaceusings -> namespaceusings namespaceusing ·, while
namespaceusings -> namespaceusings namespaceusing ·, for
namespaceusings -> namespaceusings namespaceusing ·, if
namespaceusings -> namespaceusings namespaceusing ·, $
namespaceusings -> namespaceusings namespaceusing ·, using
***EndSet***
***EndState***
***State***
44
I_44
***Set***
S -> importations namespaceusings statements ·, $
statements -> statements · stmt, $
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
45
I_45_170_267_790_1105_1228
***Set***
stmt -> namespaceblock ·, $
stmt -> namespaceblock ·, namespace
stmt -> namespaceblock ·, {
stmt -> namespaceblock ·, ID
stmt -> namespaceblock ·, void
stmt -> namespaceblock ·, bool
stmt -> namespaceblock ·, int
stmt -> namespaceblock ·, float
stmt -> namespaceblock ·, double
stmt -> namespaceblock ·, char
stmt -> namespaceblock ·, string
stmt -> namespaceblock ·, const
stmt -> namespaceblock ·, extern
stmt -> namespaceblock ·, class
stmt -> namespaceblock ·, (
stmt -> namespaceblock ·, this
stmt -> namespaceblock ·, new
stmt -> namespaceblock ·, LITBOOL
stmt -> namespaceblock ·, LITINT
stmt -> namespaceblock ·, LITFLOAT
stmt -> namespaceblock ·, LITDOUBLE
stmt -> namespaceblock ·, LITCHAR
stmt -> namespaceblock ·, LITSTRING
stmt -> namespaceblock ·, null
stmt -> namespaceblock ·, ++
stmt -> namespaceblock ·, --
stmt -> namespaceblock ·, break
stmt -> namespaceblock ·, return
stmt -> namespaceblock ·, delete
stmt -> namespaceblock ·, while
stmt -> namespaceblock ·, for
stmt -> namespaceblock ·, if
stmt -> namespaceblock ·, }
stmt -> namespaceblock ·, &&
stmt -> namespaceblock ·, ||
stmt -> namespaceblock ·, +
stmt -> namespaceblock ·, -
stmt -> namespaceblock ·, *
stmt -> namespaceblock ·, /
stmt -> namespaceblock ·, %
stmt -> namespaceblock ·, !
stmt -> namespaceblock ·, else
***EndSet***
***EndState***
***State***
46
I_46_171_268_791_1106_1229
***Set***
stmt -> statementblock ·, $
stmt -> statementblock ·, namespace
stmt -> statementblock ·, {
stmt -> statementblock ·, ID
stmt -> statementblock ·, void
stmt -> statementblock ·, bool
stmt -> statementblock ·, int
stmt -> statementblock ·, float
stmt -> statementblock ·, double
stmt -> statementblock ·, char
stmt -> statementblock ·, string
stmt -> statementblock ·, const
stmt -> statementblock ·, extern
stmt -> statementblock ·, class
stmt -> statementblock ·, (
stmt -> statementblock ·, this
stmt -> statementblock ·, new
stmt -> statementblock ·, LITBOOL
stmt -> statementblock ·, LITINT
stmt -> statementblock ·, LITFLOAT
stmt -> statementblock ·, LITDOUBLE
stmt -> statementblock ·, LITCHAR
stmt -> statementblock ·, LITSTRING
stmt -> statementblock ·, null
stmt -> statementblock ·, ++
stmt -> statementblock ·, --
stmt -> statementblock ·, break
stmt -> statementblock ·, return
stmt -> statementblock ·, delete
stmt -> statementblock ·, while
stmt -> statementblock ·, for
stmt -> statementblock ·, if
stmt -> statementblock ·, }
stmt -> statementblock ·, &&
stmt -> statementblock ·, ||
stmt -> statementblock ·, +
stmt -> statementblock ·, -
stmt -> statementblock ·, *
stmt -> statementblock ·, /
stmt -> statementblock ·, %
stmt -> statementblock ·, !
stmt -> statementblock ·, else
***EndSet***
***EndState***
***State***
47
I_47_172
***Set***
statements -> stmt ·, $
statements -> stmt ·, namespace
statements -> stmt ·, {
statements -> stmt ·, ID
statements -> stmt ·, void
statements -> stmt ·, bool
statements -> stmt ·, int
statements -> stmt ·, float
statements -> stmt ·, double
statements -> stmt ·, char
statements -> stmt ·, string
statements -> stmt ·, const
statements -> stmt ·, extern
statements -> stmt ·, class
statements -> stmt ·, (
statements -> stmt ·, this
statements -> stmt ·, new
statements -> stmt ·, LITBOOL
statements -> stmt ·, LITINT
statements -> stmt ·, LITFLOAT
statements -> stmt ·, LITDOUBLE
statements -> stmt ·, LITCHAR
statements -> stmt ·, LITSTRING
statements -> stmt ·, null
statements -> stmt ·, ++
statements -> stmt ·, --
statements -> stmt ·, break
statements -> stmt ·, return
statements -> stmt ·, delete
statements -> stmt ·, while
statements -> stmt ·, for
statements -> stmt ·, if
statements -> stmt ·, }
***EndSet***
***EndState***
***State***
48
I_48_173_270_793_1108_1231
***Set***
stmt -> declstmt ·, $
stmt -> declstmt ·, namespace
stmt -> declstmt ·, {
stmt -> declstmt ·, ID
stmt -> declstmt ·, void
stmt -> declstmt ·, bool
stmt -> declstmt ·, int
stmt -> declstmt ·, float
stmt -> declstmt ·, double
stmt -> declstmt ·, char
stmt -> declstmt ·, string
stmt -> declstmt ·, const
stmt -> declstmt ·, extern
stmt -> declstmt ·, class
stmt -> declstmt ·, (
stmt -> declstmt ·, this
stmt -> declstmt ·, new
stmt -> declstmt ·, LITBOOL
stmt -> declstmt ·, LITINT
stmt -> declstmt ·, LITFLOAT
stmt -> declstmt ·, LITDOUBLE
stmt -> declstmt ·, LITCHAR
stmt -> declstmt ·, LITSTRING
stmt -> declstmt ·, null
stmt -> declstmt ·, ++
stmt -> declstmt ·, --
stmt -> declstmt ·, break
stmt -> declstmt ·, return
stmt -> declstmt ·, delete
stmt -> declstmt ·, while
stmt -> declstmt ·, for
stmt -> declstmt ·, if
stmt -> declstmt ·, }
stmt -> declstmt ·, &&
stmt -> declstmt ·, ||
stmt -> declstmt ·, +
stmt -> declstmt ·, -
stmt -> declstmt ·, *
stmt -> declstmt ·, /
stmt -> declstmt ·, %
stmt -> declstmt ·, !
stmt -> declstmt ·, else
***EndSet***
***EndState***
***State***
49
I_49_174_271_794_1109_1232
***Set***
stmt -> stmtexpr · ;, $
stmt -> stmtexpr · ;, namespace
stmt -> stmtexpr · ;, {
stmt -> stmtexpr · ;, ID
stmt -> stmtexpr · ;, void
stmt -> stmtexpr · ;, bool
stmt -> stmtexpr · ;, int
stmt -> stmtexpr · ;, float
stmt -> stmtexpr · ;, double
stmt -> stmtexpr · ;, char
stmt -> stmtexpr · ;, string
stmt -> stmtexpr · ;, const
stmt -> stmtexpr · ;, extern
stmt -> stmtexpr · ;, class
stmt -> stmtexpr · ;, (
stmt -> stmtexpr · ;, this
stmt -> stmtexpr · ;, new
stmt -> stmtexpr · ;, LITBOOL
stmt -> stmtexpr · ;, LITINT
stmt -> stmtexpr · ;, LITFLOAT
stmt -> stmtexpr · ;, LITDOUBLE
stmt -> stmtexpr · ;, LITCHAR
stmt -> stmtexpr · ;, LITSTRING
stmt -> stmtexpr · ;, null
stmt -> stmtexpr · ;, ++
stmt -> stmtexpr · ;, --
stmt -> stmtexpr · ;, break
stmt -> stmtexpr · ;, return
stmt -> stmtexpr · ;, delete
stmt -> stmtexpr · ;, while
stmt -> stmtexpr · ;, for
stmt -> stmtexpr · ;, if
stmt -> stmtexpr · ;, }
stmt -> stmtexpr · ;, &&
stmt -> stmtexpr · ;, ||
stmt -> stmtexpr · ;, +
stmt -> stmtexpr · ;, -
stmt -> stmtexpr · ;, *
stmt -> stmtexpr · ;, /
stmt -> stmtexpr · ;, %
stmt -> stmtexpr · ;, !
stmt -> stmtexpr · ;, else
***EndSet***
***EndState***
***State***
50
I_50_1039
***Set***
stmtexpr -> assign ·, ;
stmtexpr -> assign ·, )
***EndSet***
***EndState***
***State***
51
I_51_1040
***Set***
stmtexpr -> call ·, ;
primary -> call ·, .
stmtexpr -> call ·, )
***EndSet***
***EndState***
***State***
52
I_52_104_142_351
***Set***
lvalue -> indexaccess ·, =
lvalue -> indexaccess ·, +=
lvalue -> indexaccess ·, -=
lvalue -> indexaccess ·, *=
lvalue -> indexaccess ·, /=
lvalue -> indexaccess ·, %=
primary -> indexaccess ·, .
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, )
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
53
I_53_1041
***Set***
stmtexpr -> newobj ·, ;
primary -> newobj ·, .
stmtexpr -> newobj ·, )
***EndSet***
***EndState***
***State***
54
I_54_106_144_353_386_451_484_548_581_887_920_991
***Set***
primary -> newarr ·, .
primary -> newarr ·, ;
primary -> newarr ·, &&
primary -> newarr ·, ||
primary -> newarr ·, >
primary -> newarr ·, <
primary -> newarr ·, >=
primary -> newarr ·, <=
primary -> newarr ·, ==
primary -> newarr ·, !=
primary -> newarr ·, +
primary -> newarr ·, -
primary -> newarr ·, *
primary -> newarr ·, /
primary -> newarr ·, %
primary -> newarr ·, )
primary -> newarr ·, ,
primary -> newarr ·, ]
***EndSet***
***EndState***
***State***
55
I_55_1042
***Set***
stmtexpr -> incdec ·, ;
stmtexpr -> incdec ·, )
***EndSet***
***EndState***
***State***
56
I_56_175_272_705_795_1110_1233
***Set***
declstmt -> type · ID = expr ;, $
declstmt -> type · ID ( params ) { statements }, $
declstmt -> type · ID = expr ;, namespace
declstmt -> type · ID ( params ) { statements }, namespace
declstmt -> type · ID = expr ;, {
declstmt -> type · ID ( params ) { statements }, {
declstmt -> type · ID = expr ;, ID
declstmt -> type · ID ( params ) { statements }, ID
declstmt -> type · ID = expr ;, void
declstmt -> type · ID ( params ) { statements }, void
declstmt -> type · ID = expr ;, bool
declstmt -> type · ID ( params ) { statements }, bool
declstmt -> type · ID = expr ;, int
declstmt -> type · ID ( params ) { statements }, int
declstmt -> type · ID = expr ;, float
declstmt -> type · ID ( params ) { statements }, float
declstmt -> type · ID = expr ;, double
declstmt -> type · ID ( params ) { statements }, double
declstmt -> type · ID = expr ;, char
declstmt -> type · ID ( params ) { statements }, char
declstmt -> type · ID = expr ;, string
declstmt -> type · ID ( params ) { statements }, string
declstmt -> type · ID = expr ;, const
declstmt -> type · ID ( params ) { statements }, const
declstmt -> type · ID = expr ;, extern
declstmt -> type · ID ( params ) { statements }, extern
declstmt -> type · ID = expr ;, class
declstmt -> type · ID ( params ) { statements }, class
declstmt -> type · ID = expr ;, (
declstmt -> type · ID ( params ) { statements }, (
declstmt -> type · ID = expr ;, this
declstmt -> type · ID ( params ) { statements }, this
declstmt -> type · ID = expr ;, new
declstmt -> type · ID ( params ) { statements }, new
declstmt -> type · ID = expr ;, LITBOOL
declstmt -> type · ID ( params ) { statements }, LITBOOL
declstmt -> type · ID = expr ;, LITINT
declstmt -> type · ID ( params ) { statements }, LITINT
declstmt -> type · ID = expr ;, LITFLOAT
declstmt -> type · ID ( params ) { statements }, LITFLOAT
declstmt -> type · ID = expr ;, LITDOUBLE
declstmt -> type · ID ( params ) { statements }, LITDOUBLE
declstmt -> type · ID = expr ;, LITCHAR
declstmt -> type · ID ( params ) { statements }, LITCHAR
declstmt -> type · ID = expr ;, LITSTRING
declstmt -> type · ID ( params ) { statements }, LITSTRING
declstmt -> type · ID = expr ;, null
declstmt -> type · ID ( params ) { statements }, null
declstmt -> type · ID = expr ;, ++
declstmt -> type · ID ( params ) { statements }, ++
declstmt -> type · ID = expr ;, --
declstmt -> type · ID ( params ) { statements }, --
declstmt -> type · ID = expr ;, break
declstmt -> type · ID ( params ) { statements }, break
declstmt -> type · ID = expr ;, return
declstmt -> type · ID ( params ) { statements }, return
declstmt -> type · ID = expr ;, delete
declstmt -> type · ID ( params ) { statements }, delete
declstmt -> type · ID = expr ;, while
declstmt -> type · ID ( params ) { statements }, while
declstmt -> type · ID = expr ;, for
declstmt -> type · ID ( params ) { statements }, for
declstmt -> type · ID = expr ;, if
declstmt -> type · ID ( params ) { statements }, if
declstmt -> type · ID = expr ;, }
declstmt -> type · ID ( params ) { statements }, }
declstmt -> type · ID = expr ;, &&
declstmt -> type · ID ( params ) { statements }, &&
declstmt -> type · ID = expr ;, ||
declstmt -> type · ID ( params ) { statements }, ||
declstmt -> type · ID = expr ;, +
declstmt -> type · ID ( params ) { statements }, +
declstmt -> type · ID = expr ;, -
declstmt -> type · ID ( params ) { statements }, -
declstmt -> type · ID = expr ;, *
declstmt -> type · ID ( params ) { statements }, *
declstmt -> type · ID = expr ;, /
declstmt -> type · ID ( params ) { statements }, /
declstmt -> type · ID = expr ;, %
declstmt -> type · ID ( params ) { statements }, %
declstmt -> type · ID = expr ;, !
declstmt -> type · ID ( params ) { statements }, !
declstmt -> type · ID = expr ;, else
declstmt -> type · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
57
I_57_218
***Set***
type -> stype ·, ID
type -> stype ·, )
***EndSet***
***EndState***
***State***
58
I_58_219
***Set***
type -> arrtype ·, ID
type -> arrtype ·, )
***EndSet***
***EndState***
***State***
59
I_59_220
***Set***
stype -> primitive ·, ID
primitiveBracket -> primitive · [ optidx ], ID
stype -> primitive ·, )
primitiveBracket -> primitive · [ optidx ], )
***EndSet***
***EndState***
***State***
60
I_60
***Set***
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
memberaccess -> primary · . ID, [
memberaccess -> primary · . ID, .
***EndSet***
***EndState***
***State***
61
I_61_115_153_362_392_457_489_554_586_893_925_996
***Set***
primary -> lit ·, .
primary -> lit ·, ;
primary -> lit ·, &&
primary -> lit ·, ||
primary -> lit ·, >
primary -> lit ·, <
primary -> lit ·, >=
primary -> lit ·, <=
primary -> lit ·, ==
primary -> lit ·, !=
primary -> lit ·, +
primary -> lit ·, -
primary -> lit ·, *
primary -> lit ·, /
primary -> lit ·, %
primary -> lit ·, )
primary -> lit ·, ,
primary -> lit ·, ]
***EndSet***
***EndState***
***State***
62
I_62_155_364
***Set***
assign -> lvalue · = expr, ;
assign -> lvalue · += expr, ;
assign -> lvalue · -= expr, ;
assign -> lvalue · *= expr, ;
assign -> lvalue · /= expr, ;
assign -> lvalue · %= expr, ;
assign -> lvalue · = expr, )
assign -> lvalue · += expr, )
assign -> lvalue · -= expr, )
assign -> lvalue · *= expr, )
assign -> lvalue · /= expr, )
assign -> lvalue · %= expr, )
assign -> lvalue · = expr, ,
assign -> lvalue · += expr, ,
assign -> lvalue · -= expr, ,
assign -> lvalue · *= expr, ,
assign -> lvalue · /= expr, ,
assign -> lvalue · %= expr, ,
***EndSet***
***EndState***
***State***
63
I_63_117_156_365_1043
***Set***
call -> memberaccess · ( args ), ;
lvalue -> memberaccess ·, =
lvalue -> memberaccess ·, +=
lvalue -> memberaccess ·, -=
lvalue -> memberaccess ·, *=
lvalue -> memberaccess ·, /=
lvalue -> memberaccess ·, %=
indexaccess -> memberaccess · [ aexpr ], =
indexaccess -> memberaccess · [ aexpr ], +=
indexaccess -> memberaccess · [ aexpr ], -=
indexaccess -> memberaccess · [ aexpr ], *=
indexaccess -> memberaccess · [ aexpr ], /=
indexaccess -> memberaccess · [ aexpr ], %=
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
indexaccess -> memberaccess · [ aexpr ], ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
64
I_64_222
***Set***
arrtype -> stypeBracket ·, ID
arrtype -> stypeBracket ·, )
***EndSet***
***EndState***
***State***
65
I_65_223
***Set***
stypeBracket -> idBracket ·, ID
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
stypeBracket -> idBracket ·, )
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
***EndSet***
***EndState***
***State***
66
I_66_86_208_224_279_619_663_726_749_808_831_1125_1148_1183
***Set***
stypeBracket -> primitiveBracket ·, ID
stypeBracket -> primitiveBracket ·, .
stypeBracket -> primitiveBracket ·, ;
stypeBracket -> primitiveBracket ·, &&
stypeBracket -> primitiveBracket ·, ||
stypeBracket -> primitiveBracket ·, >
stypeBracket -> primitiveBracket ·, <
stypeBracket -> primitiveBracket ·, >=
stypeBracket -> primitiveBracket ·, <=
stypeBracket -> primitiveBracket ·, ==
stypeBracket -> primitiveBracket ·, !=
stypeBracket -> primitiveBracket ·, +
stypeBracket -> primitiveBracket ·, -
stypeBracket -> primitiveBracket ·, *
stypeBracket -> primitiveBracket ·, /
stypeBracket -> primitiveBracket ·, %
stypeBracket -> primitiveBracket ·, )
stypeBracket -> primitiveBracket ·, ,
stypeBracket -> primitiveBracket ·, ]
***EndSet***
***EndState***
***State***
67
I_67
***Set***
importation -> import < LITSTRING > ·, using
importation -> import < LITSTRING > ·, namespace
importation -> import < LITSTRING > ·, {
importation -> import < LITSTRING > ·, ID
importation -> import < LITSTRING > ·, void
importation -> import < LITSTRING > ·, bool
importation -> import < LITSTRING > ·, int
importation -> import < LITSTRING > ·, float
importation -> import < LITSTRING > ·, double
importation -> import < LITSTRING > ·, char
importation -> import < LITSTRING > ·, string
importation -> import < LITSTRING > ·, const
importation -> import < LITSTRING > ·, extern
importation -> import < LITSTRING > ·, class
importation -> import < LITSTRING > ·, (
importation -> import < LITSTRING > ·, this
importation -> import < LITSTRING > ·, new
importation -> import < LITSTRING > ·, LITBOOL
importation -> import < LITSTRING > ·, LITINT
importation -> import < LITSTRING > ·, LITFLOAT
importation -> import < LITSTRING > ·, LITDOUBLE
importation -> import < LITSTRING > ·, LITCHAR
importation -> import < LITSTRING > ·, LITSTRING
importation -> import < LITSTRING > ·, null
importation -> import < LITSTRING > ·, ++
importation -> import < LITSTRING > ·, --
importation -> import < LITSTRING > ·, break
importation -> import < LITSTRING > ·, return
importation -> import < LITSTRING > ·, delete
importation -> import < LITSTRING > ·, while
importation -> import < LITSTRING > ·, for
importation -> import < LITSTRING > ·, if
importation -> import < LITSTRING > ·, $
importation -> import < LITSTRING > ·, import
***EndSet***
***EndState***
***State***
68
I_68
***Set***
namespaceusing -> using ID ; ·, namespace
namespaceusing -> using ID ; ·, {
namespaceusing -> using ID ; ·, ID
namespaceusing -> using ID ; ·, void
namespaceusing -> using ID ; ·, bool
namespaceusing -> using ID ; ·, int
namespaceusing -> using ID ; ·, float
namespaceusing -> using ID ; ·, double
namespaceusing -> using ID ; ·, char
namespaceusing -> using ID ; ·, string
namespaceusing -> using ID ; ·, const
namespaceusing -> using ID ; ·, extern
namespaceusing -> using ID ; ·, class
namespaceusing -> using ID ; ·, (
namespaceusing -> using ID ; ·, this
namespaceusing -> using ID ; ·, new
namespaceusing -> using ID ; ·, LITBOOL
namespaceusing -> using ID ; ·, LITINT
namespaceusing -> using ID ; ·, LITFLOAT
namespaceusing -> using ID ; ·, LITDOUBLE
namespaceusing -> using ID ; ·, LITCHAR
namespaceusing -> using ID ; ·, LITSTRING
namespaceusing -> using ID ; ·, null
namespaceusing -> using ID ; ·, ++
namespaceusing -> using ID ; ·, --
namespaceusing -> using ID ; ·, break
namespaceusing -> using ID ; ·, return
namespaceusing -> using ID ; ·, delete
namespaceusing -> using ID ; ·, while
namespaceusing -> using ID ; ·, for
namespaceusing -> using ID ; ·, if
namespaceusing -> using ID ; ·, $
namespaceusing -> using ID ; ·, using
***EndSet***
***EndState***
***State***
69
I_69_318_501_1047_1278_1343
***Set***
namespaceblock -> namespace ID · { statements }, $
namespaceblock -> namespace ID · { statements }, namespace
namespaceblock -> namespace ID · { statements }, {
namespaceblock -> namespace ID · { statements }, ID
namespaceblock -> namespace ID · { statements }, void
namespaceblock -> namespace ID · { statements }, bool
namespaceblock -> namespace ID · { statements }, int
namespaceblock -> namespace ID · { statements }, float
namespaceblock -> namespace ID · { statements }, double
namespaceblock -> namespace ID · { statements }, char
namespaceblock -> namespace ID · { statements }, string
namespaceblock -> namespace ID · { statements }, const
namespaceblock -> namespace ID · { statements }, extern
namespaceblock -> namespace ID · { statements }, class
namespaceblock -> namespace ID · { statements }, (
namespaceblock -> namespace ID · { statements }, this
namespaceblock -> namespace ID · { statements }, new
namespaceblock -> namespace ID · { statements }, LITBOOL
namespaceblock -> namespace ID · { statements }, LITINT
namespaceblock -> namespace ID · { statements }, LITFLOAT
namespaceblock -> namespace ID · { statements }, LITDOUBLE
namespaceblock -> namespace ID · { statements }, LITCHAR
namespaceblock -> namespace ID · { statements }, LITSTRING
namespaceblock -> namespace ID · { statements }, null
namespaceblock -> namespace ID · { statements }, ++
namespaceblock -> namespace ID · { statements }, --
namespaceblock -> namespace ID · { statements }, break
namespaceblock -> namespace ID · { statements }, return
namespaceblock -> namespace ID · { statements }, delete
namespaceblock -> namespace ID · { statements }, while
namespaceblock -> namespace ID · { statements }, for
namespaceblock -> namespace ID · { statements }, if
namespaceblock -> namespace ID · { statements }, }
namespaceblock -> namespace ID · { statements }, &&
namespaceblock -> namespace ID · { statements }, ||
namespaceblock -> namespace ID · { statements }, +
namespaceblock -> namespace ID · { statements }, -
namespaceblock -> namespace ID · { statements }, *
namespaceblock -> namespace ID · { statements }, /
namespaceblock -> namespace ID · { statements }, %
namespaceblock -> namespace ID · { statements }, !
namespaceblock -> namespace ID · { statements }, else
***EndSet***
***EndState***
***State***
70
I_70
***Set***
stype -> ID ·, ID
idBracket -> ID · [ optidx ], ID
***EndSet***
***EndState***
***State***
71
I_71_319_502_963_1048_1279_1344
***Set***
declstmt -> extern type · ID ( params ) ;, $
declstmt -> extern type · ID ( params ) ;, namespace
declstmt -> extern type · ID ( params ) ;, {
declstmt -> extern type · ID ( params ) ;, ID
declstmt -> extern type · ID ( params ) ;, void
declstmt -> extern type · ID ( params ) ;, bool
declstmt -> extern type · ID ( params ) ;, int
declstmt -> extern type · ID ( params ) ;, float
declstmt -> extern type · ID ( params ) ;, double
declstmt -> extern type · ID ( params ) ;, char
declstmt -> extern type · ID ( params ) ;, string
declstmt -> extern type · ID ( params ) ;, const
declstmt -> extern type · ID ( params ) ;, extern
declstmt -> extern type · ID ( params ) ;, class
declstmt -> extern type · ID ( params ) ;, (
declstmt -> extern type · ID ( params ) ;, this
declstmt -> extern type · ID ( params ) ;, new
declstmt -> extern type · ID ( params ) ;, LITBOOL
declstmt -> extern type · ID ( params ) ;, LITINT
declstmt -> extern type · ID ( params ) ;, LITFLOAT
declstmt -> extern type · ID ( params ) ;, LITDOUBLE
declstmt -> extern type · ID ( params ) ;, LITCHAR
declstmt -> extern type · ID ( params ) ;, LITSTRING
declstmt -> extern type · ID ( params ) ;, null
declstmt -> extern type · ID ( params ) ;, ++
declstmt -> extern type · ID ( params ) ;, --
declstmt -> extern type · ID ( params ) ;, break
declstmt -> extern type · ID ( params ) ;, return
declstmt -> extern type · ID ( params ) ;, delete
declstmt -> extern type · ID ( params ) ;, while
declstmt -> extern type · ID ( params ) ;, for
declstmt -> extern type · ID ( params ) ;, if
declstmt -> extern type · ID ( params ) ;, }
declstmt -> extern type · ID ( params ) ;, &&
declstmt -> extern type · ID ( params ) ;, ||
declstmt -> extern type · ID ( params ) ;, +
declstmt -> extern type · ID ( params ) ;, -
declstmt -> extern type · ID ( params ) ;, *
declstmt -> extern type · ID ( params ) ;, /
declstmt -> extern type · ID ( params ) ;, %
declstmt -> extern type · ID ( params ) ;, !
declstmt -> extern type · ID ( params ) ;, else
***EndSet***
***EndState***
***State***
72
I_72_85_207_278_618_662_725_748_807_830_1124_1147_1182
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, .
stypeBracket -> idBracket ·, ;
stypeBracket -> idBracket ·, &&
stypeBracket -> idBracket ·, ||
stypeBracket -> idBracket ·, >
stypeBracket -> idBracket ·, <
stypeBracket -> idBracket ·, >=
stypeBracket -> idBracket ·, <=
stypeBracket -> idBracket ·, ==
stypeBracket -> idBracket ·, !=
stypeBracket -> idBracket ·, +
stypeBracket -> idBracket ·, -
stypeBracket -> idBracket ·, *
stypeBracket -> idBracket ·, /
stypeBracket -> idBracket ·, %
stypeBracket -> idBracket ·, )
stypeBracket -> idBracket ·, ,
stypeBracket -> idBracket ·, ]
***EndSet***
***EndState***
***State***
73
I_73_320_503_964_1049_1280_1345
***Set***
declstmt -> const type · ID = lit ;, $
declstmt -> const type · ID = lit ;, namespace
declstmt -> const type · ID = lit ;, {
declstmt -> const type · ID = lit ;, ID
declstmt -> const type · ID = lit ;, void
declstmt -> const type · ID = lit ;, bool
declstmt -> const type · ID = lit ;, int
declstmt -> const type · ID = lit ;, float
declstmt -> const type · ID = lit ;, double
declstmt -> const type · ID = lit ;, char
declstmt -> const type · ID = lit ;, string
declstmt -> const type · ID = lit ;, const
declstmt -> const type · ID = lit ;, extern
declstmt -> const type · ID = lit ;, class
declstmt -> const type · ID = lit ;, (
declstmt -> const type · ID = lit ;, this
declstmt -> const type · ID = lit ;, new
declstmt -> const type · ID = lit ;, LITBOOL
declstmt -> const type · ID = lit ;, LITINT
declstmt -> const type · ID = lit ;, LITFLOAT
declstmt -> const type · ID = lit ;, LITDOUBLE
declstmt -> const type · ID = lit ;, LITCHAR
declstmt -> const type · ID = lit ;, LITSTRING
declstmt -> const type · ID = lit ;, null
declstmt -> const type · ID = lit ;, ++
declstmt -> const type · ID = lit ;, --
declstmt -> const type · ID = lit ;, break
declstmt -> const type · ID = lit ;, return
declstmt -> const type · ID = lit ;, delete
declstmt -> const type · ID = lit ;, while
declstmt -> const type · ID = lit ;, for
declstmt -> const type · ID = lit ;, if
declstmt -> const type · ID = lit ;, }
declstmt -> const type · ID = lit ;, &&
declstmt -> const type · ID = lit ;, ||
declstmt -> const type · ID = lit ;, +
declstmt -> const type · ID = lit ;, -
declstmt -> const type · ID = lit ;, *
declstmt -> const type · ID = lit ;, /
declstmt -> const type · ID = lit ;, %
declstmt -> const type · ID = lit ;, !
declstmt -> const type · ID = lit ;, else
***EndSet***
***EndState***
***State***
74
I_74_321_504_965_1050_1281_1346
***Set***
declstmt -> class ID · inherit { declstatements }, $
declstmt -> class ID · inherit { declstatements }, namespace
declstmt -> class ID · inherit { declstatements }, {
declstmt -> class ID · inherit { declstatements }, ID
declstmt -> class ID · inherit { declstatements }, void
declstmt -> class ID · inherit { declstatements }, bool
declstmt -> class ID · inherit { declstatements }, int
declstmt -> class ID · inherit { declstatements }, float
declstmt -> class ID · inherit { declstatements }, double
declstmt -> class ID · inherit { declstatements }, char
declstmt -> class ID · inherit { declstatements }, string
declstmt -> class ID · inherit { declstatements }, const
declstmt -> class ID · inherit { declstatements }, extern
declstmt -> class ID · inherit { declstatements }, class
declstmt -> class ID · inherit { declstatements }, (
declstmt -> class ID · inherit { declstatements }, this
declstmt -> class ID · inherit { declstatements }, new
declstmt -> class ID · inherit { declstatements }, LITBOOL
declstmt -> class ID · inherit { declstatements }, LITINT
declstmt -> class ID · inherit { declstatements }, LITFLOAT
declstmt -> class ID · inherit { declstatements }, LITDOUBLE
declstmt -> class ID · inherit { declstatements }, LITCHAR
declstmt -> class ID · inherit { declstatements }, LITSTRING
declstmt -> class ID · inherit { declstatements }, null
declstmt -> class ID · inherit { declstatements }, ++
declstmt -> class ID · inherit { declstatements }, --
declstmt -> class ID · inherit { declstatements }, break
declstmt -> class ID · inherit { declstatements }, return
declstmt -> class ID · inherit { declstatements }, delete
declstmt -> class ID · inherit { declstatements }, while
declstmt -> class ID · inherit { declstatements }, for
declstmt -> class ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class ID · inherit { declstatements }, }
declstmt -> class ID · inherit { declstatements }, &&
declstmt -> class ID · inherit { declstatements }, ||
declstmt -> class ID · inherit { declstatements }, +
declstmt -> class ID · inherit { declstatements }, -
declstmt -> class ID · inherit { declstatements }, *
declstmt -> class ID · inherit { declstatements }, /
declstmt -> class ID · inherit { declstatements }, %
declstmt -> class ID · inherit { declstatements }, !
declstmt -> class ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
75
I_82_204_275_615_659_722_745_804_827_1121_1144_1179_1234
***Set***
newobj -> new ID · ( ), ;
newobj -> new ID · ( ), .
idBracket -> ID · [ optidx ], .
newobj -> new ID · ( ), &&
newobj -> new ID · ( ), ||
newobj -> new ID · ( ), >
newobj -> new ID · ( ), <
newobj -> new ID · ( ), >=
newobj -> new ID · ( ), <=
newobj -> new ID · ( ), ==
newobj -> new ID · ( ), !=
newobj -> new ID · ( ), +
newobj -> new ID · ( ), -
newobj -> new ID · ( ), *
newobj -> new ID · ( ), /
newobj -> new ID · ( ), %
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
newobj -> new ID · ( ), )
idBracket -> ID · [ optidx ], )
newobj -> new ID · ( ), ,
idBracket -> ID · [ optidx ], ,
newobj -> new ID · ( ), ]
idBracket -> ID · [ optidx ], ]
***EndSet***
***EndState***
***State***
76
I_83_205_276_616_660_723_746_805_828_1122_1145_1180
***Set***
primitiveBracket -> primitive · [ optidx ], .
primitiveBracket -> primitive · [ optidx ], ;
primitiveBracket -> primitive · [ optidx ], &&
primitiveBracket -> primitive · [ optidx ], ||
primitiveBracket -> primitive · [ optidx ], >
primitiveBracket -> primitive · [ optidx ], <
primitiveBracket -> primitive · [ optidx ], >=
primitiveBracket -> primitive · [ optidx ], <=
primitiveBracket -> primitive · [ optidx ], ==
primitiveBracket -> primitive · [ optidx ], !=
primitiveBracket -> primitive · [ optidx ], +
primitiveBracket -> primitive · [ optidx ], -
primitiveBracket -> primitive · [ optidx ], *
primitiveBracket -> primitive · [ optidx ], /
primitiveBracket -> primitive · [ optidx ], %
primitiveBracket -> primitive · [ optidx ], )
primitiveBracket -> primitive · [ optidx ], ,
primitiveBracket -> primitive · [ optidx ], ]
***EndSet***
***EndState***
***State***
77
I_84_206_277_617_661_724_747_806_829_1123_1146_1181
***Set***
newarr -> new stypeBracket ·, .
newarr -> new stypeBracket ·, ;
newarr -> new stypeBracket ·, &&
newarr -> new stypeBracket ·, ||
newarr -> new stypeBracket ·, >
newarr -> new stypeBracket ·, <
newarr -> new stypeBracket ·, >=
newarr -> new stypeBracket ·, <=
newarr -> new stypeBracket ·, ==
newarr -> new stypeBracket ·, !=
newarr -> new stypeBracket ·, +
newarr -> new stypeBracket ·, -
newarr -> new stypeBracket ·, *
newarr -> new stypeBracket ·, /
newarr -> new stypeBracket ·, %
newarr -> new stypeBracket ·, )
newarr -> new stypeBracket ·, ,
newarr -> new stypeBracket ·, ]
***EndSet***
***EndState***
***State***
78
I_90_128_337_371_436_469_533_566_872_905_976
***Set***
primary -> ( · expr ), .
cast -> ( · type ) factor, ;
primary -> ( · expr ), ;
cast -> ( · type ) factor, &&
primary -> ( · expr ), &&
cast -> ( · type ) factor, ||
primary -> ( · expr ), ||
cast -> ( · type ) factor, >
primary -> ( · expr ), >
cast -> ( · type ) factor, <
primary -> ( · expr ), <
cast -> ( · type ) factor, >=
primary -> ( · expr ), >=
cast -> ( · type ) factor, <=
primary -> ( · expr ), <=
cast -> ( · type ) factor, ==
primary -> ( · expr ), ==
cast -> ( · type ) factor, !=
primary -> ( · expr ), !=
cast -> ( · type ) factor, +
primary -> ( · expr ), +
cast -> ( · type ) factor, -
primary -> ( · expr ), -
cast -> ( · type ) factor, *
primary -> ( · expr ), *
cast -> ( · type ) factor, /
primary -> ( · expr ), /
cast -> ( · type ) factor, %
primary -> ( · expr ), %
expr -> · assign, )
expr -> · nexpr, )
type -> · arrtype, )
type -> · stype, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
arrtype -> · stypeBracket, )
stype -> · primitive, )
stype -> · ID, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
primitive -> · void, )
primitive -> · bool, )
primitive -> · int, )
primitive -> · float, )
primitive -> · double, )
primitive -> · char, )
primitive -> · string, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
cast -> ( · type ) factor, )
primary -> ( · expr ), )
cast -> ( · type ) factor, ,
primary -> ( · expr ), ,
cast -> ( · type ) factor, ]
primary -> ( · expr ), ]
***EndSet***
***EndState***
***State***
79
I_93_131_340_374_439_472_536_569_875_908_979
***Set***
factor -> - · factor, ;
factor -> - · factor, &&
factor -> - · factor, ||
factor -> - · factor, >
factor -> - · factor, <
factor -> - · factor, >=
factor -> - · factor, <=
factor -> - · factor, ==
factor -> - · factor, !=
factor -> - · factor, +
factor -> - · factor, -
factor -> - · factor, *
factor -> - · factor, /
factor -> - · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> - · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> - · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> - · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
80
I_94_132_341_375_440_473_537_570_876_909_980
***Set***
factor -> ! · factor, ;
factor -> ! · factor, &&
factor -> ! · factor, ||
factor -> ! · factor, >
factor -> ! · factor, <
factor -> ! · factor, >=
factor -> ! · factor, <=
factor -> ! · factor, ==
factor -> ! · factor, !=
factor -> ! · factor, +
factor -> ! · factor, -
factor -> ! · factor, *
factor -> ! · factor, /
factor -> ! · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> ! · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> ! · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> ! · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
81
I_101_139_348_1037
***Set***
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
call -> ID · ( args ), .
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), ;
idBracket -> ID · [ optidx ], .
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
idBracket -> ID · [ optidx ], ;
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
82
I_102_140_349
***Set***
expr -> assign ·, ;
expr -> assign ·, )
expr -> assign ·, ,
***EndSet***
***EndState***
***State***
83
I_103_141_350_383_448_481_545_578_884_917_988
***Set***
primary -> call ·, .
primary -> call ·, ;
primary -> call ·, &&
primary -> call ·, ||
primary -> call ·, >
primary -> call ·, <
primary -> call ·, >=
primary -> call ·, <=
primary -> call ·, ==
primary -> call ·, !=
primary -> call ·, +
primary -> call ·, -
primary -> call ·, *
primary -> call ·, /
primary -> call ·, %
primary -> call ·, )
primary -> call ·, ,
primary -> call ·, ]
***EndSet***
***EndState***
***State***
84
I_105_143_352_385_450_483_547_580_886_919_990
***Set***
primary -> newobj ·, .
primary -> newobj ·, ;
primary -> newobj ·, &&
primary -> newobj ·, ||
primary -> newobj ·, >
primary -> newobj ·, <
primary -> newobj ·, >=
primary -> newobj ·, <=
primary -> newobj ·, ==
primary -> newobj ·, !=
primary -> newobj ·, +
primary -> newobj ·, -
primary -> newobj ·, *
primary -> newobj ·, /
primary -> newobj ·, %
primary -> newobj ·, )
primary -> newobj ·, ,
primary -> newobj ·, ]
***EndSet***
***EndState***
***State***
85
I_107_145_354_387_452_485_549_582_888_921_992
***Set***
factor -> incdec ·, ;
factor -> incdec ·, &&
factor -> incdec ·, ||
factor -> incdec ·, >
factor -> incdec ·, <
factor -> incdec ·, >=
factor -> incdec ·, <=
factor -> incdec ·, ==
factor -> incdec ·, !=
factor -> incdec ·, +
factor -> incdec ·, -
factor -> incdec ·, *
factor -> incdec ·, /
factor -> incdec ·, %
factor -> incdec ·, )
factor -> incdec ·, ,
factor -> incdec ·, ]
***EndSet***
***EndState***
***State***
86
I_108_322_505_1051_1282_1347
***Set***
stmt -> delete expr · ;, $
stmt -> delete expr · ;, namespace
stmt -> delete expr · ;, {
stmt -> delete expr · ;, ID
stmt -> delete expr · ;, void
stmt -> delete expr · ;, bool
stmt -> delete expr · ;, int
stmt -> delete expr · ;, float
stmt -> delete expr · ;, double
stmt -> delete expr · ;, char
stmt -> delete expr · ;, string
stmt -> delete expr · ;, const
stmt -> delete expr · ;, extern
stmt -> delete expr · ;, class
stmt -> delete expr · ;, (
stmt -> delete expr · ;, this
stmt -> delete expr · ;, new
stmt -> delete expr · ;, LITBOOL
stmt -> delete expr · ;, LITINT
stmt -> delete expr · ;, LITFLOAT
stmt -> delete expr · ;, LITDOUBLE
stmt -> delete expr · ;, LITCHAR
stmt -> delete expr · ;, LITSTRING
stmt -> delete expr · ;, null
stmt -> delete expr · ;, ++
stmt -> delete expr · ;, --
stmt -> delete expr · ;, break
stmt -> delete expr · ;, return
stmt -> delete expr · ;, delete
stmt -> delete expr · ;, while
stmt -> delete expr · ;, for
stmt -> delete expr · ;, if
stmt -> delete expr · ;, }
stmt -> delete expr · ;, &&
stmt -> delete expr · ;, ||
stmt -> delete expr · ;, +
stmt -> delete expr · ;, -
stmt -> delete expr · ;, *
stmt -> delete expr · ;, /
stmt -> delete expr · ;, %
stmt -> delete expr · ;, !
stmt -> delete expr · ;, else
***EndSet***
***EndState***
***State***
87
I_109_147_356
***Set***
expr -> nexpr ·, ;
expr -> nexpr ·, )
expr -> nexpr ·, ,
***EndSet***
***EndState***
***State***
88
I_110_148_357
***Set***
nexpr -> bexpr ·, ;
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
nexpr -> bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
nexpr -> bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
89
I_111_149_358
***Set***
nexpr -> aexpr ·, ;
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
nexpr -> aexpr ·, )
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
nexpr -> aexpr ·, ,
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
90
I_112_150_359_389_430_454_551_890
***Set***
aexpr -> term ·, ;
aexpr -> term ·, >
aexpr -> term ·, <
aexpr -> term ·, >=
aexpr -> term ·, <=
aexpr -> term ·, ==
aexpr -> term ·, !=
aexpr -> term ·, +
aexpr -> term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> term ·, &&
aexpr -> term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
91
I_113_151_360_431_528_867
***Set***
bexpr -> factor ·, ;
bexpr -> factor ·, &&
bexpr -> factor ·, ||
term -> factor ·, ;
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
bexpr -> factor ·, )
term -> factor ·, )
bexpr -> factor ·, ,
term -> factor ·, ,
***EndSet***
***EndState***
***State***
92
I_114_152_230_287_361_391_456_488_553_585_627_892_924_995
***Set***
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
factor -> primary ·, ;
memberaccess -> primary · . ID, [
factor -> primary ·, &&
factor -> primary ·, ||
memberaccess -> primary · . ID, .
factor -> primary ·, >
factor -> primary ·, <
factor -> primary ·, >=
factor -> primary ·, <=
factor -> primary ·, ==
factor -> primary ·, !=
memberaccess -> primary · . ID, ;
factor -> primary ·, +
factor -> primary ·, -
factor -> primary ·, *
factor -> primary ·, /
factor -> primary ·, %
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, &&
memberaccess -> primary · . ID, ||
memberaccess -> primary · . ID, >
memberaccess -> primary · . ID, <
memberaccess -> primary · . ID, >=
memberaccess -> primary · . ID, <=
memberaccess -> primary · . ID, ==
memberaccess -> primary · . ID, !=
memberaccess -> primary · . ID, +
memberaccess -> primary · . ID, -
memberaccess -> primary · . ID, *
memberaccess -> primary · . ID, /
memberaccess -> primary · . ID, %
factor -> primary ·, )
memberaccess -> primary · . ID, )
factor -> primary ·, ,
memberaccess -> primary · . ID, ,
factor -> primary ·, ]
memberaccess -> primary · . ID, ]
***EndSet***
***EndState***
***State***
93
I_116_154_363_393_458_490_555_587_894_926_997
***Set***
factor -> cast ·, ;
factor -> cast ·, &&
factor -> cast ·, ||
factor -> cast ·, >
factor -> cast ·, <
factor -> cast ·, >=
factor -> cast ·, <=
factor -> cast ·, ==
factor -> cast ·, !=
factor -> cast ·, +
factor -> cast ·, -
factor -> cast ·, *
factor -> cast ·, /
factor -> cast ·, %
factor -> cast ·, )
factor -> cast ·, ,
factor -> cast ·, ]
***EndSet***
***EndState***
***State***
94
I_118_157_232_289_367_395_460_492_557_589_629_896_928_999_1044
***Set***
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
indexaccess -> idBracket ·, ;
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, %
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, ,
indexaccess -> idBracket ·, ]
***EndSet***
***EndState***
***State***
95
I_119_323_506_1052_1283_1348
***Set***
stmt -> while ( · expr ) stmt, $
stmt -> while ( · expr ) stmt, namespace
stmt -> while ( · expr ) stmt, {
stmt -> while ( · expr ) stmt, ID
stmt -> while ( · expr ) stmt, void
stmt -> while ( · expr ) stmt, bool
stmt -> while ( · expr ) stmt, int
stmt -> while ( · expr ) stmt, float
stmt -> while ( · expr ) stmt, double
stmt -> while ( · expr ) stmt, char
stmt -> while ( · expr ) stmt, string
stmt -> while ( · expr ) stmt, const
stmt -> while ( · expr ) stmt, extern
stmt -> while ( · expr ) stmt, class
stmt -> while ( · expr ) stmt, (
stmt -> while ( · expr ) stmt, this
stmt -> while ( · expr ) stmt, new
stmt -> while ( · expr ) stmt, LITBOOL
stmt -> while ( · expr ) stmt, LITINT
stmt -> while ( · expr ) stmt, LITFLOAT
stmt -> while ( · expr ) stmt, LITDOUBLE
stmt -> while ( · expr ) stmt, LITCHAR
stmt -> while ( · expr ) stmt, LITSTRING
stmt -> while ( · expr ) stmt, null
stmt -> while ( · expr ) stmt, ++
stmt -> while ( · expr ) stmt, --
stmt -> while ( · expr ) stmt, break
stmt -> while ( · expr ) stmt, return
stmt -> while ( · expr ) stmt, delete
stmt -> while ( · expr ) stmt, while
stmt -> while ( · expr ) stmt, for
stmt -> while ( · expr ) stmt, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> while ( · expr ) stmt, }
stmt -> while ( · expr ) stmt, &&
stmt -> while ( · expr ) stmt, ||
stmt -> while ( · expr ) stmt, +
stmt -> while ( · expr ) stmt, -
stmt -> while ( · expr ) stmt, *
stmt -> while ( · expr ) stmt, /
stmt -> while ( · expr ) stmt, %
stmt -> while ( · expr ) stmt, !
stmt -> while ( · expr ) stmt, else
***EndSet***
***EndState***
***State***
96
I_120_324_507_1053_1284_1349
***Set***
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, $
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, {
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, void
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, int
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, float
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, double
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, char
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, string
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, const
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, class
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, (
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, this
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, new
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, null
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, --
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, break
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, return
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, while
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, for
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, if
stmt -> · namespaceblock, &&
stmt -> · namespaceblock, ||
stmt -> · namespaceblock, +
stmt -> · namespaceblock, -
stmt -> · namespaceblock, *
stmt -> · namespaceblock, /
stmt -> · namespaceblock, %
stmt -> · namespaceblock, ++
stmt -> · namespaceblock, --
stmt -> · namespaceblock, ID
stmt -> · namespaceblock, !
stmt -> · namespaceblock, (
stmt -> · namespaceblock, this
stmt -> · namespaceblock, new
stmt -> · namespaceblock, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, &&
stmt -> · statementblock, ||
stmt -> · statementblock, +
stmt -> · statementblock, -
stmt -> · statementblock, *
stmt -> · statementblock, /
stmt -> · statementblock, %
stmt -> · statementblock, ++
stmt -> · statementblock, --
stmt -> · statementblock, ID
stmt -> · statementblock, !
stmt -> · statementblock, (
stmt -> · statementblock, this
stmt -> · statementblock, new
stmt -> · statementblock, LITBOOL
stmt -> · statementblock, LITINT
stmt -> · statementblock, LITFLOAT
stmt -> · statementblock, LITDOUBLE
stmt -> · statementblock, LITCHAR
stmt -> · statementblock, LITSTRING
stmt -> · statementblock, null
stmt -> · declstmt, &&
stmt -> · declstmt, ||
stmt -> · declstmt, +
stmt -> · declstmt, -
stmt -> · declstmt, *
stmt -> · declstmt, /
stmt -> · declstmt, %
stmt -> · declstmt, ++
stmt -> · declstmt, --
stmt -> · declstmt, ID
stmt -> · declstmt, !
stmt -> · declstmt, (
stmt -> · declstmt, this
stmt -> · declstmt, new
stmt -> · declstmt, LITBOOL
stmt -> · declstmt, LITINT
stmt -> · declstmt, LITFLOAT
stmt -> · declstmt, LITDOUBLE
stmt -> · declstmt, LITCHAR
stmt -> · declstmt, LITSTRING
stmt -> · declstmt, null
stmt -> · stmtexpr ;, &&
stmt -> · stmtexpr ;, ||
stmt -> · stmtexpr ;, +
stmt -> · stmtexpr ;, -
stmt -> · stmtexpr ;, *
stmt -> · stmtexpr ;, /
stmt -> · stmtexpr ;, %
stmt -> · stmtexpr ;, ++
stmt -> · stmtexpr ;, --
stmt -> · stmtexpr ;, ID
stmt -> · stmtexpr ;, !
stmt -> · stmtexpr ;, (
stmt -> · stmtexpr ;, this
stmt -> · stmtexpr ;, new
stmt -> · stmtexpr ;, LITBOOL
stmt -> · stmtexpr ;, LITINT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · stmtexpr ;, LITCHAR
stmt -> · stmtexpr ;, LITSTRING
stmt -> · stmtexpr ;, null
stmt -> · break ;, &&
stmt -> · break ;, ||
stmt -> · break ;, +
stmt -> · break ;, -
stmt -> · break ;, *
stmt -> · break ;, /
stmt -> · break ;, %
stmt -> · break ;, ++
stmt -> · break ;, --
stmt -> · break ;, ID
stmt -> · break ;, !
stmt -> · break ;, (
stmt -> · break ;, this
stmt -> · break ;, new
stmt -> · break ;, LITBOOL
stmt -> · break ;, LITINT
stmt -> · break ;, LITFLOAT
stmt -> · break ;, LITDOUBLE
stmt -> · break ;, LITCHAR
stmt -> · break ;, LITSTRING
stmt -> · break ;, null
stmt -> · return expr ;, &&
stmt -> · return expr ;, ||
stmt -> · return expr ;, +
stmt -> · return expr ;, -
stmt -> · return expr ;, *
stmt -> · return expr ;, /
stmt -> · return expr ;, %
stmt -> · return expr ;, ++
stmt -> · return expr ;, --
stmt -> · return expr ;, ID
stmt -> · return expr ;, !
stmt -> · return expr ;, (
stmt -> · return expr ;, this
stmt -> · return expr ;, new
stmt -> · return expr ;, LITBOOL
stmt -> · return expr ;, LITINT
stmt -> · return expr ;, LITFLOAT
stmt -> · return expr ;, LITDOUBLE
stmt -> · return expr ;, LITCHAR
stmt -> · return expr ;, LITSTRING
stmt -> · return expr ;, null
stmt -> · return ;, &&
stmt -> · return ;, ||
stmt -> · return ;, +
stmt -> · return ;, -
stmt -> · return ;, *
stmt -> · return ;, /
stmt -> · return ;, %
stmt -> · return ;, ++
stmt -> · return ;, --
stmt -> · return ;, ID
stmt -> · return ;, !
stmt -> · return ;, (
stmt -> · return ;, this
stmt -> · return ;, new
stmt -> · return ;, LITBOOL
stmt -> · return ;, LITINT
stmt -> · return ;, LITFLOAT
stmt -> · return ;, LITDOUBLE
stmt -> · return ;, LITCHAR
stmt -> · return ;, LITSTRING
stmt -> · return ;, null
stmt -> · delete expr ;, &&
stmt -> · delete expr ;, ||
stmt -> · delete expr ;, +
stmt -> · delete expr ;, -
stmt -> · delete expr ;, *
stmt -> · delete expr ;, /
stmt -> · delete expr ;, %
stmt -> · delete expr ;, ++
stmt -> · delete expr ;, --
stmt -> · delete expr ;, ID
stmt -> · delete expr ;, !
stmt -> · delete expr ;, (
stmt -> · delete expr ;, this
stmt -> · delete expr ;, new
stmt -> · delete expr ;, LITBOOL
stmt -> · delete expr ;, LITINT
stmt -> · delete expr ;, LITFLOAT
stmt -> · delete expr ;, LITDOUBLE
stmt -> · delete expr ;, LITCHAR
stmt -> · delete expr ;, LITSTRING
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, &&
stmt -> · while ( expr ) stmt, ||
stmt -> · while ( expr ) stmt, +
stmt -> · while ( expr ) stmt, -
stmt -> · while ( expr ) stmt, *
stmt -> · while ( expr ) stmt, /
stmt -> · while ( expr ) stmt, %
stmt -> · while ( expr ) stmt, ++
stmt -> · while ( expr ) stmt, --
stmt -> · while ( expr ) stmt, ID
stmt -> · while ( expr ) stmt, !
stmt -> · while ( expr ) stmt, (
stmt -> · while ( expr ) stmt, this
stmt -> · while ( expr ) stmt, new
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · while ( expr ) stmt, LITINT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
namespaceblock -> · namespace ID { statements }, &&
namespaceblock -> · namespace ID { statements }, ||
namespaceblock -> · namespace ID { statements }, +
namespaceblock -> · namespace ID { statements }, -
namespaceblock -> · namespace ID { statements }, *
namespaceblock -> · namespace ID { statements }, /
namespaceblock -> · namespace ID { statements }, %
namespaceblock -> · namespace ID { statements }, ++
namespaceblock -> · namespace ID { statements }, --
namespaceblock -> · namespace ID { statements }, ID
namespaceblock -> · namespace ID { statements }, !
namespaceblock -> · namespace ID { statements }, (
namespaceblock -> · namespace ID { statements }, this
namespaceblock -> · namespace ID { statements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, &&
statementblock -> · { statements }, ||
statementblock -> · { statements }, +
statementblock -> · { statements }, -
statementblock -> · { statements }, *
statementblock -> · { statements }, /
statementblock -> · { statements }, %
statementblock -> · { statements }, ++
statementblock -> · { statements }, --
statementblock -> · { statements }, ID
statementblock -> · { statements }, !
statementblock -> · { statements }, (
statementblock -> · { statements }, this
statementblock -> · { statements }, new
statementblock -> · { statements }, LITBOOL
statementblock -> · { statements }, LITINT
statementblock -> · { statements }, LITFLOAT
statementblock -> · { statements }, LITDOUBLE
statementblock -> · { statements }, LITCHAR
statementblock -> · { statements }, LITSTRING
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, }
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, +
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, -
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, *
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, /
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, %
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, !
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
97
I_121_325_508_1054_1285_1350
***Set***
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
98
I_122_326_509_1055_1286_1351
***Set***
stmt -> break ; ·, $
stmt -> break ; ·, namespace
stmt -> break ; ·, {
stmt -> break ; ·, ID
stmt -> break ; ·, void
stmt -> break ; ·, bool
stmt -> break ; ·, int
stmt -> break ; ·, float
stmt -> break ; ·, double
stmt -> break ; ·, char
stmt -> break ; ·, string
stmt -> break ; ·, const
stmt -> break ; ·, extern
stmt -> break ; ·, class
stmt -> break ; ·, (
stmt -> break ; ·, this
stmt -> break ; ·, new
stmt -> break ; ·, LITBOOL
stmt -> break ; ·, LITINT
stmt -> break ; ·, LITFLOAT
stmt -> break ; ·, LITDOUBLE
stmt -> break ; ·, LITCHAR
stmt -> break ; ·, LITSTRING
stmt -> break ; ·, null
stmt -> break ; ·, ++
stmt -> break ; ·, --
stmt -> break ; ·, break
stmt -> break ; ·, return
stmt -> break ; ·, delete
stmt -> break ; ·, while
stmt -> break ; ·, for
stmt -> break ; ·, if
stmt -> break ; ·, }
stmt -> break ; ·, &&
stmt -> break ; ·, ||
stmt -> break ; ·, +
stmt -> break ; ·, -
stmt -> break ; ·, *
stmt -> break ; ·, /
stmt -> break ; ·, %
stmt -> break ; ·, !
stmt -> break ; ·, else
***EndSet***
***EndState***
***State***
99
I_123_327_510_1056_1287_1352
***Set***
stmt -> return ; ·, $
stmt -> return ; ·, namespace
stmt -> return ; ·, {
stmt -> return ; ·, ID
stmt -> return ; ·, void
stmt -> return ; ·, bool
stmt -> return ; ·, int
stmt -> return ; ·, float
stmt -> return ; ·, double
stmt -> return ; ·, char
stmt -> return ; ·, string
stmt -> return ; ·, const
stmt -> return ; ·, extern
stmt -> return ; ·, class
stmt -> return ; ·, (
stmt -> return ; ·, this
stmt -> return ; ·, new
stmt -> return ; ·, LITBOOL
stmt -> return ; ·, LITINT
stmt -> return ; ·, LITFLOAT
stmt -> return ; ·, LITDOUBLE
stmt -> return ; ·, LITCHAR
stmt -> return ; ·, LITSTRING
stmt -> return ; ·, null
stmt -> return ; ·, ++
stmt -> return ; ·, --
stmt -> return ; ·, break
stmt -> return ; ·, return
stmt -> return ; ·, delete
stmt -> return ; ·, while
stmt -> return ; ·, for
stmt -> return ; ·, if
stmt -> return ; ·, }
stmt -> return ; ·, &&
stmt -> return ; ·, ||
stmt -> return ; ·, +
stmt -> return ; ·, -
stmt -> return ; ·, *
stmt -> return ; ·, /
stmt -> return ; ·, %
stmt -> return ; ·, !
stmt -> return ; ·, else
***EndSet***
***EndState***
***State***
100
I_124_328_511_1057_1288_1353
***Set***
stmt -> return expr · ;, $
stmt -> return expr · ;, namespace
stmt -> return expr · ;, {
stmt -> return expr · ;, ID
stmt -> return expr · ;, void
stmt -> return expr · ;, bool
stmt -> return expr · ;, int
stmt -> return expr · ;, float
stmt -> return expr · ;, double
stmt -> return expr · ;, char
stmt -> return expr · ;, string
stmt -> return expr · ;, const
stmt -> return expr · ;, extern
stmt -> return expr · ;, class
stmt -> return expr · ;, (
stmt -> return expr · ;, this
stmt -> return expr · ;, new
stmt -> return expr · ;, LITBOOL
stmt -> return expr · ;, LITINT
stmt -> return expr · ;, LITFLOAT
stmt -> return expr · ;, LITDOUBLE
stmt -> return expr · ;, LITCHAR
stmt -> return expr · ;, LITSTRING
stmt -> return expr · ;, null
stmt -> return expr · ;, ++
stmt -> return expr · ;, --
stmt -> return expr · ;, break
stmt -> return expr · ;, return
stmt -> return expr · ;, delete
stmt -> return expr · ;, while
stmt -> return expr · ;, for
stmt -> return expr · ;, if
stmt -> return expr · ;, }
stmt -> return expr · ;, &&
stmt -> return expr · ;, ||
stmt -> return expr · ;, +
stmt -> return expr · ;, -
stmt -> return expr · ;, *
stmt -> return expr · ;, /
stmt -> return expr · ;, %
stmt -> return expr · ;, !
stmt -> return expr · ;, else
***EndSet***
***EndState***
***State***
101
I_146_221_281_621_665_728_751_810_833_1127_1150_1185
***Set***
primary -> ( expr · ), .
primary -> ( expr · ), ;
primary -> ( expr · ), &&
primary -> ( expr · ), ||
primary -> ( expr · ), >
primary -> ( expr · ), <
primary -> ( expr · ), >=
primary -> ( expr · ), <=
primary -> ( expr · ), ==
primary -> ( expr · ), !=
primary -> ( expr · ), +
primary -> ( expr · ), -
primary -> ( expr · ), *
primary -> ( expr · ), /
primary -> ( expr · ), %
primary -> ( expr · ), )
primary -> ( expr · ), ,
primary -> ( expr · ), ]
***EndSet***
***EndState***
***State***
102
I_169_329_512_1058_1289_1354
***Set***
statementblock -> { statements · }, $
statementblock -> { statements · }, namespace
statementblock -> { statements · }, {
statementblock -> { statements · }, ID
statementblock -> { statements · }, void
statementblock -> { statements · }, bool
statementblock -> { statements · }, int
statementblock -> { statements · }, float
statementblock -> { statements · }, double
statementblock -> { statements · }, char
statementblock -> { statements · }, string
statementblock -> { statements · }, const
statementblock -> { statements · }, extern
statementblock -> { statements · }, class
statementblock -> { statements · }, (
statementblock -> { statements · }, this
statementblock -> { statements · }, new
statementblock -> { statements · }, LITBOOL
statementblock -> { statements · }, LITINT
statementblock -> { statements · }, LITFLOAT
statementblock -> { statements · }, LITDOUBLE
statementblock -> { statements · }, LITCHAR
statementblock -> { statements · }, LITSTRING
statementblock -> { statements · }, null
statementblock -> { statements · }, ++
statementblock -> { statements · }, --
statementblock -> { statements · }, break
statementblock -> { statements · }, return
statementblock -> { statements · }, delete
statementblock -> { statements · }, while
statementblock -> { statements · }, for
statementblock -> { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { statements · }, }
statementblock -> { statements · }, &&
statementblock -> { statements · }, ||
statementblock -> { statements · }, +
statementblock -> { statements · }, -
statementblock -> { statements · }, *
statementblock -> { statements · }, /
statementblock -> { statements · }, %
statementblock -> { statements · }, !
statementblock -> { statements · }, else
***EndSet***
***EndState***
***State***
103
I_176_225_282_622_666_729_752_811_834_1128_1151_1186_1235
***Set***
incdec -> -- ID ·, ;
incdec -> -- ID ·, &&
incdec -> -- ID ·, ||
incdec -> -- ID ·, >
incdec -> -- ID ·, <
incdec -> -- ID ·, >=
incdec -> -- ID ·, <=
incdec -> -- ID ·, ==
incdec -> -- ID ·, !=
incdec -> -- ID ·, +
incdec -> -- ID ·, -
incdec -> -- ID ·, *
incdec -> -- ID ·, /
incdec -> -- ID ·, %
incdec -> -- ID ·, )
incdec -> -- ID ·, ,
incdec -> -- ID ·, ]
***EndSet***
***EndState***
***State***
104
I_177_226_283_623_667_730_753_812_835_1129_1152_1187_1236
***Set***
incdec -> ++ ID ·, ;
incdec -> ++ ID ·, &&
incdec -> ++ ID ·, ||
incdec -> ++ ID ·, >
incdec -> ++ ID ·, <
incdec -> ++ ID ·, >=
incdec -> ++ ID ·, <=
incdec -> ++ ID ·, ==
incdec -> ++ ID ·, !=
incdec -> ++ ID ·, +
incdec -> ++ ID ·, -
incdec -> ++ ID ·, *
incdec -> ++ ID ·, /
incdec -> ++ ID ·, %
incdec -> ++ ID ·, )
incdec -> ++ ID ·, ,
incdec -> ++ ID ·, ]
***EndSet***
***EndState***
***State***
105
I_178_234_291_631_670_733_756_815_838_1132_1155_1190_1237
***Set***
call -> ID ( · args ), ;
call -> ID ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> ID ( · args ), &&
call -> ID ( · args ), ||
call -> ID ( · args ), >
call -> ID ( · args ), <
call -> ID ( · args ), >=
call -> ID ( · args ), <=
call -> ID ( · args ), ==
call -> ID ( · args ), !=
call -> ID ( · args ), +
call -> ID ( · args ), -
call -> ID ( · args ), *
call -> ID ( · args ), /
call -> ID ( · args ), %
call -> ID ( · args ), )
call -> ID ( · args ), ,
call -> ID ( · args ), ]
***EndSet***
***EndState***
***State***
106
I_179_196_202_235_292_419_518_632_671_734_757_816_839_857_1133_1156_1191_1238
***Set***
idBracket -> ID [ · optidx ], ID
idBracket -> ID [ · optidx ], =
idBracket -> ID [ · optidx ], +=
idBracket -> ID [ · optidx ], -=
idBracket -> ID [ · optidx ], *=
idBracket -> ID [ · optidx ], /=
idBracket -> ID [ · optidx ], %=
idBracket -> ID [ · optidx ], .
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
idBracket -> ID [ · optidx ], ;
idBracket -> ID [ · optidx ], &&
idBracket -> ID [ · optidx ], ||
idBracket -> ID [ · optidx ], >
idBracket -> ID [ · optidx ], <
idBracket -> ID [ · optidx ], >=
idBracket -> ID [ · optidx ], <=
idBracket -> ID [ · optidx ], ==
idBracket -> ID [ · optidx ], !=
idBracket -> ID [ · optidx ], +
idBracket -> ID [ · optidx ], -
idBracket -> ID [ · optidx ], *
idBracket -> ID [ · optidx ], /
idBracket -> ID [ · optidx ], %
idBracket -> ID [ · optidx ], )
idBracket -> ID [ · optidx ], ,
idBracket -> ID [ · optidx ], ]
***EndSet***
***EndState***
***State***
107
I_180_236_293_633_672_735_758_817_840_1134_1157_1192_1239
***Set***
incdec -> ID -- ·, ;
incdec -> ID -- ·, &&
incdec -> ID -- ·, ||
incdec -> ID -- ·, >
incdec -> ID -- ·, <
incdec -> ID -- ·, >=
incdec -> ID -- ·, <=
incdec -> ID -- ·, ==
incdec -> ID -- ·, !=
incdec -> ID -- ·, +
incdec -> ID -- ·, -
incdec -> ID -- ·, *
incdec -> ID -- ·, /
incdec -> ID -- ·, %
incdec -> ID -- ·, )
incdec -> ID -- ·, ,
incdec -> ID -- ·, ]
***EndSet***
***EndState***
***State***
108
I_181_237_294_634_673_736_759_818_841_1135_1158_1193_1240
***Set***
incdec -> ID ++ ·, ;
incdec -> ID ++ ·, &&
incdec -> ID ++ ·, ||
incdec -> ID ++ ·, >
incdec -> ID ++ ·, <
incdec -> ID ++ ·, >=
incdec -> ID ++ ·, <=
incdec -> ID ++ ·, ==
incdec -> ID ++ ·, !=
incdec -> ID ++ ·, +
incdec -> ID ++ ·, -
incdec -> ID ++ ·, *
incdec -> ID ++ ·, /
incdec -> ID ++ ·, %
incdec -> ID ++ ·, )
incdec -> ID ++ ·, ,
incdec -> ID ++ ·, ]
***EndSet***
***EndState***
***State***
109
I_182_331
***Set***
statements -> statements stmt ·, $
statements -> statements stmt ·, namespace
statements -> statements stmt ·, {
statements -> statements stmt ·, ID
statements -> statements stmt ·, void
statements -> statements stmt ·, bool
statements -> statements stmt ·, int
statements -> statements stmt ·, float
statements -> statements stmt ·, double
statements -> statements stmt ·, char
statements -> statements stmt ·, string
statements -> statements stmt ·, const
statements -> statements stmt ·, extern
statements -> statements stmt ·, class
statements -> statements stmt ·, (
statements -> statements stmt ·, this
statements -> statements stmt ·, new
statements -> statements stmt ·, LITBOOL
statements -> statements stmt ·, LITINT
statements -> statements stmt ·, LITFLOAT
statements -> statements stmt ·, LITDOUBLE
statements -> statements stmt ·, LITCHAR
statements -> statements stmt ·, LITSTRING
statements -> statements stmt ·, null
statements -> statements stmt ·, ++
statements -> statements stmt ·, --
statements -> statements stmt ·, break
statements -> statements stmt ·, return
statements -> statements stmt ·, delete
statements -> statements stmt ·, while
statements -> statements stmt ·, for
statements -> statements stmt ·, if
statements -> statements stmt ·, }
***EndSet***
***EndState***
***State***
110
I_183_332_514_1060_1291_1356
***Set***
stmt -> stmtexpr ; ·, $
stmt -> stmtexpr ; ·, namespace
stmt -> stmtexpr ; ·, {
stmt -> stmtexpr ; ·, ID
stmt -> stmtexpr ; ·, void
stmt -> stmtexpr ; ·, bool
stmt -> stmtexpr ; ·, int
stmt -> stmtexpr ; ·, float
stmt -> stmtexpr ; ·, double
stmt -> stmtexpr ; ·, char
stmt -> stmtexpr ; ·, string
stmt -> stmtexpr ; ·, const
stmt -> stmtexpr ; ·, extern
stmt -> stmtexpr ; ·, class
stmt -> stmtexpr ; ·, (
stmt -> stmtexpr ; ·, this
stmt -> stmtexpr ; ·, new
stmt -> stmtexpr ; ·, LITBOOL
stmt -> stmtexpr ; ·, LITINT
stmt -> stmtexpr ; ·, LITFLOAT
stmt -> stmtexpr ; ·, LITDOUBLE
stmt -> stmtexpr ; ·, LITCHAR
stmt -> stmtexpr ; ·, LITSTRING
stmt -> stmtexpr ; ·, null
stmt -> stmtexpr ; ·, ++
stmt -> stmtexpr ; ·, --
stmt -> stmtexpr ; ·, break
stmt -> stmtexpr ; ·, return
stmt -> stmtexpr ; ·, delete
stmt -> stmtexpr ; ·, while
stmt -> stmtexpr ; ·, for
stmt -> stmtexpr ; ·, if
stmt -> stmtexpr ; ·, }
stmt -> stmtexpr ; ·, &&
stmt -> stmtexpr ; ·, ||
stmt -> stmtexpr ; ·, +
stmt -> stmtexpr ; ·, -
stmt -> stmtexpr ; ·, *
stmt -> stmtexpr ; ·, /
stmt -> stmtexpr ; ·, %
stmt -> stmtexpr ; ·, !
stmt -> stmtexpr ; ·, else
***EndSet***
***EndState***
***State***
111
I_184_333_515_968_1061_1292_1357
***Set***
declstmt -> type ID · = expr ;, $
declstmt -> type ID · ( params ) { statements }, $
declstmt -> type ID · = expr ;, namespace
declstmt -> type ID · ( params ) { statements }, namespace
declstmt -> type ID · = expr ;, {
declstmt -> type ID · ( params ) { statements }, {
declstmt -> type ID · = expr ;, ID
declstmt -> type ID · ( params ) { statements }, ID
declstmt -> type ID · = expr ;, void
declstmt -> type ID · ( params ) { statements }, void
declstmt -> type ID · = expr ;, bool
declstmt -> type ID · ( params ) { statements }, bool
declstmt -> type ID · = expr ;, int
declstmt -> type ID · ( params ) { statements }, int
declstmt -> type ID · = expr ;, float
declstmt -> type ID · ( params ) { statements }, float
declstmt -> type ID · = expr ;, double
declstmt -> type ID · ( params ) { statements }, double
declstmt -> type ID · = expr ;, char
declstmt -> type ID · ( params ) { statements }, char
declstmt -> type ID · = expr ;, string
declstmt -> type ID · ( params ) { statements }, string
declstmt -> type ID · = expr ;, const
declstmt -> type ID · ( params ) { statements }, const
declstmt -> type ID · = expr ;, extern
declstmt -> type ID · ( params ) { statements }, extern
declstmt -> type ID · = expr ;, class
declstmt -> type ID · ( params ) { statements }, class
declstmt -> type ID · = expr ;, (
declstmt -> type ID · ( params ) { statements }, (
declstmt -> type ID · = expr ;, this
declstmt -> type ID · ( params ) { statements }, this
declstmt -> type ID · = expr ;, new
declstmt -> type ID · ( params ) { statements }, new
declstmt -> type ID · = expr ;, LITBOOL
declstmt -> type ID · ( params ) { statements }, LITBOOL
declstmt -> type ID · = expr ;, LITINT
declstmt -> type ID · ( params ) { statements }, LITINT
declstmt -> type ID · = expr ;, LITFLOAT
declstmt -> type ID · ( params ) { statements }, LITFLOAT
declstmt -> type ID · = expr ;, LITDOUBLE
declstmt -> type ID · ( params ) { statements }, LITDOUBLE
declstmt -> type ID · = expr ;, LITCHAR
declstmt -> type ID · ( params ) { statements }, LITCHAR
declstmt -> type ID · = expr ;, LITSTRING
declstmt -> type ID · ( params ) { statements }, LITSTRING
declstmt -> type ID · = expr ;, null
declstmt -> type ID · ( params ) { statements }, null
declstmt -> type ID · = expr ;, ++
declstmt -> type ID · ( params ) { statements }, ++
declstmt -> type ID · = expr ;, --
declstmt -> type ID · ( params ) { statements }, --
declstmt -> type ID · = expr ;, break
declstmt -> type ID · ( params ) { statements }, break
declstmt -> type ID · = expr ;, return
declstmt -> type ID · ( params ) { statements }, return
declstmt -> type ID · = expr ;, delete
declstmt -> type ID · ( params ) { statements }, delete
declstmt -> type ID · = expr ;, while
declstmt -> type ID · ( params ) { statements }, while
declstmt -> type ID · = expr ;, for
declstmt -> type ID · ( params ) { statements }, for
declstmt -> type ID · = expr ;, if
declstmt -> type ID · ( params ) { statements }, if
declstmt -> type ID · = expr ;, }
declstmt -> type ID · ( params ) { statements }, }
declstmt -> type ID · = expr ;, &&
declstmt -> type ID · ( params ) { statements }, &&
declstmt -> type ID · = expr ;, ||
declstmt -> type ID · ( params ) { statements }, ||
declstmt -> type ID · = expr ;, +
declstmt -> type ID · ( params ) { statements }, +
declstmt -> type ID · = expr ;, -
declstmt -> type ID · ( params ) { statements }, -
declstmt -> type ID · = expr ;, *
declstmt -> type ID · ( params ) { statements }, *
declstmt -> type ID · = expr ;, /
declstmt -> type ID · ( params ) { statements }, /
declstmt -> type ID · = expr ;, %
declstmt -> type ID · ( params ) { statements }, %
declstmt -> type ID · = expr ;, !
declstmt -> type ID · ( params ) { statements }, !
declstmt -> type ID · = expr ;, else
declstmt -> type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
112
I_185_203_420_422_519_858_944_1005_1019_1066_1080_1298_1312_1329
***Set***
primitiveBracket -> primitive [ · optidx ], ID
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> primitive [ · optidx ], .
primitiveBracket -> primitive [ · optidx ], ;
primitiveBracket -> primitive [ · optidx ], &&
primitiveBracket -> primitive [ · optidx ], ||
primitiveBracket -> primitive [ · optidx ], >
primitiveBracket -> primitive [ · optidx ], <
primitiveBracket -> primitive [ · optidx ], >=
primitiveBracket -> primitive [ · optidx ], <=
primitiveBracket -> primitive [ · optidx ], ==
primitiveBracket -> primitive [ · optidx ], !=
primitiveBracket -> primitive [ · optidx ], +
primitiveBracket -> primitive [ · optidx ], -
primitiveBracket -> primitive [ · optidx ], *
primitiveBracket -> primitive [ · optidx ], /
primitiveBracket -> primitive [ · optidx ], %
primitiveBracket -> primitive [ · optidx ], )
primitiveBracket -> primitive [ · optidx ], ,
primitiveBracket -> primitive [ · optidx ], ]
***EndSet***
***EndState***
***State***
113
I_186_252_309_424_522_648_679_742_760_824_842_861_1141_1159_1194
***Set***
memberaccess -> primary . · ID, (
memberaccess -> primary . · ID, =
memberaccess -> primary . · ID, +=
memberaccess -> primary . · ID, -=
memberaccess -> primary . · ID, *=
memberaccess -> primary . · ID, /=
memberaccess -> primary . · ID, %=
memberaccess -> primary . · ID, [
memberaccess -> primary . · ID, .
memberaccess -> primary . · ID, ;
memberaccess -> primary . · ID, &&
memberaccess -> primary . · ID, ||
memberaccess -> primary . · ID, >
memberaccess -> primary . · ID, <
memberaccess -> primary . · ID, >=
memberaccess -> primary . · ID, <=
memberaccess -> primary . · ID, ==
memberaccess -> primary . · ID, !=
memberaccess -> primary . · ID, +
memberaccess -> primary . · ID, -
memberaccess -> primary . · ID, *
memberaccess -> primary . · ID, /
memberaccess -> primary . · ID, %
memberaccess -> primary . · ID, )
memberaccess -> primary . · ID, ,
memberaccess -> primary . · ID, ]
***EndSet***
***EndState***
***State***
114
I_187_310_649
***Set***
assign -> lvalue = · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue = · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue = · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
115
I_188_311_650
***Set***
assign -> lvalue += · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue += · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue += · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
116
I_189_312_651
***Set***
assign -> lvalue -= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue -= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue -= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
117
I_190_313_652
***Set***
assign -> lvalue *= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue *= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue *= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
118
I_191_314_653
***Set***
assign -> lvalue /= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue /= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue /= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
119
I_192_315_654
***Set***
assign -> lvalue %= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
assign -> lvalue %= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue %= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
120
I_193_253_316_655_680_743_761_825_843_1142_1160_1195_1242
***Set***
call -> memberaccess ( · args ), ;
call -> memberaccess ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
call -> memberaccess ( · args ), &&
call -> memberaccess ( · args ), ||
call -> memberaccess ( · args ), >
call -> memberaccess ( · args ), <
call -> memberaccess ( · args ), >=
call -> memberaccess ( · args ), <=
call -> memberaccess ( · args ), ==
call -> memberaccess ( · args ), !=
call -> memberaccess ( · args ), +
call -> memberaccess ( · args ), -
call -> memberaccess ( · args ), *
call -> memberaccess ( · args ), /
call -> memberaccess ( · args ), %
call -> memberaccess ( · args ), )
call -> memberaccess ( · args ), ,
call -> memberaccess ( · args ), ]
***EndSet***
***EndState***
***State***
121
I_194_254_317_425_523_656_681_744_762_826_844_862_1143_1161_1196
***Set***
indexaccess -> memberaccess [ · aexpr ], =
indexaccess -> memberaccess [ · aexpr ], +=
indexaccess -> memberaccess [ · aexpr ], -=
indexaccess -> memberaccess [ · aexpr ], *=
indexaccess -> memberaccess [ · aexpr ], /=
indexaccess -> memberaccess [ · aexpr ], %=
indexaccess -> memberaccess [ · aexpr ], .
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
indexaccess -> memberaccess [ · aexpr ], ;
indexaccess -> memberaccess [ · aexpr ], &&
indexaccess -> memberaccess [ · aexpr ], ||
indexaccess -> memberaccess [ · aexpr ], >
indexaccess -> memberaccess [ · aexpr ], <
indexaccess -> memberaccess [ · aexpr ], >=
indexaccess -> memberaccess [ · aexpr ], <=
indexaccess -> memberaccess [ · aexpr ], ==
indexaccess -> memberaccess [ · aexpr ], !=
indexaccess -> memberaccess [ · aexpr ], +
indexaccess -> memberaccess [ · aexpr ], -
indexaccess -> memberaccess [ · aexpr ], *
indexaccess -> memberaccess [ · aexpr ], /
indexaccess -> memberaccess [ · aexpr ], %
indexaccess -> memberaccess [ · aexpr ], )
indexaccess -> memberaccess [ · aexpr ], ,
indexaccess -> memberaccess [ · aexpr ], ]
***EndSet***
***EndState***
***State***
122
I_195_603_766_1245_1379_1424
***Set***
namespaceblock -> namespace ID { · statements }, $
namespaceblock -> namespace ID { · statements }, namespace
namespaceblock -> namespace ID { · statements }, {
namespaceblock -> namespace ID { · statements }, ID
namespaceblock -> namespace ID { · statements }, void
namespaceblock -> namespace ID { · statements }, bool
namespaceblock -> namespace ID { · statements }, int
namespaceblock -> namespace ID { · statements }, float
namespaceblock -> namespace ID { · statements }, double
namespaceblock -> namespace ID { · statements }, char
namespaceblock -> namespace ID { · statements }, string
namespaceblock -> namespace ID { · statements }, const
namespaceblock -> namespace ID { · statements }, extern
namespaceblock -> namespace ID { · statements }, class
namespaceblock -> namespace ID { · statements }, (
namespaceblock -> namespace ID { · statements }, this
namespaceblock -> namespace ID { · statements }, new
namespaceblock -> namespace ID { · statements }, LITBOOL
namespaceblock -> namespace ID { · statements }, LITINT
namespaceblock -> namespace ID { · statements }, LITFLOAT
namespaceblock -> namespace ID { · statements }, LITDOUBLE
namespaceblock -> namespace ID { · statements }, LITCHAR
namespaceblock -> namespace ID { · statements }, LITSTRING
namespaceblock -> namespace ID { · statements }, null
namespaceblock -> namespace ID { · statements }, ++
namespaceblock -> namespace ID { · statements }, --
namespaceblock -> namespace ID { · statements }, break
namespaceblock -> namespace ID { · statements }, return
namespaceblock -> namespace ID { · statements }, delete
namespaceblock -> namespace ID { · statements }, while
namespaceblock -> namespace ID { · statements }, for
namespaceblock -> namespace ID { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { · statements }, }
namespaceblock -> namespace ID { · statements }, &&
namespaceblock -> namespace ID { · statements }, ||
namespaceblock -> namespace ID { · statements }, +
namespaceblock -> namespace ID { · statements }, -
namespaceblock -> namespace ID { · statements }, *
namespaceblock -> namespace ID { · statements }, /
namespaceblock -> namespace ID { · statements }, %
namespaceblock -> namespace ID { · statements }, !
namespaceblock -> namespace ID { · statements }, else
***EndSet***
***EndState***
***State***
123
I_197_604_767_1174_1246_1380_1425
***Set***
declstmt -> extern type ID · ( params ) ;, $
declstmt -> extern type ID · ( params ) ;, namespace
declstmt -> extern type ID · ( params ) ;, {
declstmt -> extern type ID · ( params ) ;, ID
declstmt -> extern type ID · ( params ) ;, void
declstmt -> extern type ID · ( params ) ;, bool
declstmt -> extern type ID · ( params ) ;, int
declstmt -> extern type ID · ( params ) ;, float
declstmt -> extern type ID · ( params ) ;, double
declstmt -> extern type ID · ( params ) ;, char
declstmt -> extern type ID · ( params ) ;, string
declstmt -> extern type ID · ( params ) ;, const
declstmt -> extern type ID · ( params ) ;, extern
declstmt -> extern type ID · ( params ) ;, class
declstmt -> extern type ID · ( params ) ;, (
declstmt -> extern type ID · ( params ) ;, this
declstmt -> extern type ID · ( params ) ;, new
declstmt -> extern type ID · ( params ) ;, LITBOOL
declstmt -> extern type ID · ( params ) ;, LITINT
declstmt -> extern type ID · ( params ) ;, LITFLOAT
declstmt -> extern type ID · ( params ) ;, LITDOUBLE
declstmt -> extern type ID · ( params ) ;, LITCHAR
declstmt -> extern type ID · ( params ) ;, LITSTRING
declstmt -> extern type ID · ( params ) ;, null
declstmt -> extern type ID · ( params ) ;, ++
declstmt -> extern type ID · ( params ) ;, --
declstmt -> extern type ID · ( params ) ;, break
declstmt -> extern type ID · ( params ) ;, return
declstmt -> extern type ID · ( params ) ;, delete
declstmt -> extern type ID · ( params ) ;, while
declstmt -> extern type ID · ( params ) ;, for
declstmt -> extern type ID · ( params ) ;, if
declstmt -> extern type ID · ( params ) ;, }
declstmt -> extern type ID · ( params ) ;, &&
declstmt -> extern type ID · ( params ) ;, ||
declstmt -> extern type ID · ( params ) ;, +
declstmt -> extern type ID · ( params ) ;, -
declstmt -> extern type ID · ( params ) ;, *
declstmt -> extern type ID · ( params ) ;, /
declstmt -> extern type ID · ( params ) ;, %
declstmt -> extern type ID · ( params ) ;, !
declstmt -> extern type ID · ( params ) ;, else
***EndSet***
***EndState***
***State***
124
I_198_605_768_1175_1247_1381_1426
***Set***
declstmt -> const type ID · = lit ;, $
declstmt -> const type ID · = lit ;, namespace
declstmt -> const type ID · = lit ;, {
declstmt -> const type ID · = lit ;, ID
declstmt -> const type ID · = lit ;, void
declstmt -> const type ID · = lit ;, bool
declstmt -> const type ID · = lit ;, int
declstmt -> const type ID · = lit ;, float
declstmt -> const type ID · = lit ;, double
declstmt -> const type ID · = lit ;, char
declstmt -> const type ID · = lit ;, string
declstmt -> const type ID · = lit ;, const
declstmt -> const type ID · = lit ;, extern
declstmt -> const type ID · = lit ;, class
declstmt -> const type ID · = lit ;, (
declstmt -> const type ID · = lit ;, this
declstmt -> const type ID · = lit ;, new
declstmt -> const type ID · = lit ;, LITBOOL
declstmt -> const type ID · = lit ;, LITINT
declstmt -> const type ID · = lit ;, LITFLOAT
declstmt -> const type ID · = lit ;, LITDOUBLE
declstmt -> const type ID · = lit ;, LITCHAR
declstmt -> const type ID · = lit ;, LITSTRING
declstmt -> const type ID · = lit ;, null
declstmt -> const type ID · = lit ;, ++
declstmt -> const type ID · = lit ;, --
declstmt -> const type ID · = lit ;, break
declstmt -> const type ID · = lit ;, return
declstmt -> const type ID · = lit ;, delete
declstmt -> const type ID · = lit ;, while
declstmt -> const type ID · = lit ;, for
declstmt -> const type ID · = lit ;, if
declstmt -> const type ID · = lit ;, }
declstmt -> const type ID · = lit ;, &&
declstmt -> const type ID · = lit ;, ||
declstmt -> const type ID · = lit ;, +
declstmt -> const type ID · = lit ;, -
declstmt -> const type ID · = lit ;, *
declstmt -> const type ID · = lit ;, /
declstmt -> const type ID · = lit ;, %
declstmt -> const type ID · = lit ;, !
declstmt -> const type ID · = lit ;, else
***EndSet***
***EndState***
***State***
125
I_199
***Set***
inherit -> : · ID, {
***EndSet***
***EndState***
***State***
126
I_200_606_769_1176_1248_1382_1427
***Set***
declstmt -> class ID inherit · { declstatements }, $
declstmt -> class ID inherit · { declstatements }, namespace
declstmt -> class ID inherit · { declstatements }, {
declstmt -> class ID inherit · { declstatements }, ID
declstmt -> class ID inherit · { declstatements }, void
declstmt -> class ID inherit · { declstatements }, bool
declstmt -> class ID inherit · { declstatements }, int
declstmt -> class ID inherit · { declstatements }, float
declstmt -> class ID inherit · { declstatements }, double
declstmt -> class ID inherit · { declstatements }, char
declstmt -> class ID inherit · { declstatements }, string
declstmt -> class ID inherit · { declstatements }, const
declstmt -> class ID inherit · { declstatements }, extern
declstmt -> class ID inherit · { declstatements }, class
declstmt -> class ID inherit · { declstatements }, (
declstmt -> class ID inherit · { declstatements }, this
declstmt -> class ID inherit · { declstatements }, new
declstmt -> class ID inherit · { declstatements }, LITBOOL
declstmt -> class ID inherit · { declstatements }, LITINT
declstmt -> class ID inherit · { declstatements }, LITFLOAT
declstmt -> class ID inherit · { declstatements }, LITDOUBLE
declstmt -> class ID inherit · { declstatements }, LITCHAR
declstmt -> class ID inherit · { declstatements }, LITSTRING
declstmt -> class ID inherit · { declstatements }, null
declstmt -> class ID inherit · { declstatements }, ++
declstmt -> class ID inherit · { declstatements }, --
declstmt -> class ID inherit · { declstatements }, break
declstmt -> class ID inherit · { declstatements }, return
declstmt -> class ID inherit · { declstatements }, delete
declstmt -> class ID inherit · { declstatements }, while
declstmt -> class ID inherit · { declstatements }, for
declstmt -> class ID inherit · { declstatements }, if
declstmt -> class ID inherit · { declstatements }, }
declstmt -> class ID inherit · { declstatements }, &&
declstmt -> class ID inherit · { declstatements }, ||
declstmt -> class ID inherit · { declstatements }, +
declstmt -> class ID inherit · { declstatements }, -
declstmt -> class ID inherit · { declstatements }, *
declstmt -> class ID inherit · { declstatements }, /
declstmt -> class ID inherit · { declstatements }, %
declstmt -> class ID inherit · { declstatements }, !
declstmt -> class ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
127
I_201_418_517_856_943_1004_1018_1065_1079_1297_1311_1328_1358
***Set***
newobj -> new ID ( · ), ;
newobj -> new ID ( · ), .
newobj -> new ID ( · ), &&
newobj -> new ID ( · ), ||
newobj -> new ID ( · ), >
newobj -> new ID ( · ), <
newobj -> new ID ( · ), >=
newobj -> new ID ( · ), <=
newobj -> new ID ( · ), ==
newobj -> new ID ( · ), !=
newobj -> new ID ( · ), +
newobj -> new ID ( · ), -
newobj -> new ID ( · ), *
newobj -> new ID ( · ), /
newobj -> new ID ( · ), %
newobj -> new ID ( · ), )
newobj -> new ID ( · ), ,
newobj -> new ID ( · ), ]
***EndSet***
***EndState***
***State***
128
I_217_280_620_664_727_750_809_832_1126_1149_1184
***Set***
cast -> ( type · ) factor, ;
cast -> ( type · ) factor, &&
cast -> ( type · ) factor, ||
cast -> ( type · ) factor, >
cast -> ( type · ) factor, <
cast -> ( type · ) factor, >=
cast -> ( type · ) factor, <=
cast -> ( type · ) factor, ==
cast -> ( type · ) factor, !=
cast -> ( type · ) factor, +
cast -> ( type · ) factor, -
cast -> ( type · ) factor, *
cast -> ( type · ) factor, /
cast -> ( type · ) factor, %
cast -> ( type · ) factor, )
cast -> ( type · ) factor, ,
cast -> ( type · ) factor, ]
***EndSet***
***EndState***
***State***
129
I_227_284_382_447_480_544_577_624_883_916_987
***Set***
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
incdec -> ID · ++, %
incdec -> ID · --, %
primary -> ID ·, %
call -> ID · ( args ), ;
call -> ID · ( args ), &&
call -> ID · ( args ), ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
call -> ID · ( args ), %
primary -> ID ·, .
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
idBracket -> ID · [ optidx ], %
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ]
incdec -> ID · --, ]
primary -> ID ·, ]
call -> ID · ( args ), ]
idBracket -> ID · [ optidx ], ]
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
130
I_228_285_384_449_482_546_579_625_885_918_989
***Set***
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, %
primary -> indexaccess ·, .
primary -> indexaccess ·, )
primary -> indexaccess ·, ]
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
131
I_229_286_626_668_731_754_813_836_1130_1153_1188
***Set***
factor -> - factor ·, ;
factor -> - factor ·, &&
factor -> - factor ·, ||
factor -> - factor ·, >
factor -> - factor ·, <
factor -> - factor ·, >=
factor -> - factor ·, <=
factor -> - factor ·, ==
factor -> - factor ·, !=
factor -> - factor ·, +
factor -> - factor ·, -
factor -> - factor ·, *
factor -> - factor ·, /
factor -> - factor ·, %
factor -> - factor ·, )
factor -> - factor ·, ,
factor -> - factor ·, ]
***EndSet***
***EndState***
***State***
132
I_231_288_394_459_491_556_588_628_895_927_998
***Set***
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
primary -> memberaccess ·, %
indexaccess -> memberaccess · [ aexpr ], ;
call -> memberaccess · ( args ), ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
indexaccess -> memberaccess · [ aexpr ], %
call -> memberaccess · ( args ), %
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ]
indexaccess -> memberaccess · [ aexpr ], ]
call -> memberaccess · ( args ), ]
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
133
I_233_290_630_669_732_755_814_837_1131_1154_1189
***Set***
factor -> ! factor ·, ;
factor -> ! factor ·, &&
factor -> ! factor ·, ||
factor -> ! factor ·, >
factor -> ! factor ·, <
factor -> ! factor ·, >=
factor -> ! factor ·, <=
factor -> ! factor ·, ==
factor -> ! factor ·, !=
factor -> ! factor ·, +
factor -> ! factor ·, -
factor -> ! factor ·, *
factor -> ! factor ·, /
factor -> ! factor ·, %
factor -> ! factor ·, )
factor -> ! factor ·, ,
factor -> ! factor ·, ]
***EndSet***
***EndState***
***State***
134
I_238_607_770_1249_1383_1428
***Set***
stmt -> delete expr ; ·, $
stmt -> delete expr ; ·, namespace
stmt -> delete expr ; ·, {
stmt -> delete expr ; ·, ID
stmt -> delete expr ; ·, void
stmt -> delete expr ; ·, bool
stmt -> delete expr ; ·, int
stmt -> delete expr ; ·, float
stmt -> delete expr ; ·, double
stmt -> delete expr ; ·, char
stmt -> delete expr ; ·, string
stmt -> delete expr ; ·, const
stmt -> delete expr ; ·, extern
stmt -> delete expr ; ·, class
stmt -> delete expr ; ·, (
stmt -> delete expr ; ·, this
stmt -> delete expr ; ·, new
stmt -> delete expr ; ·, LITBOOL
stmt -> delete expr ; ·, LITINT
stmt -> delete expr ; ·, LITFLOAT
stmt -> delete expr ; ·, LITDOUBLE
stmt -> delete expr ; ·, LITCHAR
stmt -> delete expr ; ·, LITSTRING
stmt -> delete expr ; ·, null
stmt -> delete expr ; ·, ++
stmt -> delete expr ; ·, --
stmt -> delete expr ; ·, break
stmt -> delete expr ; ·, return
stmt -> delete expr ; ·, delete
stmt -> delete expr ; ·, while
stmt -> delete expr ; ·, for
stmt -> delete expr ; ·, if
stmt -> delete expr ; ·, }
stmt -> delete expr ; ·, &&
stmt -> delete expr ; ·, ||
stmt -> delete expr ; ·, +
stmt -> delete expr ; ·, -
stmt -> delete expr ; ·, *
stmt -> delete expr ; ·, /
stmt -> delete expr ; ·, %
stmt -> delete expr ; ·, !
stmt -> delete expr ; ·, else
***EndSet***
***EndState***
***State***
135
I_239_296_635
***Set***
bexpr -> bexpr || · bexpr, ;
bexpr -> bexpr || · bexpr, &&
bexpr -> bexpr || · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr || · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr || · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
136
I_240_297_636
***Set***
bexpr -> bexpr && · bexpr, ;
bexpr -> bexpr && · bexpr, &&
bexpr -> bexpr && · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
bexpr -> bexpr && · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr && · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
137
I_241_298_637
***Set***
bexpr -> aexpr == · aexpr, ;
bexpr -> aexpr == · aexpr, &&
bexpr -> aexpr == · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr == · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr == · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
138
I_242_299_638
***Set***
bexpr -> aexpr != · aexpr, ;
bexpr -> aexpr != · aexpr, &&
bexpr -> aexpr != · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr != · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr != · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
139
I_243_300_639
***Set***
bexpr -> aexpr <= · aexpr, ;
bexpr -> aexpr <= · aexpr, &&
bexpr -> aexpr <= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr <= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr <= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
140
I_244_301_640
***Set***
bexpr -> aexpr >= · aexpr, ;
bexpr -> aexpr >= · aexpr, &&
bexpr -> aexpr >= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr >= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr >= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
141
I_245_302_641
***Set***
bexpr -> aexpr > · aexpr, ;
bexpr -> aexpr > · aexpr, &&
bexpr -> aexpr > · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr > · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr > · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
142
I_246_303_642
***Set***
bexpr -> aexpr < · aexpr, ;
bexpr -> aexpr < · aexpr, &&
bexpr -> aexpr < · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr < · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr < · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
143
I_247_304_643_674_717_737_819_1136
***Set***
aexpr -> aexpr + · term, ;
aexpr -> aexpr + · term, >
aexpr -> aexpr + · term, <
aexpr -> aexpr + · term, >=
aexpr -> aexpr + · term, <=
aexpr -> aexpr + · term, ==
aexpr -> aexpr + · term, !=
aexpr -> aexpr + · term, +
aexpr -> aexpr + · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr + · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr + · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr + · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr + · term, &&
aexpr -> aexpr + · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
144
I_248_305_644_675_718_738_820_1137
***Set***
aexpr -> aexpr - · term, ;
aexpr -> aexpr - · term, >
aexpr -> aexpr - · term, <
aexpr -> aexpr - · term, >=
aexpr -> aexpr - · term, <=
aexpr -> aexpr - · term, ==
aexpr -> aexpr - · term, !=
aexpr -> aexpr - · term, +
aexpr -> aexpr - · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr - · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr - · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr - · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · term % factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr - · term, &&
aexpr -> aexpr - · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · term % factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · term % factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
145
I_249_306_645_676_719_739_821_1138
***Set***
term -> term * · factor, ;
term -> term * · factor, >
term -> term * · factor, <
term -> term * · factor, >=
term -> term * · factor, <=
term -> term * · factor, ==
term -> term * · factor, !=
term -> term * · factor, +
term -> term * · factor, -
term -> term * · factor, *
term -> term * · factor, /
term -> term * · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term * · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term * · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term * · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term * · factor, &&
term -> term * · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
146
I_250_307_646_677_720_740_822_1139
***Set***
term -> term / · factor, ;
term -> term / · factor, >
term -> term / · factor, <
term -> term / · factor, >=
term -> term / · factor, <=
term -> term / · factor, ==
term -> term / · factor, !=
term -> term / · factor, +
term -> term / · factor, -
term -> term / · factor, *
term -> term / · factor, /
term -> term / · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term / · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term / · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term / · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term / · factor, &&
term -> term / · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
147
I_251_308_647_678_721_741_823_1140
***Set***
term -> term % · factor, ;
term -> term % · factor, >
term -> term % · factor, <
term -> term % · factor, >=
term -> term % · factor, <=
term -> term % · factor, ==
term -> term % · factor, !=
term -> term % · factor, +
term -> term % · factor, -
term -> term % · factor, *
term -> term % · factor, /
term -> term % · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term % · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term % · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term % · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term % · factor, &&
term -> term % · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
148
I_255_608_771_1250_1384_1429
***Set***
stmt -> while ( expr · ) stmt, $
stmt -> while ( expr · ) stmt, namespace
stmt -> while ( expr · ) stmt, {
stmt -> while ( expr · ) stmt, ID
stmt -> while ( expr · ) stmt, void
stmt -> while ( expr · ) stmt, bool
stmt -> while ( expr · ) stmt, int
stmt -> while ( expr · ) stmt, float
stmt -> while ( expr · ) stmt, double
stmt -> while ( expr · ) stmt, char
stmt -> while ( expr · ) stmt, string
stmt -> while ( expr · ) stmt, const
stmt -> while ( expr · ) stmt, extern
stmt -> while ( expr · ) stmt, class
stmt -> while ( expr · ) stmt, (
stmt -> while ( expr · ) stmt, this
stmt -> while ( expr · ) stmt, new
stmt -> while ( expr · ) stmt, LITBOOL
stmt -> while ( expr · ) stmt, LITINT
stmt -> while ( expr · ) stmt, LITFLOAT
stmt -> while ( expr · ) stmt, LITDOUBLE
stmt -> while ( expr · ) stmt, LITCHAR
stmt -> while ( expr · ) stmt, LITSTRING
stmt -> while ( expr · ) stmt, null
stmt -> while ( expr · ) stmt, ++
stmt -> while ( expr · ) stmt, --
stmt -> while ( expr · ) stmt, break
stmt -> while ( expr · ) stmt, return
stmt -> while ( expr · ) stmt, delete
stmt -> while ( expr · ) stmt, while
stmt -> while ( expr · ) stmt, for
stmt -> while ( expr · ) stmt, if
stmt -> while ( expr · ) stmt, }
stmt -> while ( expr · ) stmt, &&
stmt -> while ( expr · ) stmt, ||
stmt -> while ( expr · ) stmt, +
stmt -> while ( expr · ) stmt, -
stmt -> while ( expr · ) stmt, *
stmt -> while ( expr · ) stmt, /
stmt -> while ( expr · ) stmt, %
stmt -> while ( expr · ) stmt, !
stmt -> while ( expr · ) stmt, else
***EndSet***
***EndState***
***State***
149
I_269_609_772_1251_1385_1430
***Set***
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, $
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, {
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ID
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, void
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bool
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, int
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, float
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, double
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, char
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, string
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, const
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, extern
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, class
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, (
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, this
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, new
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, null
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ++
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, --
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, break
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, return
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, delete
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, while
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, for
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, if
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, }
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, &&
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ||
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, +
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, -
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, *
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, %
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, !
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
150
I_273_610_773_1252_1386_1431
***Set***
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
151
I_274_611_774_1253_1387_1432
***Set***
stmt -> return expr ; ·, $
stmt -> return expr ; ·, namespace
stmt -> return expr ; ·, {
stmt -> return expr ; ·, ID
stmt -> return expr ; ·, void
stmt -> return expr ; ·, bool
stmt -> return expr ; ·, int
stmt -> return expr ; ·, float
stmt -> return expr ; ·, double
stmt -> return expr ; ·, char
stmt -> return expr ; ·, string
stmt -> return expr ; ·, const
stmt -> return expr ; ·, extern
stmt -> return expr ; ·, class
stmt -> return expr ; ·, (
stmt -> return expr ; ·, this
stmt -> return expr ; ·, new
stmt -> return expr ; ·, LITBOOL
stmt -> return expr ; ·, LITINT
stmt -> return expr ; ·, LITFLOAT
stmt -> return expr ; ·, LITDOUBLE
stmt -> return expr ; ·, LITCHAR
stmt -> return expr ; ·, LITSTRING
stmt -> return expr ; ·, null
stmt -> return expr ; ·, ++
stmt -> return expr ; ·, --
stmt -> return expr ; ·, break
stmt -> return expr ; ·, return
stmt -> return expr ; ·, delete
stmt -> return expr ; ·, while
stmt -> return expr ; ·, for
stmt -> return expr ; ·, if
stmt -> return expr ; ·, }
stmt -> return expr ; ·, &&
stmt -> return expr ; ·, ||
stmt -> return expr ; ·, +
stmt -> return expr ; ·, -
stmt -> return expr ; ·, *
stmt -> return expr ; ·, /
stmt -> return expr ; ·, %
stmt -> return expr ; ·, !
stmt -> return expr ; ·, else
***EndSet***
***EndState***
***State***
152
I_295_423_521_860_946_1007_1021_1068_1082_1300_1314_1331
***Set***
primary -> ( expr ) ·, .
primary -> ( expr ) ·, ;
primary -> ( expr ) ·, &&
primary -> ( expr ) ·, ||
primary -> ( expr ) ·, >
primary -> ( expr ) ·, <
primary -> ( expr ) ·, >=
primary -> ( expr ) ·, <=
primary -> ( expr ) ·, ==
primary -> ( expr ) ·, !=
primary -> ( expr ) ·, +
primary -> ( expr ) ·, -
primary -> ( expr ) ·, *
primary -> ( expr ) ·, /
primary -> ( expr ) ·, %
primary -> ( expr ) ·, )
primary -> ( expr ) ·, ,
primary -> ( expr ) ·, ]
***EndSet***
***EndState***
***State***
153
I_330_612_775_1254_1388_1433
***Set***
statementblock -> { statements } ·, $
statementblock -> { statements } ·, namespace
statementblock -> { statements } ·, {
statementblock -> { statements } ·, ID
statementblock -> { statements } ·, void
statementblock -> { statements } ·, bool
statementblock -> { statements } ·, int
statementblock -> { statements } ·, float
statementblock -> { statements } ·, double
statementblock -> { statements } ·, char
statementblock -> { statements } ·, string
statementblock -> { statements } ·, const
statementblock -> { statements } ·, extern
statementblock -> { statements } ·, class
statementblock -> { statements } ·, (
statementblock -> { statements } ·, this
statementblock -> { statements } ·, new
statementblock -> { statements } ·, LITBOOL
statementblock -> { statements } ·, LITINT
statementblock -> { statements } ·, LITFLOAT
statementblock -> { statements } ·, LITDOUBLE
statementblock -> { statements } ·, LITCHAR
statementblock -> { statements } ·, LITSTRING
statementblock -> { statements } ·, null
statementblock -> { statements } ·, ++
statementblock -> { statements } ·, --
statementblock -> { statements } ·, break
statementblock -> { statements } ·, return
statementblock -> { statements } ·, delete
statementblock -> { statements } ·, while
statementblock -> { statements } ·, for
statementblock -> { statements } ·, if
statementblock -> { statements } ·, }
statementblock -> { statements } ·, &&
statementblock -> { statements } ·, ||
statementblock -> { statements } ·, +
statementblock -> { statements } ·, -
statementblock -> { statements } ·, *
statementblock -> { statements } ·, /
statementblock -> { statements } ·, %
statementblock -> { statements } ·, !
statementblock -> { statements } ·, else
***EndSet***
***EndState***
***State***
154
I_355
***Set***
args -> expr ·, )
args -> expr ·, ,
***EndSet***
***EndState***
***State***
155
I_366_426_524_863_947_1008_1022_1069_1083_1301_1315_1332_1359
***Set***
call -> ID ( args · ), ;
call -> ID ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> ID ( args · ), &&
call -> ID ( args · ), ||
call -> ID ( args · ), >
call -> ID ( args · ), <
call -> ID ( args · ), >=
call -> ID ( args · ), <=
call -> ID ( args · ), ==
call -> ID ( args · ), !=
call -> ID ( args · ), +
call -> ID ( args · ), -
call -> ID ( args · ), *
call -> ID ( args · ), /
call -> ID ( args · ), %
call -> ID ( args · ), )
call -> ID ( args · ), ,
call -> ID ( args · ), ]
***EndSet***
***EndState***
***State***
156
I_388
***Set***
optidx -> aexpr ·, ]
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
***EndSet***
***EndState***
***State***
157
I_390_455_487_552_584_891_923_994
***Set***
term -> factor ·, ]
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, %
term -> factor ·, ;
term -> factor ·, &&
term -> factor ·, ||
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, )
term -> factor ·, ,
***EndSet***
***EndState***
***State***
158
I_396_410_416_427_525_709_797_864_948_1009_1023_1070_1084_1114_1302_1316_1333_1360
***Set***
idBracket -> ID [ optidx · ], ID
idBracket -> ID [ optidx · ], =
idBracket -> ID [ optidx · ], +=
idBracket -> ID [ optidx · ], -=
idBracket -> ID [ optidx · ], *=
idBracket -> ID [ optidx · ], /=
idBracket -> ID [ optidx · ], %=
idBracket -> ID [ optidx · ], .
idBracket -> ID [ optidx · ], ;
idBracket -> ID [ optidx · ], &&
idBracket -> ID [ optidx · ], ||
idBracket -> ID [ optidx · ], >
idBracket -> ID [ optidx · ], <
idBracket -> ID [ optidx · ], >=
idBracket -> ID [ optidx · ], <=
idBracket -> ID [ optidx · ], ==
idBracket -> ID [ optidx · ], !=
idBracket -> ID [ optidx · ], +
idBracket -> ID [ optidx · ], -
idBracket -> ID [ optidx · ], *
idBracket -> ID [ optidx · ], /
idBracket -> ID [ optidx · ], %
idBracket -> ID [ optidx · ], )
idBracket -> ID [ optidx · ], ,
idBracket -> ID [ optidx · ], ]
***EndSet***
***EndState***
***State***
159
I_397_613_777_1177_1258_1392_1437
***Set***
declstmt -> type ID ( · params ) { statements }, $
declstmt -> type ID ( · params ) { statements }, namespace
declstmt -> type ID ( · params ) { statements }, {
declstmt -> type ID ( · params ) { statements }, ID
declstmt -> type ID ( · params ) { statements }, void
declstmt -> type ID ( · params ) { statements }, bool
declstmt -> type ID ( · params ) { statements }, int
declstmt -> type ID ( · params ) { statements }, float
declstmt -> type ID ( · params ) { statements }, double
declstmt -> type ID ( · params ) { statements }, char
declstmt -> type ID ( · params ) { statements }, string
declstmt -> type ID ( · params ) { statements }, const
declstmt -> type ID ( · params ) { statements }, extern
declstmt -> type ID ( · params ) { statements }, class
declstmt -> type ID ( · params ) { statements }, (
declstmt -> type ID ( · params ) { statements }, this
declstmt -> type ID ( · params ) { statements }, new
declstmt -> type ID ( · params ) { statements }, LITBOOL
declstmt -> type ID ( · params ) { statements }, LITINT
declstmt -> type ID ( · params ) { statements }, LITFLOAT
declstmt -> type ID ( · params ) { statements }, LITDOUBLE
declstmt -> type ID ( · params ) { statements }, LITCHAR
declstmt -> type ID ( · params ) { statements }, LITSTRING
declstmt -> type ID ( · params ) { statements }, null
declstmt -> type ID ( · params ) { statements }, ++
declstmt -> type ID ( · params ) { statements }, --
declstmt -> type ID ( · params ) { statements }, break
declstmt -> type ID ( · params ) { statements }, return
declstmt -> type ID ( · params ) { statements }, delete
declstmt -> type ID ( · params ) { statements }, while
declstmt -> type ID ( · params ) { statements }, for
declstmt -> type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type ID ( · params ) { statements }, }
declstmt -> type ID ( · params ) { statements }, &&
declstmt -> type ID ( · params ) { statements }, ||
declstmt -> type ID ( · params ) { statements }, +
declstmt -> type ID ( · params ) { statements }, -
declstmt -> type ID ( · params ) { statements }, *
declstmt -> type ID ( · params ) { statements }, /
declstmt -> type ID ( · params ) { statements }, %
declstmt -> type ID ( · params ) { statements }, !
declstmt -> type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
160
I_398_614_778_1178_1259_1393_1438
***Set***
declstmt -> type ID = · expr ;, $
declstmt -> type ID = · expr ;, namespace
declstmt -> type ID = · expr ;, {
declstmt -> type ID = · expr ;, ID
declstmt -> type ID = · expr ;, void
declstmt -> type ID = · expr ;, bool
declstmt -> type ID = · expr ;, int
declstmt -> type ID = · expr ;, float
declstmt -> type ID = · expr ;, double
declstmt -> type ID = · expr ;, char
declstmt -> type ID = · expr ;, string
declstmt -> type ID = · expr ;, const
declstmt -> type ID = · expr ;, extern
declstmt -> type ID = · expr ;, class
declstmt -> type ID = · expr ;, (
declstmt -> type ID = · expr ;, this
declstmt -> type ID = · expr ;, new
declstmt -> type ID = · expr ;, LITBOOL
declstmt -> type ID = · expr ;, LITINT
declstmt -> type ID = · expr ;, LITFLOAT
declstmt -> type ID = · expr ;, LITDOUBLE
declstmt -> type ID = · expr ;, LITCHAR
declstmt -> type ID = · expr ;, LITSTRING
declstmt -> type ID = · expr ;, null
declstmt -> type ID = · expr ;, ++
declstmt -> type ID = · expr ;, --
declstmt -> type ID = · expr ;, break
declstmt -> type ID = · expr ;, return
declstmt -> type ID = · expr ;, delete
declstmt -> type ID = · expr ;, while
declstmt -> type ID = · expr ;, for
declstmt -> type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · term % factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
declstmt -> type ID = · expr ;, }
declstmt -> type ID = · expr ;, &&
declstmt -> type ID = · expr ;, ||
declstmt -> type ID = · expr ;, +
declstmt -> type ID = · expr ;, -
declstmt -> type ID = · expr ;, *
declstmt -> type ID = · expr ;, /
declstmt -> type ID = · expr ;, %
declstmt -> type ID = · expr ;, !
declstmt -> type ID = · expr ;, else
***EndSet***
***EndState***
***State***
161
I_399_417_710_712_798_1115_1165_1198_1205_1261_1268_1396_1403_1416
***Set***
primitiveBracket -> primitive [ optidx · ], ID
primitiveBracket -> primitive [ optidx · ], .
primitiveBracket -> primitive [ optidx · ], ;
primitiveBracket -> primitive [ optidx · ], &&
primitiveBracket -> primitive [ optidx · ], ||
primitiveBracket -> primitive [ optidx · ], >
primitiveBracket -> primitive [ optidx · ], <
primitiveBracket -> primitive [ optidx · ], >=
primitiveBracket -> primitive [ optidx · ], <=
primitiveBracket -> primitive [ optidx · ], ==
primitiveBracket -> primitive [ optidx · ], !=
primitiveBracket -> primitive [ optidx · ], +
primitiveBracket -> primitive [ optidx · ], -
primitiveBracket -> primitive [ optidx · ], *
primitiveBracket -> primitive [ optidx · ], /
primitiveBracket -> primitive [ optidx · ], %
primitiveBracket -> primitive [ optidx · ], )
primitiveBracket -> primitive [ optidx · ], ,
primitiveBracket -> primitive [ optidx · ], ]
***EndSet***
***EndState***
***State***
162
I_400_497_594_713_800_933_954_1015_1024_1076_1085_1117_1308_1317_1334
***Set***
memberaccess -> primary . ID ·, (
memberaccess -> primary . ID ·, =
memberaccess -> primary . ID ·, +=
memberaccess -> primary . ID ·, -=
memberaccess -> primary . ID ·, *=
memberaccess -> primary . ID ·, /=
memberaccess -> primary . ID ·, %=
memberaccess -> primary . ID ·, [
memberaccess -> primary . ID ·, .
memberaccess -> primary . ID ·, ;
memberaccess -> primary . ID ·, &&
memberaccess -> primary . ID ·, ||
memberaccess -> primary . ID ·, >
memberaccess -> primary . ID ·, <
memberaccess -> primary . ID ·, >=
memberaccess -> primary . ID ·, <=
memberaccess -> primary . ID ·, ==
memberaccess -> primary . ID ·, !=
memberaccess -> primary . ID ·, +
memberaccess -> primary . ID ·, -
memberaccess -> primary . ID ·, *
memberaccess -> primary . ID ·, /
memberaccess -> primary . ID ·, %
memberaccess -> primary . ID ·, )
memberaccess -> primary . ID ·, ,
memberaccess -> primary . ID ·, ]
***EndSet***
***EndState***
***State***
163
I_401_595_934
***Set***
assign -> lvalue = expr ·, ;
assign -> lvalue = expr ·, )
assign -> lvalue = expr ·, ,
***EndSet***
***EndState***
***State***
164
I_402_596_935
***Set***
assign -> lvalue += expr ·, ;
assign -> lvalue += expr ·, )
assign -> lvalue += expr ·, ,
***EndSet***
***EndState***
***State***
165
I_403_597_936
***Set***
assign -> lvalue -= expr ·, ;
assign -> lvalue -= expr ·, )
assign -> lvalue -= expr ·, ,
***EndSet***
***EndState***
***State***
166
I_404_598_937
***Set***
assign -> lvalue *= expr ·, ;
assign -> lvalue *= expr ·, )
assign -> lvalue *= expr ·, ,
***EndSet***
***EndState***
***State***
167
I_405_599_938
***Set***
assign -> lvalue /= expr ·, ;
assign -> lvalue /= expr ·, )
assign -> lvalue /= expr ·, ,
***EndSet***
***EndState***
***State***
168
I_406_600_939
***Set***
assign -> lvalue %= expr ·, ;
assign -> lvalue %= expr ·, )
assign -> lvalue %= expr ·, ,
***EndSet***
***EndState***
***State***
169
I_407_498_601_940_955_1016_1025_1077_1086_1309_1318_1335_1362
***Set***
call -> memberaccess ( args · ), ;
call -> memberaccess ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> memberaccess ( args · ), &&
call -> memberaccess ( args · ), ||
call -> memberaccess ( args · ), >
call -> memberaccess ( args · ), <
call -> memberaccess ( args · ), >=
call -> memberaccess ( args · ), <=
call -> memberaccess ( args · ), ==
call -> memberaccess ( args · ), !=
call -> memberaccess ( args · ), +
call -> memberaccess ( args · ), -
call -> memberaccess ( args · ), *
call -> memberaccess ( args · ), /
call -> memberaccess ( args · ), %
call -> memberaccess ( args · ), )
call -> memberaccess ( args · ), ,
call -> memberaccess ( args · ), ]
***EndSet***
***EndState***
***State***
170
I_408_499_602_714_801_941_956_1017_1026_1078_1087_1118_1310_1319_1336
***Set***
indexaccess -> memberaccess [ aexpr · ], =
indexaccess -> memberaccess [ aexpr · ], +=
indexaccess -> memberaccess [ aexpr · ], -=
indexaccess -> memberaccess [ aexpr · ], *=
indexaccess -> memberaccess [ aexpr · ], /=
indexaccess -> memberaccess [ aexpr · ], %=
indexaccess -> memberaccess [ aexpr · ], .
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
indexaccess -> memberaccess [ aexpr · ], ;
indexaccess -> memberaccess [ aexpr · ], &&
indexaccess -> memberaccess [ aexpr · ], ||
indexaccess -> memberaccess [ aexpr · ], >
indexaccess -> memberaccess [ aexpr · ], <
indexaccess -> memberaccess [ aexpr · ], >=
indexaccess -> memberaccess [ aexpr · ], <=
indexaccess -> memberaccess [ aexpr · ], ==
indexaccess -> memberaccess [ aexpr · ], !=
indexaccess -> memberaccess [ aexpr · ], +
indexaccess -> memberaccess [ aexpr · ], -
indexaccess -> memberaccess [ aexpr · ], *
indexaccess -> memberaccess [ aexpr · ], /
indexaccess -> memberaccess [ aexpr · ], %
indexaccess -> memberaccess [ aexpr · ], )
indexaccess -> memberaccess [ aexpr · ], ,
indexaccess -> memberaccess [ aexpr · ], ]
***EndSet***
***EndState***
***State***
171
I_409_847_1027_1364_1455_1475
***Set***
namespaceblock -> namespace ID { statements · }, $
namespaceblock -> namespace ID { statements · }, namespace
namespaceblock -> namespace ID { statements · }, {
namespaceblock -> namespace ID { statements · }, ID
namespaceblock -> namespace ID { statements · }, void
namespaceblock -> namespace ID { statements · }, bool
namespaceblock -> namespace ID { statements · }, int
namespaceblock -> namespace ID { statements · }, float
namespaceblock -> namespace ID { statements · }, double
namespaceblock -> namespace ID { statements · }, char
namespaceblock -> namespace ID { statements · }, string
namespaceblock -> namespace ID { statements · }, const
namespaceblock -> namespace ID { statements · }, extern
namespaceblock -> namespace ID { statements · }, class
namespaceblock -> namespace ID { statements · }, (
namespaceblock -> namespace ID { statements · }, this
namespaceblock -> namespace ID { statements · }, new
namespaceblock -> namespace ID { statements · }, LITBOOL
namespaceblock -> namespace ID { statements · }, LITINT
namespaceblock -> namespace ID { statements · }, LITFLOAT
namespaceblock -> namespace ID { statements · }, LITDOUBLE
namespaceblock -> namespace ID { statements · }, LITCHAR
namespaceblock -> namespace ID { statements · }, LITSTRING
namespaceblock -> namespace ID { statements · }, null
namespaceblock -> namespace ID { statements · }, ++
namespaceblock -> namespace ID { statements · }, --
namespaceblock -> namespace ID { statements · }, break
namespaceblock -> namespace ID { statements · }, return
namespaceblock -> namespace ID { statements · }, delete
namespaceblock -> namespace ID { statements · }, while
namespaceblock -> namespace ID { statements · }, for
namespaceblock -> namespace ID { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { statements · }, }
namespaceblock -> namespace ID { statements · }, &&
namespaceblock -> namespace ID { statements · }, ||
namespaceblock -> namespace ID { statements · }, +
namespaceblock -> namespace ID { statements · }, -
namespaceblock -> namespace ID { statements · }, *
namespaceblock -> namespace ID { statements · }, /
namespaceblock -> namespace ID { statements · }, %
namespaceblock -> namespace ID { statements · }, !
namespaceblock -> namespace ID { statements · }, else
***EndSet***
***EndState***
***State***
172
I_411_848_1028_1323_1365_1456_1476
***Set***
declstmt -> extern type ID ( · params ) ;, $
declstmt -> extern type ID ( · params ) ;, namespace
declstmt -> extern type ID ( · params ) ;, {
declstmt -> extern type ID ( · params ) ;, ID
declstmt -> extern type ID ( · params ) ;, void
declstmt -> extern type ID ( · params ) ;, bool
declstmt -> extern type ID ( · params ) ;, int
declstmt -> extern type ID ( · params ) ;, float
declstmt -> extern type ID ( · params ) ;, double
declstmt -> extern type ID ( · params ) ;, char
declstmt -> extern type ID ( · params ) ;, string
declstmt -> extern type ID ( · params ) ;, const
declstmt -> extern type ID ( · params ) ;, extern
declstmt -> extern type ID ( · params ) ;, class
declstmt -> extern type ID ( · params ) ;, (
declstmt -> extern type ID ( · params ) ;, this
declstmt -> extern type ID ( · params ) ;, new
declstmt -> extern type ID ( · params ) ;, LITBOOL
declstmt -> extern type ID ( · params ) ;, LITINT
declstmt -> extern type ID ( · params ) ;, LITFLOAT
declstmt -> extern type ID ( · params ) ;, LITDOUBLE
declstmt -> extern type ID ( · params ) ;, LITCHAR
declstmt -> extern type ID ( · params ) ;, LITSTRING
declstmt -> extern type ID ( · params ) ;, null
declstmt -> extern type ID ( · params ) ;, ++
declstmt -> extern type ID ( · params ) ;, --
declstmt -> extern type ID ( · params ) ;, break
declstmt -> extern type ID ( · params ) ;, return
declstmt -> extern type ID ( · params ) ;, delete
declstmt -> extern type ID ( · params ) ;, while
declstmt -> extern type ID ( · params ) ;, for
declstmt -> extern type ID ( · params ) ;, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern type ID ( · params ) ;, }
declstmt -> extern type ID ( · params ) ;, &&
declstmt -> extern type ID ( · params ) ;, ||
declstmt -> extern type ID ( · params ) ;, +
declstmt -> extern type ID ( · params ) ;, -
declstmt -> extern type ID ( · params ) ;, *
declstmt -> extern type ID ( · params ) ;, /
declstmt -> extern type ID ( · params ) ;, %
declstmt -> extern type ID ( · params ) ;, !
declstmt -> extern type ID ( · params ) ;, else
***EndSet***
***EndState***
***State***
173
I_412_849_1029_1324_1366_1457_1477
***Set***
declstmt -> const type ID = · lit ;, $
declstmt -> const type ID = · lit ;, namespace
declstmt -> const type ID = · lit ;, {
declstmt -> const type ID = · lit ;, ID
declstmt -> const type ID = · lit ;, void
declstmt -> const type ID = · lit ;, bool
declstmt -> const type ID = · lit ;, int
declstmt -> const type ID = · lit ;, float
declstmt -> const type ID = · lit ;, double
declstmt -> const type ID = · lit ;, char
declstmt -> const type ID = · lit ;, string
declstmt -> const type ID = · lit ;, const
declstmt -> const type ID = · lit ;, extern
declstmt -> const type ID = · lit ;, class
declstmt -> const type ID = · lit ;, (
declstmt -> const type ID = · lit ;, this
declstmt -> const type ID = · lit ;, new
declstmt -> const type ID = · lit ;, LITBOOL
declstmt -> const type ID = · lit ;, LITINT
declstmt -> const type ID = · lit ;, LITFLOAT
declstmt -> const type ID = · lit ;, LITDOUBLE
declstmt -> const type ID = · lit ;, LITCHAR
declstmt -> const type ID = · lit ;, LITSTRING
declstmt -> const type ID = · lit ;, null
declstmt -> const type ID = · lit ;, ++
declstmt -> const type ID = · lit ;, --
declstmt -> const type ID = · lit ;, break
declstmt -> const type ID = · lit ;, return
declstmt -> const type ID = · lit ;, delete
declstmt -> const type ID = · lit ;, while
declstmt -> const type ID = · lit ;, for
declstmt -> const type ID = · lit ;, if
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
declstmt -> const type ID = · lit ;, }
declstmt -> const type ID = · lit ;, &&
declstmt -> const type ID = · lit ;, ||
declstmt -> const type ID = · lit ;, +
declstmt -> const type ID = · lit ;, -
declstmt -> const type ID = · lit ;, *
declstmt -> const type ID = · lit ;, /
declstmt -> const type ID = · lit ;, %
declstmt -> const type ID = · lit ;, !
declstmt -> const type ID = · lit ;, else
***EndSet***
***EndState***
***State***
174
I_413
***Set***
inherit -> : ID ·, {
***EndSet***
***EndState***
***State***
175
I_414_850_1030_1325_1367_1458_1478
***Set***
declstmt -> class ID inherit { · declstatements }, $
declstmt -> class ID inherit { · declstatements }, namespace
declstmt -> class ID inherit { · declstatements }, {
declstmt -> class ID inherit { · declstatements }, ID
declstmt -> class ID inherit { · declstatements }, void
declstmt -> class ID inherit { · declstatements }, bool
declstmt -> class ID inherit { · declstatements }, int
declstmt -> class ID inherit { · declstatements }, float
declstmt -> class ID inherit { · declstatements }, double
declstmt -> class ID inherit { · declstatements }, char
declstmt -> class ID inherit { · declstatements }, string
declstmt -> class ID inherit { · declstatements }, const
declstmt -> class ID inherit { · declstatements }, extern
declstmt -> class ID inherit { · declstatements }, class
declstmt -> class ID inherit { · declstatements }, (
declstmt -> class ID inherit { · declstatements }, this
declstmt -> class ID inherit { · declstatements }, new
declstmt -> class ID inherit { · declstatements }, LITBOOL
declstmt -> class ID inherit { · declstatements }, LITINT
declstmt -> class ID inherit { · declstatements }, LITFLOAT
declstmt -> class ID inherit { · declstatements }, LITDOUBLE
declstmt -> class ID inherit { · declstatements }, LITCHAR
declstmt -> class ID inherit { · declstatements }, LITSTRING
declstmt -> class ID inherit { · declstatements }, null
declstmt -> class ID inherit { · declstatements }, ++
declstmt -> class ID inherit { · declstatements }, --
declstmt -> class ID inherit { · declstatements }, break
declstmt -> class ID inherit { · declstatements }, return
declstmt -> class ID inherit { · declstatements }, delete
declstmt -> class ID inherit { · declstatements }, while
declstmt -> class ID inherit { · declstatements }, for
declstmt -> class ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, double
declstatements -> · declstatements declstmt, char
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, const
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, float
declstatements -> · declstmt, double
declstatements -> · declstmt, char
declstatements -> · declstmt, string
declstatements -> · declstmt, const
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, float
declstatements -> ·, double
declstatements -> ·, char
declstatements -> ·, string
declstatements -> ·, const
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { · declstatements }, }
declstmt -> class ID inherit { · declstatements }, &&
declstmt -> class ID inherit { · declstatements }, ||
declstmt -> class ID inherit { · declstatements }, +
declstmt -> class ID inherit { · declstatements }, -
declstmt -> class ID inherit { · declstatements }, *
declstmt -> class ID inherit { · declstatements }, /
declstmt -> class ID inherit { · declstatements }, %
declstmt -> class ID inherit { · declstatements }, !
declstmt -> class ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
176
I_415_708_796_1113_1164_1197_1204_1260_1267_1395_1402_1415_1439
***Set***
newobj -> new ID ( ) ·, ;
newobj -> new ID ( ) ·, .
newobj -> new ID ( ) ·, &&
newobj -> new ID ( ) ·, ||
newobj -> new ID ( ) ·, >
newobj -> new ID ( ) ·, <
newobj -> new ID ( ) ·, >=
newobj -> new ID ( ) ·, <=
newobj -> new ID ( ) ·, ==
newobj -> new ID ( ) ·, !=
newobj -> new ID ( ) ·, +
newobj -> new ID ( ) ·, -
newobj -> new ID ( ) ·, *
newobj -> new ID ( ) ·, /
newobj -> new ID ( ) ·, %
newobj -> new ID ( ) ·, )
newobj -> new ID ( ) ·, ,
newobj -> new ID ( ) ·, ]
***EndSet***
***EndState***
***State***
177
I_421_520_859_945_1006_1020_1067_1081_1299_1313_1330
***Set***
cast -> ( type ) · factor, ;
cast -> ( type ) · factor, &&
cast -> ( type ) · factor, ||
cast -> ( type ) · factor, >
cast -> ( type ) · factor, <
cast -> ( type ) · factor, >=
cast -> ( type ) · factor, <=
cast -> ( type ) · factor, ==
cast -> ( type ) · factor, !=
cast -> ( type ) · factor, +
cast -> ( type ) · factor, -
cast -> ( type ) · factor, *
cast -> ( type ) · factor, /
cast -> ( type ) · factor, %
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
cast -> ( type ) · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
cast -> ( type ) · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
cast -> ( type ) · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
178
I_428_526_865
***Set***
bexpr -> bexpr || bexpr ·, ;
bexpr -> bexpr || bexpr ·, &&
bexpr -> bexpr || bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr || bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr || bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
179
I_429_527_866
***Set***
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
***EndSet***
***EndState***
***State***
180
I_432_529_868
***Set***
bexpr -> bexpr && bexpr ·, ;
bexpr -> bexpr && bexpr ·, &&
bexpr -> bexpr && bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr && bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr && bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
181
I_453_550_889
***Set***
bexpr -> aexpr == aexpr ·, ;
bexpr -> aexpr == aexpr ·, &&
bexpr -> aexpr == aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr == aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr == aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
182
I_461_558_897
***Set***
bexpr -> aexpr != aexpr ·, ;
bexpr -> aexpr != aexpr ·, &&
bexpr -> aexpr != aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr != aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr != aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
183
I_462_559_898
***Set***
bexpr -> aexpr <= aexpr ·, ;
bexpr -> aexpr <= aexpr ·, &&
bexpr -> aexpr <= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr <= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr <= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
184
I_463_560_899
***Set***
bexpr -> aexpr >= aexpr ·, ;
bexpr -> aexpr >= aexpr ·, &&
bexpr -> aexpr >= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr >= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr >= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
185
I_464_561_900
***Set***
bexpr -> aexpr > aexpr ·, ;
bexpr -> aexpr > aexpr ·, &&
bexpr -> aexpr > aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr > aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr > aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
186
I_465_562_901
***Set***
bexpr -> aexpr < aexpr ·, ;
bexpr -> aexpr < aexpr ·, &&
bexpr -> aexpr < aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr < aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr < aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
187
I_486_583_922_949_993_1010_1071_1303
***Set***
aexpr -> aexpr + term ·, ;
aexpr -> aexpr + term ·, >
aexpr -> aexpr + term ·, <
aexpr -> aexpr + term ·, >=
aexpr -> aexpr + term ·, <=
aexpr -> aexpr + term ·, ==
aexpr -> aexpr + term ·, !=
aexpr -> aexpr + term ·, +
aexpr -> aexpr + term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr + term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr + term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr + term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr + term ·, &&
aexpr -> aexpr + term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
188
I_493_590_929_950_1000_1011_1072_1304
***Set***
aexpr -> aexpr - term ·, ;
aexpr -> aexpr - term ·, >
aexpr -> aexpr - term ·, <
aexpr -> aexpr - term ·, >=
aexpr -> aexpr - term ·, <=
aexpr -> aexpr - term ·, ==
aexpr -> aexpr - term ·, !=
aexpr -> aexpr - term ·, +
aexpr -> aexpr - term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · % factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · % factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · % factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · % factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · % factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · % factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · % factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · % factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · % factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · % factor, *
term -> term · * factor, /
term -> term · / factor, /
term -> term · % factor, /
term -> term · * factor, %
term -> term · / factor, %
term -> term · % factor, %
aexpr -> aexpr - term ·, )
term -> term · * factor, )
term -> term · / factor, )
term -> term · % factor, )
aexpr -> aexpr - term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
term -> term · % factor, ,
aexpr -> aexpr - term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
term -> term · % factor, ]
aexpr -> aexpr - term ·, &&
aexpr -> aexpr - term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · % factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
term -> term · % factor, ||
***EndSet***
***EndState***
***State***
189
I_494_591_930_951_1001_1012_1073_1305
***Set***
term -> term * factor ·, ;
term -> term * factor ·, >
term -> term * factor ·, <
term -> term * factor ·, >=
term -> term * factor ·, <=
term -> term * factor ·, ==
term -> term * factor ·, !=
term -> term * factor ·, +
term -> term * factor ·, -
term -> term * factor ·, *
term -> term * factor ·, /
term -> term * factor ·, %
term -> term * factor ·, )
term -> term * factor ·, ,
term -> term * factor ·, ]
term -> term * factor ·, &&
term -> term * factor ·, ||
***EndSet***
***EndState***
***State***
190
I_495_592_931_952_1002_1013_1074_1306
***Set***
term -> term / factor ·, ;
term -> term / factor ·, >
term -> term / factor ·, <
term -> term / factor ·, >=
term -> term / factor ·, <=
term -> term / factor ·, ==
term -> term / factor ·, !=
term -> term / factor ·, +
term -> term / factor ·, -
term -> term / factor ·, *
term -> term / factor ·, /
term -> term / factor ·, %
term -> term / factor ·, )
term -> term / factor ·, ,
term -> term / factor ·, ]
term -> term / factor ·, &&
term -> term / factor ·, ||
***EndSet***
***EndState***
***State***
191
I_496_593_932_953_1003_1014_1075_1307
***Set***
term -> term % factor ·, ;
term -> term % factor ·, >
term -> term % factor ·, <
term -> term % factor ·, >=
term -> term % factor ·, <=
term -> term % factor ·, ==
term -> term % factor ·, !=
term -> term % factor ·, +
term -> term % factor ·, -
term -> term % factor ·, *
term -> term % factor ·, /
term -> term % factor ·, %
term -> term % factor ·, )
term -> term % factor ·, ,
term -> term % factor ·, ]
term -> term % factor ·, &&
term -> term % factor ·, ||
***EndSet***
***EndState***
***State***
192
I_500_851_1031_1368_1459_1479
***Set***
stmt -> while ( expr ) · stmt, $
stmt -> while ( expr ) · stmt, namespace
stmt -> while ( expr ) · stmt, {
stmt -> while ( expr ) · stmt, ID
stmt -> while ( expr ) · stmt, void
stmt -> while ( expr ) · stmt, bool
stmt -> while ( expr ) · stmt, int
stmt -> while ( expr ) · stmt, float
stmt -> while ( expr ) · stmt, double
stmt -> while ( expr ) · stmt, char
stmt -> while ( expr ) · stmt, string
stmt -> while ( expr ) · stmt, const
stmt -> while ( expr ) · stmt, extern
stmt -> while ( expr ) · stmt, class
stmt -> while ( expr ) · stmt, (
stmt -> while ( expr ) · stmt, this
stmt -> while ( expr ) · stmt, new
stmt -> while ( expr ) · stmt, LITBOOL
stmt -> while ( expr ) · stmt, LITINT
stmt -> while ( expr ) · stmt, LITFLOAT
stmt -> while ( expr ) · stmt, LITDOUBLE
stmt -> while ( expr ) · stmt, LITCHAR
stmt -> while ( expr ) · stmt, LITSTRING
stmt -> while ( expr ) · stmt, null
stmt -> while ( expr ) · stmt, ++
stmt -> while ( expr ) · stmt, --
stmt -> while ( expr ) · stmt, break
stmt -> while ( expr ) · stmt, return
stmt -> while ( expr ) · stmt, delete
stmt -> while ( expr ) · stmt, while
stmt -> while ( expr ) · stmt, for
stmt -> while ( expr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> while ( expr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> while ( expr ) · stmt, &&
stmt -> while ( expr ) · stmt, ||
stmt -> while ( expr ) · stmt, +
stmt -> while ( expr ) · stmt, -
stmt -> while ( expr ) · stmt, *
stmt -> while ( expr ) · stmt, /
stmt -> while ( expr ) · stmt, %
stmt -> while ( expr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> while ( expr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
193
I_513_852_1032_1369_1460_1480
***Set***
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, $
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, {
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, void
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, int
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, float
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, double
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, char
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, string
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, const
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, class
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, (
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, this
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, new
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, null
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, --
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, break
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, return
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, while
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, for
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, if
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, }
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, +
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, -
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, *
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, /
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, %
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, !
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
194
I_516_853_1033_1370_1461_1481
***Set***
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · namespaceblock, $
stmt -> · statementblock, else
stmt -> · statementblock, $
stmt -> · declstmt, else
stmt -> · declstmt, $
stmt -> · stmtexpr ;, else
stmt -> · stmtexpr ;, $
stmt -> · break ;, else
stmt -> · break ;, $
stmt -> · return expr ;, else
stmt -> · return expr ;, $
stmt -> · return ;, else
stmt -> · return ;, $
stmt -> · delete expr ;, else
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, else
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, else
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
195
I_657
***Set***
args -> args , · expr, )
args -> args , · expr, ,
expr -> · assign, )
expr -> · nexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · term % factor, ,
term -> · factor, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
***EndSet***
***EndState***
***State***
196
I_658_715_802_1119_1167_1200_1207_1263_1270_1398_1405_1418_1440
***Set***
call -> ID ( args ) ·, ;
call -> ID ( args ) ·, .
call -> ID ( args ) ·, &&
call -> ID ( args ) ·, ||
call -> ID ( args ) ·, >
call -> ID ( args ) ·, <
call -> ID ( args ) ·, >=
call -> ID ( args ) ·, <=
call -> ID ( args ) ·, ==
call -> ID ( args ) ·, !=
call -> ID ( args ) ·, +
call -> ID ( args ) ·, -
call -> ID ( args ) ·, *
call -> ID ( args ) ·, /
call -> ID ( args ) ·, %
call -> ID ( args ) ·, )
call -> ID ( args ) ·, ,
call -> ID ( args ) ·, ]
***EndSet***
***EndState***
***State***
197
I_682_690_706_716_803_969_1062_1120_1168_1201_1208_1264_1271_1294_1399_1406_1419_1441
***Set***
idBracket -> ID [ optidx ] ·, ID
idBracket -> ID [ optidx ] ·, =
idBracket -> ID [ optidx ] ·, +=
idBracket -> ID [ optidx ] ·, -=
idBracket -> ID [ optidx ] ·, *=
idBracket -> ID [ optidx ] ·, /=
idBracket -> ID [ optidx ] ·, %=
idBracket -> ID [ optidx ] ·, .
idBracket -> ID [ optidx ] ·, ;
idBracket -> ID [ optidx ] ·, &&
idBracket -> ID [ optidx ] ·, ||
idBracket -> ID [ optidx ] ·, >
idBracket -> ID [ optidx ] ·, <
idBracket -> ID [ optidx ] ·, >=
idBracket -> ID [ optidx ] ·, <=
idBracket -> ID [ optidx ] ·, ==
idBracket -> ID [ optidx ] ·, !=
idBracket -> ID [ optidx ] ·, +
idBracket -> ID [ optidx ] ·, -
idBracket -> ID [ optidx ] ·, *
idBracket -> ID [ optidx ] ·, /
idBracket -> ID [ optidx ] ·, %
idBracket -> ID [ optidx ] ·, )
idBracket -> ID [ optidx ] ·, ,
idBracket -> ID [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
198
I_683
***Set***
params -> type · ID, )
params -> type · ID, ,
***EndSet***
***EndState***
***State***
199
I_684_854_1045_1326_1373_1464_1484
***Set***
declstmt -> type ID ( params · ) { statements }, $
declstmt -> type ID ( params · ) { statements }, namespace
declstmt -> type ID ( params · ) { statements }, {
declstmt -> type ID ( params · ) { statements }, ID
declstmt -> type ID ( params · ) { statements }, void
declstmt -> type ID ( params · ) { statements }, bool
declstmt -> type ID ( params · ) { statements }, int
declstmt -> type ID ( params · ) { statements }, float
declstmt -> type ID ( params · ) { statements }, double
declstmt -> type ID ( params · ) { statements }, char
declstmt -> type ID ( params · ) { statements }, string
declstmt -> type ID ( params · ) { statements }, const
declstmt -> type ID ( params · ) { statements }, extern
declstmt -> type ID ( params · ) { statements }, class
declstmt -> type ID ( params · ) { statements }, (
declstmt -> type ID ( params · ) { statements }, this
declstmt -> type ID ( params · ) { statements }, new
declstmt -> type ID ( params · ) { statements }, LITBOOL
declstmt -> type ID ( params · ) { statements }, LITINT
declstmt -> type ID ( params · ) { statements }, LITFLOAT
declstmt -> type ID ( params · ) { statements }, LITDOUBLE
declstmt -> type ID ( params · ) { statements }, LITCHAR
declstmt -> type ID ( params · ) { statements }, LITSTRING
declstmt -> type ID ( params · ) { statements }, null
declstmt -> type ID ( params · ) { statements }, ++
declstmt -> type ID ( params · ) { statements }, --
declstmt -> type ID ( params · ) { statements }, break
declstmt -> type ID ( params · ) { statements }, return
declstmt -> type ID ( params · ) { statements }, delete
declstmt -> type ID ( params · ) { statements }, while
declstmt -> type ID ( params · ) { statements }, for
declstmt -> type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> type ID ( params · ) { statements }, }
declstmt -> type ID ( params · ) { statements }, &&
declstmt -> type ID ( params · ) { statements }, ||
declstmt -> type ID ( params · ) { statements }, +
declstmt -> type ID ( params · ) { statements }, -
declstmt -> type ID ( params · ) { statements }, *
declstmt -> type ID ( params · ) { statements }, /
declstmt -> type ID ( params · ) { statements }, %
declstmt -> type ID ( params · ) { statements }, !
declstmt -> type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
200
I_685_855_1046_1327_1374_1465_1485
***Set***
declstmt -> type ID = expr · ;, $
declstmt -> type ID = expr · ;, namespace
declstmt -> type ID = expr · ;, {
declstmt -> type ID = expr · ;, ID
declstmt -> type ID = expr · ;, void
declstmt -> type ID = expr · ;, bool
declstmt -> type ID = expr · ;, int
declstmt -> type ID = expr · ;, float
declstmt -> type ID = expr · ;, double
declstmt -> type ID = expr · ;, char
declstmt -> type ID = expr · ;, string
declstmt -> type ID = expr · ;, const
declstmt -> type ID = expr · ;, extern
declstmt -> type ID = expr · ;, class
declstmt -> type ID = expr · ;, (
declstmt -> type ID = expr · ;, this
declstmt -> type ID = expr · ;, new
declstmt -> type ID = expr · ;, LITBOOL
declstmt -> type ID = expr · ;, LITINT
declstmt -> type ID = expr · ;, LITFLOAT
declstmt -> type ID = expr · ;, LITDOUBLE
declstmt -> type ID = expr · ;, LITCHAR
declstmt -> type ID = expr · ;, LITSTRING
declstmt -> type ID = expr · ;, null
declstmt -> type ID = expr · ;, ++
declstmt -> type ID = expr · ;, --
declstmt -> type ID = expr · ;, break
declstmt -> type ID = expr · ;, return
declstmt -> type ID = expr · ;, delete
declstmt -> type ID = expr · ;, while
declstmt -> type ID = expr · ;, for
declstmt -> type ID = expr · ;, if
declstmt -> type ID = expr · ;, }
declstmt -> type ID = expr · ;, &&
declstmt -> type ID = expr · ;, ||
declstmt -> type ID = expr · ;, +
declstmt -> type ID = expr · ;, -
declstmt -> type ID = expr · ;, *
declstmt -> type ID = expr · ;, /
declstmt -> type ID = expr · ;, %
declstmt -> type ID = expr · ;, !
declstmt -> type ID = expr · ;, else
***EndSet***
***EndState***
***State***
201
I_686_707_970_971_1063_1295_1320_1337_1338_1375_1376_1467_1468_1473
***Set***
primitiveBracket -> primitive [ optidx ] ·, ID
primitiveBracket -> primitive [ optidx ] ·, .
primitiveBracket -> primitive [ optidx ] ·, ;
primitiveBracket -> primitive [ optidx ] ·, &&
primitiveBracket -> primitive [ optidx ] ·, ||
primitiveBracket -> primitive [ optidx ] ·, >
primitiveBracket -> primitive [ optidx ] ·, <
primitiveBracket -> primitive [ optidx ] ·, >=
primitiveBracket -> primitive [ optidx ] ·, <=
primitiveBracket -> primitive [ optidx ] ·, ==
primitiveBracket -> primitive [ optidx ] ·, !=
primitiveBracket -> primitive [ optidx ] ·, +
primitiveBracket -> primitive [ optidx ] ·, -
primitiveBracket -> primitive [ optidx ] ·, *
primitiveBracket -> primitive [ optidx ] ·, /
primitiveBracket -> primitive [ optidx ] ·, %
primitiveBracket -> primitive [ optidx ] ·, )
primitiveBracket -> primitive [ optidx ] ·, ,
primitiveBracket -> primitive [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
202
I_687_763_845_1162_1169_1202_1209_1265_1272_1400_1407_1420_1442
***Set***
call -> memberaccess ( args ) ·, ;
call -> memberaccess ( args ) ·, .
call -> memberaccess ( args ) ·, &&
call -> memberaccess ( args ) ·, ||
call -> memberaccess ( args ) ·, >
call -> memberaccess ( args ) ·, <
call -> memberaccess ( args ) ·, >=
call -> memberaccess ( args ) ·, <=
call -> memberaccess ( args ) ·, ==
call -> memberaccess ( args ) ·, !=
call -> memberaccess ( args ) ·, +
call -> memberaccess ( args ) ·, -
call -> memberaccess ( args ) ·, *
call -> memberaccess ( args ) ·, /
call -> memberaccess ( args ) ·, %
call -> memberaccess ( args ) ·, )
call -> memberaccess ( args ) ·, ,
call -> memberaccess ( args ) ·, ]
***EndSet***
***EndState***
***State***
203
I_688_764_846_972_1064_1163_1170_1203_1210_1266_1273_1296_1401_1408_1421
***Set***
indexaccess -> memberaccess [ aexpr ] ·, =
indexaccess -> memberaccess [ aexpr ] ·, +=
indexaccess -> memberaccess [ aexpr ] ·, -=
indexaccess -> memberaccess [ aexpr ] ·, *=
indexaccess -> memberaccess [ aexpr ] ·, /=
indexaccess -> memberaccess [ aexpr ] ·, %=
indexaccess -> memberaccess [ aexpr ] ·, .
indexaccess -> memberaccess [ aexpr ] ·, ;
indexaccess -> memberaccess [ aexpr ] ·, &&
indexaccess -> memberaccess [ aexpr ] ·, ||
indexaccess -> memberaccess [ aexpr ] ·, >
indexaccess -> memberaccess [ aexpr ] ·, <
indexaccess -> memberaccess [ aexpr ] ·, >=
indexaccess -> memberaccess [ aexpr ] ·, <=
indexaccess -> memberaccess [ aexpr ] ·, ==
indexaccess -> memberaccess [ aexpr ] ·, !=
indexaccess -> memberaccess [ aexpr ] ·, +
indexaccess -> memberaccess [ aexpr ] ·, -
indexaccess -> memberaccess [ aexpr ] ·, *
indexaccess -> memberaccess [ aexpr ] ·, /
indexaccess -> memberaccess [ aexpr ] ·, %
indexaccess -> memberaccess [ aexpr ] ·, )
indexaccess -> memberaccess [ aexpr ] ·, ,
indexaccess -> memberaccess [ aexpr ] ·, ]
***EndSet***
***EndState***
***State***
204
I_689_1088_1211_1444_1494_1506
***Set***
namespaceblock -> namespace ID { statements } ·, $
namespaceblock -> namespace ID { statements } ·, namespace
namespaceblock -> namespace ID { statements } ·, {
namespaceblock -> namespace ID { statements } ·, ID
namespaceblock -> namespace ID { statements } ·, void
namespaceblock -> namespace ID { statements } ·, bool
namespaceblock -> namespace ID { statements } ·, int
namespaceblock -> namespace ID { statements } ·, float
namespaceblock -> namespace ID { statements } ·, double
namespaceblock -> namespace ID { statements } ·, char
namespaceblock -> namespace ID { statements } ·, string
namespaceblock -> namespace ID { statements } ·, const
namespaceblock -> namespace ID { statements } ·, extern
namespaceblock -> namespace ID { statements } ·, class
namespaceblock -> namespace ID { statements } ·, (
namespaceblock -> namespace ID { statements } ·, this
namespaceblock -> namespace ID { statements } ·, new
namespaceblock -> namespace ID { statements } ·, LITBOOL
namespaceblock -> namespace ID { statements } ·, LITINT
namespaceblock -> namespace ID { statements } ·, LITFLOAT
namespaceblock -> namespace ID { statements } ·, LITDOUBLE
namespaceblock -> namespace ID { statements } ·, LITCHAR
namespaceblock -> namespace ID { statements } ·, LITSTRING
namespaceblock -> namespace ID { statements } ·, null
namespaceblock -> namespace ID { statements } ·, ++
namespaceblock -> namespace ID { statements } ·, --
namespaceblock -> namespace ID { statements } ·, break
namespaceblock -> namespace ID { statements } ·, return
namespaceblock -> namespace ID { statements } ·, delete
namespaceblock -> namespace ID { statements } ·, while
namespaceblock -> namespace ID { statements } ·, for
namespaceblock -> namespace ID { statements } ·, if
namespaceblock -> namespace ID { statements } ·, }
namespaceblock -> namespace ID { statements } ·, &&
namespaceblock -> namespace ID { statements } ·, ||
namespaceblock -> namespace ID { statements } ·, +
namespaceblock -> namespace ID { statements } ·, -
namespaceblock -> namespace ID { statements } ·, *
namespaceblock -> namespace ID { statements } ·, /
namespaceblock -> namespace ID { statements } ·, %
namespaceblock -> namespace ID { statements } ·, !
namespaceblock -> namespace ID { statements } ·, else
***EndSet***
***EndState***
***State***
205
I_691_1089_1212_1410_1445_1495_1507
***Set***
declstmt -> extern type ID ( params · ) ;, $
declstmt -> extern type ID ( params · ) ;, namespace
declstmt -> extern type ID ( params · ) ;, {
declstmt -> extern type ID ( params · ) ;, ID
declstmt -> extern type ID ( params · ) ;, void
declstmt -> extern type ID ( params · ) ;, bool
declstmt -> extern type ID ( params · ) ;, int
declstmt -> extern type ID ( params · ) ;, float
declstmt -> extern type ID ( params · ) ;, double
declstmt -> extern type ID ( params · ) ;, char
declstmt -> extern type ID ( params · ) ;, string
declstmt -> extern type ID ( params · ) ;, const
declstmt -> extern type ID ( params · ) ;, extern
declstmt -> extern type ID ( params · ) ;, class
declstmt -> extern type ID ( params · ) ;, (
declstmt -> extern type ID ( params · ) ;, this
declstmt -> extern type ID ( params · ) ;, new
declstmt -> extern type ID ( params · ) ;, LITBOOL
declstmt -> extern type ID ( params · ) ;, LITINT
declstmt -> extern type ID ( params · ) ;, LITFLOAT
declstmt -> extern type ID ( params · ) ;, LITDOUBLE
declstmt -> extern type ID ( params · ) ;, LITCHAR
declstmt -> extern type ID ( params · ) ;, LITSTRING
declstmt -> extern type ID ( params · ) ;, null
declstmt -> extern type ID ( params · ) ;, ++
declstmt -> extern type ID ( params · ) ;, --
declstmt -> extern type ID ( params · ) ;, break
declstmt -> extern type ID ( params · ) ;, return
declstmt -> extern type ID ( params · ) ;, delete
declstmt -> extern type ID ( params · ) ;, while
declstmt -> extern type ID ( params · ) ;, for
declstmt -> extern type ID ( params · ) ;, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> extern type ID ( params · ) ;, }
declstmt -> extern type ID ( params · ) ;, &&
declstmt -> extern type ID ( params · ) ;, ||
declstmt -> extern type ID ( params · ) ;, +
declstmt -> extern type ID ( params · ) ;, -
declstmt -> extern type ID ( params · ) ;, *
declstmt -> extern type ID ( params · ) ;, /
declstmt -> extern type ID ( params · ) ;, %
declstmt -> extern type ID ( params · ) ;, !
declstmt -> extern type ID ( params · ) ;, else
***EndSet***
***EndState***
***State***
206
I_699_1090_1213_1411_1446_1496_1508
***Set***
declstmt -> const type ID = lit · ;, $
declstmt -> const type ID = lit · ;, namespace
declstmt -> const type ID = lit · ;, {
declstmt -> const type ID = lit · ;, ID
declstmt -> const type ID = lit · ;, void
declstmt -> const type ID = lit · ;, bool
declstmt -> const type ID = lit · ;, int
declstmt -> const type ID = lit · ;, float
declstmt -> const type ID = lit · ;, double
declstmt -> const type ID = lit · ;, char
declstmt -> const type ID = lit · ;, string
declstmt -> const type ID = lit · ;, const
declstmt -> const type ID = lit · ;, extern
declstmt -> const type ID = lit · ;, class
declstmt -> const type ID = lit · ;, (
declstmt -> const type ID = lit · ;, this
declstmt -> const type ID = lit · ;, new
declstmt -> const type ID = lit · ;, LITBOOL
declstmt -> const type ID = lit · ;, LITINT
declstmt -> const type ID = lit · ;, LITFLOAT
declstmt -> const type ID = lit · ;, LITDOUBLE
declstmt -> const type ID = lit · ;, LITCHAR
declstmt -> const type ID = lit · ;, LITSTRING
declstmt -> const type ID = lit · ;, null
declstmt -> const type ID = lit · ;, ++
declstmt -> const type ID = lit · ;, --
declstmt -> const type ID = lit · ;, break
declstmt -> const type ID = lit · ;, return
declstmt -> const type ID = lit · ;, delete
declstmt -> const type ID = lit · ;, while
declstmt -> const type ID = lit · ;, for
declstmt -> const type ID = lit · ;, if
declstmt -> const type ID = lit · ;, }
declstmt -> const type ID = lit · ;, &&
declstmt -> const type ID = lit · ;, ||
declstmt -> const type ID = lit · ;, +
declstmt -> const type ID = lit · ;, -
declstmt -> const type ID = lit · ;, *
declstmt -> const type ID = lit · ;, /
declstmt -> const type ID = lit · ;, %
declstmt -> const type ID = lit · ;, !
declstmt -> const type ID = lit · ;, else
***EndSet***
***EndState***
***State***
207
I_703_1091_1214_1412_1447_1497_1509
***Set***
declstmt -> class ID inherit { declstatements · }, $
declstmt -> class ID inherit { declstatements · }, namespace
declstmt -> class ID inherit { declstatements · }, {
declstmt -> class ID inherit { declstatements · }, ID
declstmt -> class ID inherit { declstatements · }, void
declstmt -> class ID inherit { declstatements · }, bool
declstmt -> class ID inherit { declstatements · }, int
declstmt -> class ID inherit { declstatements · }, float
declstmt -> class ID inherit { declstatements · }, double
declstmt -> class ID inherit { declstatements · }, char
declstmt -> class ID inherit { declstatements · }, string
declstmt -> class ID inherit { declstatements · }, const
declstmt -> class ID inherit { declstatements · }, extern
declstmt -> class ID inherit { declstatements · }, class
declstmt -> class ID inherit { declstatements · }, (
declstmt -> class ID inherit { declstatements · }, this
declstmt -> class ID inherit { declstatements · }, new
declstmt -> class ID inherit { declstatements · }, LITBOOL
declstmt -> class ID inherit { declstatements · }, LITINT
declstmt -> class ID inherit { declstatements · }, LITFLOAT
declstmt -> class ID inherit { declstatements · }, LITDOUBLE
declstmt -> class ID inherit { declstatements · }, LITCHAR
declstmt -> class ID inherit { declstatements · }, LITSTRING
declstmt -> class ID inherit { declstatements · }, null
declstmt -> class ID inherit { declstatements · }, ++
declstmt -> class ID inherit { declstatements · }, --
declstmt -> class ID inherit { declstatements · }, break
declstmt -> class ID inherit { declstatements · }, return
declstmt -> class ID inherit { declstatements · }, delete
declstmt -> class ID inherit { declstatements · }, while
declstmt -> class ID inherit { declstatements · }, for
declstmt -> class ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, double
declstatements -> declstatements · declstmt, char
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, const
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { declstatements · }, }
declstmt -> class ID inherit { declstatements · }, &&
declstmt -> class ID inherit { declstatements · }, ||
declstmt -> class ID inherit { declstatements · }, +
declstmt -> class ID inherit { declstatements · }, -
declstmt -> class ID inherit { declstatements · }, *
declstmt -> class ID inherit { declstatements · }, /
declstmt -> class ID inherit { declstatements · }, %
declstmt -> class ID inherit { declstatements · }, !
declstmt -> class ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
208
I_704
***Set***
declstatements -> declstmt ·, }
declstatements -> declstmt ·, ID
declstatements -> declstmt ·, void
declstatements -> declstmt ·, bool
declstatements -> declstmt ·, int
declstatements -> declstmt ·, float
declstatements -> declstmt ·, double
declstatements -> declstmt ·, char
declstatements -> declstmt ·, string
declstatements -> declstmt ·, const
declstatements -> declstmt ·, extern
declstatements -> declstmt ·, class
***EndSet***
***EndState***
***State***
209
I_711_799_1116_1166_1199_1206_1262_1269_1397_1404_1417
***Set***
cast -> ( type ) factor ·, ;
cast -> ( type ) factor ·, &&
cast -> ( type ) factor ·, ||
cast -> ( type ) factor ·, >
cast -> ( type ) factor ·, <
cast -> ( type ) factor ·, >=
cast -> ( type ) factor ·, <=
cast -> ( type ) factor ·, ==
cast -> ( type ) factor ·, !=
cast -> ( type ) factor ·, +
cast -> ( type ) factor ·, -
cast -> ( type ) factor ·, *
cast -> ( type ) factor ·, /
cast -> ( type ) factor ·, %
cast -> ( type ) factor ·, )
cast -> ( type ) factor ·, ,
cast -> ( type ) factor ·, ]
***EndSet***
***EndState***
***State***
210
I_765_1092_1215_1448_1498_1510
***Set***
stmt -> while ( expr ) stmt ·, $
stmt -> while ( expr ) stmt ·, namespace
stmt -> while ( expr ) stmt ·, {
stmt -> while ( expr ) stmt ·, ID
stmt -> while ( expr ) stmt ·, void
stmt -> while ( expr ) stmt ·, bool
stmt -> while ( expr ) stmt ·, int
stmt -> while ( expr ) stmt ·, float
stmt -> while ( expr ) stmt ·, double
stmt -> while ( expr ) stmt ·, char
stmt -> while ( expr ) stmt ·, string
stmt -> while ( expr ) stmt ·, const
stmt -> while ( expr ) stmt ·, extern
stmt -> while ( expr ) stmt ·, class
stmt -> while ( expr ) stmt ·, (
stmt -> while ( expr ) stmt ·, this
stmt -> while ( expr ) stmt ·, new
stmt -> while ( expr ) stmt ·, LITBOOL
stmt -> while ( expr ) stmt ·, LITINT
stmt -> while ( expr ) stmt ·, LITFLOAT
stmt -> while ( expr ) stmt ·, LITDOUBLE
stmt -> while ( expr ) stmt ·, LITCHAR
stmt -> while ( expr ) stmt ·, LITSTRING
stmt -> while ( expr ) stmt ·, null
stmt -> while ( expr ) stmt ·, ++
stmt -> while ( expr ) stmt ·, --
stmt -> while ( expr ) stmt ·, break
stmt -> while ( expr ) stmt ·, return
stmt -> while ( expr ) stmt ·, delete
stmt -> while ( expr ) stmt ·, while
stmt -> while ( expr ) stmt ·, for
stmt -> while ( expr ) stmt ·, if
stmt -> while ( expr ) stmt ·, }
stmt -> while ( expr ) stmt ·, &&
stmt -> while ( expr ) stmt ·, ||
stmt -> while ( expr ) stmt ·, +
stmt -> while ( expr ) stmt ·, -
stmt -> while ( expr ) stmt ·, *
stmt -> while ( expr ) stmt ·, /
stmt -> while ( expr ) stmt ·, %
stmt -> while ( expr ) stmt ·, !
stmt -> while ( expr ) stmt ·, else
***EndSet***
***EndState***
***State***
211
I_776_1093_1216_1449_1499_1511
***Set***
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, $
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, {
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, void
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, int
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, float
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, double
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, char
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, string
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, const
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, class
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, (
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, this
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, new
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, null
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, --
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, break
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, return
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, while
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, for
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, if
stmtexpr -> · assign, )
stmtexpr -> · call, )
stmtexpr -> · incdec, )
stmtexpr -> · newobj, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
newobj -> · new ID ( ), )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, }
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, +
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, -
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, *
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, /
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, %
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, !
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
212
I_792_1107_1230_1450_1500_1512
***Set***
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
213
I_942
***Set***
args -> args , expr ·, )
args -> args , expr ·, ,
***EndSet***
***EndState***
***State***
214
I_957
***Set***
params -> type ID ·, )
params -> type ID ·, ,
***EndSet***
***EndState***
***State***
215
I_958
***Set***
params -> params , · type ID, )
params -> params , · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
216
I_959_1111_1243_1413_1452_1502_1514
***Set***
declstmt -> type ID ( params ) · { statements }, $
declstmt -> type ID ( params ) · { statements }, namespace
declstmt -> type ID ( params ) · { statements }, {
declstmt -> type ID ( params ) · { statements }, ID
declstmt -> type ID ( params ) · { statements }, void
declstmt -> type ID ( params ) · { statements }, bool
declstmt -> type ID ( params ) · { statements }, int
declstmt -> type ID ( params ) · { statements }, float
declstmt -> type ID ( params ) · { statements }, double
declstmt -> type ID ( params ) · { statements }, char
declstmt -> type ID ( params ) · { statements }, string
declstmt -> type ID ( params ) · { statements }, const
declstmt -> type ID ( params ) · { statements }, extern
declstmt -> type ID ( params ) · { statements }, class
declstmt -> type ID ( params ) · { statements }, (
declstmt -> type ID ( params ) · { statements }, this
declstmt -> type ID ( params ) · { statements }, new
declstmt -> type ID ( params ) · { statements }, LITBOOL
declstmt -> type ID ( params ) · { statements }, LITINT
declstmt -> type ID ( params ) · { statements }, LITFLOAT
declstmt -> type ID ( params ) · { statements }, LITDOUBLE
declstmt -> type ID ( params ) · { statements }, LITCHAR
declstmt -> type ID ( params ) · { statements }, LITSTRING
declstmt -> type ID ( params ) · { statements }, null
declstmt -> type ID ( params ) · { statements }, ++
declstmt -> type ID ( params ) · { statements }, --
declstmt -> type ID ( params ) · { statements }, break
declstmt -> type ID ( params ) · { statements }, return
declstmt -> type ID ( params ) · { statements }, delete
declstmt -> type ID ( params ) · { statements }, while
declstmt -> type ID ( params ) · { statements }, for
declstmt -> type ID ( params ) · { statements }, if
declstmt -> type ID ( params ) · { statements }, }
declstmt -> type ID ( params ) · { statements }, &&
declstmt -> type ID ( params ) · { statements }, ||
declstmt -> type ID ( params ) · { statements }, +
declstmt -> type ID ( params ) · { statements }, -
declstmt -> type ID ( params ) · { statements }, *
declstmt -> type ID ( params ) · { statements }, /
declstmt -> type ID ( params ) · { statements }, %
declstmt -> type ID ( params ) · { statements }, !
declstmt -> type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
217
I_960_1112_1244_1414_1453_1503_1515
***Set***
declstmt -> type ID = expr ; ·, $
declstmt -> type ID = expr ; ·, namespace
declstmt -> type ID = expr ; ·, {
declstmt -> type ID = expr ; ·, ID
declstmt -> type ID = expr ; ·, void
declstmt -> type ID = expr ; ·, bool
declstmt -> type ID = expr ; ·, int
declstmt -> type ID = expr ; ·, float
declstmt -> type ID = expr ; ·, double
declstmt -> type ID = expr ; ·, char
declstmt -> type ID = expr ; ·, string
declstmt -> type ID = expr ; ·, const
declstmt -> type ID = expr ; ·, extern
declstmt -> type ID = expr ; ·, class
declstmt -> type ID = expr ; ·, (
declstmt -> type ID = expr ; ·, this
declstmt -> type ID = expr ; ·, new
declstmt -> type ID = expr ; ·, LITBOOL
declstmt -> type ID = expr ; ·, LITINT
declstmt -> type ID = expr ; ·, LITFLOAT
declstmt -> type ID = expr ; ·, LITDOUBLE
declstmt -> type ID = expr ; ·, LITCHAR
declstmt -> type ID = expr ; ·, LITSTRING
declstmt -> type ID = expr ; ·, null
declstmt -> type ID = expr ; ·, ++
declstmt -> type ID = expr ; ·, --
declstmt -> type ID = expr ; ·, break
declstmt -> type ID = expr ; ·, return
declstmt -> type ID = expr ; ·, delete
declstmt -> type ID = expr ; ·, while
declstmt -> type ID = expr ; ·, for
declstmt -> type ID = expr ; ·, if
declstmt -> type ID = expr ; ·, }
declstmt -> type ID = expr ; ·, &&
declstmt -> type ID = expr ; ·, ||
declstmt -> type ID = expr ; ·, +
declstmt -> type ID = expr ; ·, -
declstmt -> type ID = expr ; ·, *
declstmt -> type ID = expr ; ·, /
declstmt -> type ID = expr ; ·, %
declstmt -> type ID = expr ; ·, !
declstmt -> type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
218
I_961_1274_1339_1469_1487_1522_1530
***Set***
declstmt -> extern type ID ( params ) · ;, $
declstmt -> extern type ID ( params ) · ;, namespace
declstmt -> extern type ID ( params ) · ;, {
declstmt -> extern type ID ( params ) · ;, ID
declstmt -> extern type ID ( params ) · ;, void
declstmt -> extern type ID ( params ) · ;, bool
declstmt -> extern type ID ( params ) · ;, int
declstmt -> extern type ID ( params ) · ;, float
declstmt -> extern type ID ( params ) · ;, double
declstmt -> extern type ID ( params ) · ;, char
declstmt -> extern type ID ( params ) · ;, string
declstmt -> extern type ID ( params ) · ;, const
declstmt -> extern type ID ( params ) · ;, extern
declstmt -> extern type ID ( params ) · ;, class
declstmt -> extern type ID ( params ) · ;, (
declstmt -> extern type ID ( params ) · ;, this
declstmt -> extern type ID ( params ) · ;, new
declstmt -> extern type ID ( params ) · ;, LITBOOL
declstmt -> extern type ID ( params ) · ;, LITINT
declstmt -> extern type ID ( params ) · ;, LITFLOAT
declstmt -> extern type ID ( params ) · ;, LITDOUBLE
declstmt -> extern type ID ( params ) · ;, LITCHAR
declstmt -> extern type ID ( params ) · ;, LITSTRING
declstmt -> extern type ID ( params ) · ;, null
declstmt -> extern type ID ( params ) · ;, ++
declstmt -> extern type ID ( params ) · ;, --
declstmt -> extern type ID ( params ) · ;, break
declstmt -> extern type ID ( params ) · ;, return
declstmt -> extern type ID ( params ) · ;, delete
declstmt -> extern type ID ( params ) · ;, while
declstmt -> extern type ID ( params ) · ;, for
declstmt -> extern type ID ( params ) · ;, if
declstmt -> extern type ID ( params ) · ;, }
declstmt -> extern type ID ( params ) · ;, &&
declstmt -> extern type ID ( params ) · ;, ||
declstmt -> extern type ID ( params ) · ;, +
declstmt -> extern type ID ( params ) · ;, -
declstmt -> extern type ID ( params ) · ;, *
declstmt -> extern type ID ( params ) · ;, /
declstmt -> extern type ID ( params ) · ;, %
declstmt -> extern type ID ( params ) · ;, !
declstmt -> extern type ID ( params ) · ;, else
***EndSet***
***EndState***
***State***
219
I_962_1275_1340_1470_1488_1523_1531
***Set***
declstmt -> const type ID = lit ; ·, $
declstmt -> const type ID = lit ; ·, namespace
declstmt -> const type ID = lit ; ·, {
declstmt -> const type ID = lit ; ·, ID
declstmt -> const type ID = lit ; ·, void
declstmt -> const type ID = lit ; ·, bool
declstmt -> const type ID = lit ; ·, int
declstmt -> const type ID = lit ; ·, float
declstmt -> const type ID = lit ; ·, double
declstmt -> const type ID = lit ; ·, char
declstmt -> const type ID = lit ; ·, string
declstmt -> const type ID = lit ; ·, const
declstmt -> const type ID = lit ; ·, extern
declstmt -> const type ID = lit ; ·, class
declstmt -> const type ID = lit ; ·, (
declstmt -> const type ID = lit ; ·, this
declstmt -> const type ID = lit ; ·, new
declstmt -> const type ID = lit ; ·, LITBOOL
declstmt -> const type ID = lit ; ·, LITINT
declstmt -> const type ID = lit ; ·, LITFLOAT
declstmt -> const type ID = lit ; ·, LITDOUBLE
declstmt -> const type ID = lit ; ·, LITCHAR
declstmt -> const type ID = lit ; ·, LITSTRING
declstmt -> const type ID = lit ; ·, null
declstmt -> const type ID = lit ; ·, ++
declstmt -> const type ID = lit ; ·, --
declstmt -> const type ID = lit ; ·, break
declstmt -> const type ID = lit ; ·, return
declstmt -> const type ID = lit ; ·, delete
declstmt -> const type ID = lit ; ·, while
declstmt -> const type ID = lit ; ·, for
declstmt -> const type ID = lit ; ·, if
declstmt -> const type ID = lit ; ·, }
declstmt -> const type ID = lit ; ·, &&
declstmt -> const type ID = lit ; ·, ||
declstmt -> const type ID = lit ; ·, +
declstmt -> const type ID = lit ; ·, -
declstmt -> const type ID = lit ; ·, *
declstmt -> const type ID = lit ; ·, /
declstmt -> const type ID = lit ; ·, %
declstmt -> const type ID = lit ; ·, !
declstmt -> const type ID = lit ; ·, else
***EndSet***
***EndState***
***State***
220
I_966_1276_1341_1471_1489_1524_1532
***Set***
declstmt -> class ID inherit { declstatements } ·, $
declstmt -> class ID inherit { declstatements } ·, namespace
declstmt -> class ID inherit { declstatements } ·, {
declstmt -> class ID inherit { declstatements } ·, ID
declstmt -> class ID inherit { declstatements } ·, void
declstmt -> class ID inherit { declstatements } ·, bool
declstmt -> class ID inherit { declstatements } ·, int
declstmt -> class ID inherit { declstatements } ·, float
declstmt -> class ID inherit { declstatements } ·, double
declstmt -> class ID inherit { declstatements } ·, char
declstmt -> class ID inherit { declstatements } ·, string
declstmt -> class ID inherit { declstatements } ·, const
declstmt -> class ID inherit { declstatements } ·, extern
declstmt -> class ID inherit { declstatements } ·, class
declstmt -> class ID inherit { declstatements } ·, (
declstmt -> class ID inherit { declstatements } ·, this
declstmt -> class ID inherit { declstatements } ·, new
declstmt -> class ID inherit { declstatements } ·, LITBOOL
declstmt -> class ID inherit { declstatements } ·, LITINT
declstmt -> class ID inherit { declstatements } ·, LITFLOAT
declstmt -> class ID inherit { declstatements } ·, LITDOUBLE
declstmt -> class ID inherit { declstatements } ·, LITCHAR
declstmt -> class ID inherit { declstatements } ·, LITSTRING
declstmt -> class ID inherit { declstatements } ·, null
declstmt -> class ID inherit { declstatements } ·, ++
declstmt -> class ID inherit { declstatements } ·, --
declstmt -> class ID inherit { declstatements } ·, break
declstmt -> class ID inherit { declstatements } ·, return
declstmt -> class ID inherit { declstatements } ·, delete
declstmt -> class ID inherit { declstatements } ·, while
declstmt -> class ID inherit { declstatements } ·, for
declstmt -> class ID inherit { declstatements } ·, if
declstmt -> class ID inherit { declstatements } ·, }
declstmt -> class ID inherit { declstatements } ·, &&
declstmt -> class ID inherit { declstatements } ·, ||
declstmt -> class ID inherit { declstatements } ·, +
declstmt -> class ID inherit { declstatements } ·, -
declstmt -> class ID inherit { declstatements } ·, *
declstmt -> class ID inherit { declstatements } ·, /
declstmt -> class ID inherit { declstatements } ·, %
declstmt -> class ID inherit { declstatements } ·, !
declstmt -> class ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
221
I_967
***Set***
declstatements -> declstatements declstmt ·, }
declstatements -> declstatements declstmt ·, ID
declstatements -> declstatements declstmt ·, void
declstatements -> declstatements declstmt ·, bool
declstatements -> declstatements declstmt ·, int
declstatements -> declstatements declstmt ·, float
declstatements -> declstatements declstmt ·, double
declstatements -> declstatements declstmt ·, char
declstatements -> declstatements declstmt ·, string
declstatements -> declstatements declstmt ·, const
declstatements -> declstatements declstmt ·, extern
declstatements -> declstatements declstmt ·, class
***EndSet***
***EndState***
***State***
222
I_1038_1277_1342_1490_1525_1533
***Set***
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, $
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, {
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, void
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, int
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, float
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, double
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, char
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, string
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, const
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, class
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, (
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, this
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, new
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, null
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, --
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, break
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, return
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, while
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, for
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, if
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, }
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, +
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, -
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, *
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, /
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, %
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, !
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, else
***EndSet***
***EndState***
***State***
223
I_1059_1290_1355_1491_1526_1534
***Set***
stmt -> if ( expr ) stmt elifclauselist · elseclause, $
stmt -> if ( expr ) stmt elifclauselist · elseclause, namespace
stmt -> if ( expr ) stmt elifclauselist · elseclause, {
stmt -> if ( expr ) stmt elifclauselist · elseclause, ID
stmt -> if ( expr ) stmt elifclauselist · elseclause, void
stmt -> if ( expr ) stmt elifclauselist · elseclause, bool
stmt -> if ( expr ) stmt elifclauselist · elseclause, int
stmt -> if ( expr ) stmt elifclauselist · elseclause, float
stmt -> if ( expr ) stmt elifclauselist · elseclause, double
stmt -> if ( expr ) stmt elifclauselist · elseclause, char
stmt -> if ( expr ) stmt elifclauselist · elseclause, string
stmt -> if ( expr ) stmt elifclauselist · elseclause, const
stmt -> if ( expr ) stmt elifclauselist · elseclause, extern
stmt -> if ( expr ) stmt elifclauselist · elseclause, class
stmt -> if ( expr ) stmt elifclauselist · elseclause, (
stmt -> if ( expr ) stmt elifclauselist · elseclause, this
stmt -> if ( expr ) stmt elifclauselist · elseclause, new
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITBOOL
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITINT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITCHAR
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITSTRING
stmt -> if ( expr ) stmt elifclauselist · elseclause, null
stmt -> if ( expr ) stmt elifclauselist · elseclause, ++
stmt -> if ( expr ) stmt elifclauselist · elseclause, --
stmt -> if ( expr ) stmt elifclauselist · elseclause, break
stmt -> if ( expr ) stmt elifclauselist · elseclause, return
stmt -> if ( expr ) stmt elifclauselist · elseclause, delete
stmt -> if ( expr ) stmt elifclauselist · elseclause, while
stmt -> if ( expr ) stmt elifclauselist · elseclause, for
stmt -> if ( expr ) stmt elifclauselist · elseclause, if
elifclauselist -> elifclauselist · elifclause, else
elifclauselist -> elifclauselist · elifclause, $
elifclauselist -> elifclauselist · elifclause, namespace
elifclauselist -> elifclauselist · elifclause, {
elifclauselist -> elifclauselist · elifclause, ID
elifclauselist -> elifclauselist · elifclause, void
elifclauselist -> elifclauselist · elifclause, bool
elifclauselist -> elifclauselist · elifclause, int
elifclauselist -> elifclauselist · elifclause, float
elifclauselist -> elifclauselist · elifclause, double
elifclauselist -> elifclauselist · elifclause, char
elifclauselist -> elifclauselist · elifclause, string
elifclauselist -> elifclauselist · elifclause, const
elifclauselist -> elifclauselist · elifclause, extern
elifclauselist -> elifclauselist · elifclause, class
elifclauselist -> elifclauselist · elifclause, (
elifclauselist -> elifclauselist · elifclause, this
elifclauselist -> elifclauselist · elifclause, new
elifclauselist -> elifclauselist · elifclause, LITBOOL
elifclauselist -> elifclauselist · elifclause, LITINT
elifclauselist -> elifclauselist · elifclause, LITFLOAT
elifclauselist -> elifclauselist · elifclause, LITDOUBLE
elifclauselist -> elifclauselist · elifclause, LITCHAR
elifclauselist -> elifclauselist · elifclause, LITSTRING
elifclauselist -> elifclauselist · elifclause, null
elifclauselist -> elifclauselist · elifclause, ++
elifclauselist -> elifclauselist · elifclause, --
elifclauselist -> elifclauselist · elifclause, break
elifclauselist -> elifclauselist · elifclause, return
elifclauselist -> elifclauselist · elifclause, delete
elifclauselist -> elifclauselist · elifclause, while
elifclauselist -> elifclauselist · elifclause, for
elifclauselist -> elifclauselist · elifclause, if
elseclause -> ·, $
elseclause -> · else stmt, $
elseclause -> ·, namespace
elseclause -> · else stmt, namespace
elseclause -> ·, {
elseclause -> · else stmt, {
elseclause -> ·, ID
elseclause -> · else stmt, ID
elseclause -> ·, void
elseclause -> · else stmt, void
elseclause -> ·, bool
elseclause -> · else stmt, bool
elseclause -> ·, int
elseclause -> · else stmt, int
elseclause -> ·, float
elseclause -> · else stmt, float
elseclause -> ·, double
elseclause -> · else stmt, double
elseclause -> ·, char
elseclause -> · else stmt, char
elseclause -> ·, string
elseclause -> · else stmt, string
elseclause -> ·, const
elseclause -> · else stmt, const
elseclause -> ·, extern
elseclause -> · else stmt, extern
elseclause -> ·, class
elseclause -> · else stmt, class
elseclause -> ·, (
elseclause -> · else stmt, (
elseclause -> ·, this
elseclause -> · else stmt, this
elseclause -> ·, new
elseclause -> · else stmt, new
elseclause -> ·, LITBOOL
elseclause -> · else stmt, LITBOOL
elseclause -> ·, LITINT
elseclause -> · else stmt, LITINT
elseclause -> ·, LITFLOAT
elseclause -> · else stmt, LITFLOAT
elseclause -> ·, LITDOUBLE
elseclause -> · else stmt, LITDOUBLE
elseclause -> ·, LITCHAR
elseclause -> · else stmt, LITCHAR
elseclause -> ·, LITSTRING
elseclause -> · else stmt, LITSTRING
elseclause -> ·, null
elseclause -> · else stmt, null
elseclause -> ·, ++
elseclause -> · else stmt, ++
elseclause -> ·, --
elseclause -> · else stmt, --
elseclause -> ·, break
elseclause -> · else stmt, break
elseclause -> ·, return
elseclause -> · else stmt, return
elseclause -> ·, delete
elseclause -> · else stmt, delete
elseclause -> ·, while
elseclause -> · else stmt, while
elseclause -> ·, for
elseclause -> · else stmt, for
elseclause -> ·, if
elseclause -> · else stmt, if
elifclause -> · else if ( expr ) stmt, else
elifclause -> · else if ( expr ) stmt, $
elifclause -> · else if ( expr ) stmt, namespace
elifclause -> · else if ( expr ) stmt, {
elifclause -> · else if ( expr ) stmt, ID
elifclause -> · else if ( expr ) stmt, void
elifclause -> · else if ( expr ) stmt, bool
elifclause -> · else if ( expr ) stmt, int
elifclause -> · else if ( expr ) stmt, float
elifclause -> · else if ( expr ) stmt, double
elifclause -> · else if ( expr ) stmt, char
elifclause -> · else if ( expr ) stmt, string
elifclause -> · else if ( expr ) stmt, const
elifclause -> · else if ( expr ) stmt, extern
elifclause -> · else if ( expr ) stmt, class
elifclause -> · else if ( expr ) stmt, (
elifclause -> · else if ( expr ) stmt, this
elifclause -> · else if ( expr ) stmt, new
elifclause -> · else if ( expr ) stmt, LITBOOL
elifclause -> · else if ( expr ) stmt, LITINT
elifclause -> · else if ( expr ) stmt, LITFLOAT
elifclause -> · else if ( expr ) stmt, LITDOUBLE
elifclause -> · else if ( expr ) stmt, LITCHAR
elifclause -> · else if ( expr ) stmt, LITSTRING
elifclause -> · else if ( expr ) stmt, null
elifclause -> · else if ( expr ) stmt, ++
elifclause -> · else if ( expr ) stmt, --
elifclause -> · else if ( expr ) stmt, break
elifclause -> · else if ( expr ) stmt, return
elifclause -> · else if ( expr ) stmt, delete
elifclause -> · else if ( expr ) stmt, while
elifclause -> · else if ( expr ) stmt, for
elifclause -> · else if ( expr ) stmt, if
stmt -> if ( expr ) stmt elifclauselist · elseclause, }
elifclauselist -> elifclauselist · elifclause, }
elseclause -> ·, }
elseclause -> · else stmt, }
elifclause -> · else if ( expr ) stmt, }
stmt -> if ( expr ) stmt elifclauselist · elseclause, &&
stmt -> if ( expr ) stmt elifclauselist · elseclause, ||
stmt -> if ( expr ) stmt elifclauselist · elseclause, +
stmt -> if ( expr ) stmt elifclauselist · elseclause, -
stmt -> if ( expr ) stmt elifclauselist · elseclause, *
stmt -> if ( expr ) stmt elifclauselist · elseclause, /
stmt -> if ( expr ) stmt elifclauselist · elseclause, %
stmt -> if ( expr ) stmt elifclauselist · elseclause, !
elifclauselist -> elifclauselist · elifclause, &&
elifclauselist -> elifclauselist · elifclause, ||
elifclauselist -> elifclauselist · elifclause, +
elifclauselist -> elifclauselist · elifclause, -
elifclauselist -> elifclauselist · elifclause, *
elifclauselist -> elifclauselist · elifclause, /
elifclauselist -> elifclauselist · elifclause, %
elifclauselist -> elifclauselist · elifclause, !
elseclause -> ·, &&
elseclause -> · else stmt, &&
elseclause -> ·, ||
elseclause -> · else stmt, ||
elseclause -> ·, +
elseclause -> · else stmt, +
elseclause -> ·, -
elseclause -> · else stmt, -
elseclause -> ·, *
elseclause -> · else stmt, *
elseclause -> ·, /
elseclause -> · else stmt, /
elseclause -> ·, %
elseclause -> · else stmt, %
elseclause -> ·, !
elseclause -> · else stmt, !
elifclause -> · else if ( expr ) stmt, &&
elifclause -> · else if ( expr ) stmt, ||
elifclause -> · else if ( expr ) stmt, +
elifclause -> · else if ( expr ) stmt, -
elifclause -> · else if ( expr ) stmt, *
elifclause -> · else if ( expr ) stmt, /
elifclause -> · else if ( expr ) stmt, %
elifclause -> · else if ( expr ) stmt, !
stmt -> if ( expr ) stmt elifclauselist · elseclause, else
elseclause -> ·, else
elseclause -> · else stmt, else
***EndSet***
***EndState***
***State***
224
I_1171_1321
***Set***
params -> params , type · ID, )
params -> params , type · ID, ,
params -> params , type ID ·, )
params -> params , type ID ·, ,
***EndSet***
***EndState***
***State***
225
I_1172_1293_1363_1472_1493_1528_1536
***Set***
declstmt -> type ID ( params ) { · statements }, $
declstmt -> type ID ( params ) { · statements }, namespace
declstmt -> type ID ( params ) { · statements }, {
declstmt -> type ID ( params ) { · statements }, ID
declstmt -> type ID ( params ) { · statements }, void
declstmt -> type ID ( params ) { · statements }, bool
declstmt -> type ID ( params ) { · statements }, int
declstmt -> type ID ( params ) { · statements }, float
declstmt -> type ID ( params ) { · statements }, double
declstmt -> type ID ( params ) { · statements }, char
declstmt -> type ID ( params ) { · statements }, string
declstmt -> type ID ( params ) { · statements }, const
declstmt -> type ID ( params ) { · statements }, extern
declstmt -> type ID ( params ) { · statements }, class
declstmt -> type ID ( params ) { · statements }, (
declstmt -> type ID ( params ) { · statements }, this
declstmt -> type ID ( params ) { · statements }, new
declstmt -> type ID ( params ) { · statements }, LITBOOL
declstmt -> type ID ( params ) { · statements }, LITINT
declstmt -> type ID ( params ) { · statements }, LITFLOAT
declstmt -> type ID ( params ) { · statements }, LITDOUBLE
declstmt -> type ID ( params ) { · statements }, LITCHAR
declstmt -> type ID ( params ) { · statements }, LITSTRING
declstmt -> type ID ( params ) { · statements }, null
declstmt -> type ID ( params ) { · statements }, ++
declstmt -> type ID ( params ) { · statements }, --
declstmt -> type ID ( params ) { · statements }, break
declstmt -> type ID ( params ) { · statements }, return
declstmt -> type ID ( params ) { · statements }, delete
declstmt -> type ID ( params ) { · statements }, while
declstmt -> type ID ( params ) { · statements }, for
declstmt -> type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, const
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, const
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, const
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { · statements }, }
declstmt -> type ID ( params ) { · statements }, &&
declstmt -> type ID ( params ) { · statements }, ||
declstmt -> type ID ( params ) { · statements }, +
declstmt -> type ID ( params ) { · statements }, -
declstmt -> type ID ( params ) { · statements }, *
declstmt -> type ID ( params ) { · statements }, /
declstmt -> type ID ( params ) { · statements }, %
declstmt -> type ID ( params ) { · statements }, !
declstmt -> type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
226
I_1173_1377_1422_1504_1516_1542_1548
***Set***
declstmt -> extern type ID ( params ) ; ·, $
declstmt -> extern type ID ( params ) ; ·, namespace
declstmt -> extern type ID ( params ) ; ·, {
declstmt -> extern type ID ( params ) ; ·, ID
declstmt -> extern type ID ( params ) ; ·, void
declstmt -> extern type ID ( params ) ; ·, bool
declstmt -> extern type ID ( params ) ; ·, int
declstmt -> extern type ID ( params ) ; ·, float
declstmt -> extern type ID ( params ) ; ·, double
declstmt -> extern type ID ( params ) ; ·, char
declstmt -> extern type ID ( params ) ; ·, string
declstmt -> extern type ID ( params ) ; ·, const
declstmt -> extern type ID ( params ) ; ·, extern
declstmt -> extern type ID ( params ) ; ·, class
declstmt -> extern type ID ( params ) ; ·, (
declstmt -> extern type ID ( params ) ; ·, this
declstmt -> extern type ID ( params ) ; ·, new
declstmt -> extern type ID ( params ) ; ·, LITBOOL
declstmt -> extern type ID ( params ) ; ·, LITINT
declstmt -> extern type ID ( params ) ; ·, LITFLOAT
declstmt -> extern type ID ( params ) ; ·, LITDOUBLE
declstmt -> extern type ID ( params ) ; ·, LITCHAR
declstmt -> extern type ID ( params ) ; ·, LITSTRING
declstmt -> extern type ID ( params ) ; ·, null
declstmt -> extern type ID ( params ) ; ·, ++
declstmt -> extern type ID ( params ) ; ·, --
declstmt -> extern type ID ( params ) ; ·, break
declstmt -> extern type ID ( params ) ; ·, return
declstmt -> extern type ID ( params ) ; ·, delete
declstmt -> extern type ID ( params ) ; ·, while
declstmt -> extern type ID ( params ) ; ·, for
declstmt -> extern type ID ( params ) ; ·, if
declstmt -> extern type ID ( params ) ; ·, }
declstmt -> extern type ID ( params ) ; ·, &&
declstmt -> extern type ID ( params ) ; ·, ||
declstmt -> extern type ID ( params ) ; ·, +
declstmt -> extern type ID ( params ) ; ·, -
declstmt -> extern type ID ( params ) ; ·, *
declstmt -> extern type ID ( params ) ; ·, /
declstmt -> extern type ID ( params ) ; ·, %
declstmt -> extern type ID ( params ) ; ·, !
declstmt -> extern type ID ( params ) ; ·, else
***EndSet***
***EndState***
***State***
227
I_1241_1378_1423_1517_1543_1549
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, $
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, {
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, void
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, int
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, float
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, double
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, char
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, string
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, const
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, class
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, (
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, this
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, new
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, null
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, --
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, break
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, return
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, while
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, for
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, +
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, -
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, *
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, /
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, %
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
228
I_1255_1389_1434_1518_1544_1550
***Set***
elseclause -> else · stmt, $
elseclause -> else · stmt, namespace
elseclause -> else · stmt, {
elseclause -> else · stmt, ID
elseclause -> else · stmt, void
elseclause -> else · stmt, bool
elseclause -> else · stmt, int
elseclause -> else · stmt, float
elseclause -> else · stmt, double
elseclause -> else · stmt, char
elseclause -> else · stmt, string
elseclause -> else · stmt, const
elseclause -> else · stmt, extern
elseclause -> else · stmt, class
elseclause -> else · stmt, (
elseclause -> else · stmt, this
elseclause -> else · stmt, new
elseclause -> else · stmt, LITBOOL
elseclause -> else · stmt, LITINT
elseclause -> else · stmt, LITFLOAT
elseclause -> else · stmt, LITDOUBLE
elseclause -> else · stmt, LITCHAR
elseclause -> else · stmt, LITSTRING
elseclause -> else · stmt, null
elseclause -> else · stmt, ++
elseclause -> else · stmt, --
elseclause -> else · stmt, break
elseclause -> else · stmt, return
elseclause -> else · stmt, delete
elseclause -> else · stmt, while
elseclause -> else · stmt, for
elseclause -> else · stmt, if
elifclause -> else · if ( expr ) stmt, else
elifclause -> else · if ( expr ) stmt, $
elifclause -> else · if ( expr ) stmt, namespace
elifclause -> else · if ( expr ) stmt, {
elifclause -> else · if ( expr ) stmt, ID
elifclause -> else · if ( expr ) stmt, void
elifclause -> else · if ( expr ) stmt, bool
elifclause -> else · if ( expr ) stmt, int
elifclause -> else · if ( expr ) stmt, float
elifclause -> else · if ( expr ) stmt, double
elifclause -> else · if ( expr ) stmt, char
elifclause -> else · if ( expr ) stmt, string
elifclause -> else · if ( expr ) stmt, const
elifclause -> else · if ( expr ) stmt, extern
elifclause -> else · if ( expr ) stmt, class
elifclause -> else · if ( expr ) stmt, (
elifclause -> else · if ( expr ) stmt, this
elifclause -> else · if ( expr ) stmt, new
elifclause -> else · if ( expr ) stmt, LITBOOL
elifclause -> else · if ( expr ) stmt, LITINT
elifclause -> else · if ( expr ) stmt, LITFLOAT
elifclause -> else · if ( expr ) stmt, LITDOUBLE
elifclause -> else · if ( expr ) stmt, LITCHAR
elifclause -> else · if ( expr ) stmt, LITSTRING
elifclause -> else · if ( expr ) stmt, null
elifclause -> else · if ( expr ) stmt, ++
elifclause -> else · if ( expr ) stmt, --
elifclause -> else · if ( expr ) stmt, break
elifclause -> else · if ( expr ) stmt, return
elifclause -> else · if ( expr ) stmt, delete
elifclause -> else · if ( expr ) stmt, while
elifclause -> else · if ( expr ) stmt, for
elifclause -> else · if ( expr ) stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elseclause -> else · stmt, }
elifclause -> else · if ( expr ) stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elseclause -> else · stmt, &&
elseclause -> else · stmt, ||
elseclause -> else · stmt, +
elseclause -> else · stmt, -
elseclause -> else · stmt, *
elseclause -> else · stmt, /
elseclause -> else · stmt, %
elseclause -> else · stmt, !
elifclause -> else · if ( expr ) stmt, &&
elifclause -> else · if ( expr ) stmt, ||
elifclause -> else · if ( expr ) stmt, +
elifclause -> else · if ( expr ) stmt, -
elifclause -> else · if ( expr ) stmt, *
elifclause -> else · if ( expr ) stmt, /
elifclause -> else · if ( expr ) stmt, %
elifclause -> else · if ( expr ) stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
elseclause -> else · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
229
I_1256_1390_1435
***Set***
elifclauselist -> elifclauselist elifclause ·, else
elifclauselist -> elifclauselist elifclause ·, $
elifclauselist -> elifclauselist elifclause ·, namespace
elifclauselist -> elifclauselist elifclause ·, {
elifclauselist -> elifclauselist elifclause ·, ID
elifclauselist -> elifclauselist elifclause ·, void
elifclauselist -> elifclauselist elifclause ·, bool
elifclauselist -> elifclauselist elifclause ·, int
elifclauselist -> elifclauselist elifclause ·, float
elifclauselist -> elifclauselist elifclause ·, double
elifclauselist -> elifclauselist elifclause ·, char
elifclauselist -> elifclauselist elifclause ·, string
elifclauselist -> elifclauselist elifclause ·, const
elifclauselist -> elifclauselist elifclause ·, extern
elifclauselist -> elifclauselist elifclause ·, class
elifclauselist -> elifclauselist elifclause ·, (
elifclauselist -> elifclauselist elifclause ·, this
elifclauselist -> elifclauselist elifclause ·, new
elifclauselist -> elifclauselist elifclause ·, LITBOOL
elifclauselist -> elifclauselist elifclause ·, LITINT
elifclauselist -> elifclauselist elifclause ·, LITFLOAT
elifclauselist -> elifclauselist elifclause ·, LITDOUBLE
elifclauselist -> elifclauselist elifclause ·, LITCHAR
elifclauselist -> elifclauselist elifclause ·, LITSTRING
elifclauselist -> elifclauselist elifclause ·, null
elifclauselist -> elifclauselist elifclause ·, ++
elifclauselist -> elifclauselist elifclause ·, --
elifclauselist -> elifclauselist elifclause ·, break
elifclauselist -> elifclauselist elifclause ·, return
elifclauselist -> elifclauselist elifclause ·, delete
elifclauselist -> elifclauselist elifclause ·, while
elifclauselist -> elifclauselist elifclause ·, for
elifclauselist -> elifclauselist elifclause ·, if
elifclauselist -> elifclauselist elifclause ·, }
elifclauselist -> elifclauselist elifclause ·, &&
elifclauselist -> elifclauselist elifclause ·, ||
elifclauselist -> elifclauselist elifclause ·, +
elifclauselist -> elifclauselist elifclause ·, -
elifclauselist -> elifclauselist elifclause ·, *
elifclauselist -> elifclauselist elifclause ·, /
elifclauselist -> elifclauselist elifclause ·, %
elifclauselist -> elifclauselist elifclause ·, !
***EndSet***
***EndState***
***State***
230
I_1257_1391_1436_1519_1545_1551
***Set***
stmt -> if ( expr ) stmt elifclauselist elseclause ·, $
stmt -> if ( expr ) stmt elifclauselist elseclause ·, namespace
stmt -> if ( expr ) stmt elifclauselist elseclause ·, {
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ID
stmt -> if ( expr ) stmt elifclauselist elseclause ·, void
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bool
stmt -> if ( expr ) stmt elifclauselist elseclause ·, int
stmt -> if ( expr ) stmt elifclauselist elseclause ·, float
stmt -> if ( expr ) stmt elifclauselist elseclause ·, double
stmt -> if ( expr ) stmt elifclauselist elseclause ·, char
stmt -> if ( expr ) stmt elifclauselist elseclause ·, string
stmt -> if ( expr ) stmt elifclauselist elseclause ·, const
stmt -> if ( expr ) stmt elifclauselist elseclause ·, extern
stmt -> if ( expr ) stmt elifclauselist elseclause ·, class
stmt -> if ( expr ) stmt elifclauselist elseclause ·, (
stmt -> if ( expr ) stmt elifclauselist elseclause ·, this
stmt -> if ( expr ) stmt elifclauselist elseclause ·, new
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITBOOL
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITINT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITCHAR
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITSTRING
stmt -> if ( expr ) stmt elifclauselist elseclause ·, null
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ++
stmt -> if ( expr ) stmt elifclauselist elseclause ·, --
stmt -> if ( expr ) stmt elifclauselist elseclause ·, break
stmt -> if ( expr ) stmt elifclauselist elseclause ·, return
stmt -> if ( expr ) stmt elifclauselist elseclause ·, delete
stmt -> if ( expr ) stmt elifclauselist elseclause ·, while
stmt -> if ( expr ) stmt elifclauselist elseclause ·, for
stmt -> if ( expr ) stmt elifclauselist elseclause ·, if
stmt -> if ( expr ) stmt elifclauselist elseclause ·, }
stmt -> if ( expr ) stmt elifclauselist elseclause ·, &&
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ||
stmt -> if ( expr ) stmt elifclauselist elseclause ·, +
stmt -> if ( expr ) stmt elifclauselist elseclause ·, -
stmt -> if ( expr ) stmt elifclauselist elseclause ·, *
stmt -> if ( expr ) stmt elifclauselist elseclause ·, /
stmt -> if ( expr ) stmt elifclauselist elseclause ·, %
stmt -> if ( expr ) stmt elifclauselist elseclause ·, !
stmt -> if ( expr ) stmt elifclauselist elseclause ·, else
***EndSet***
***EndState***
***State***
231
I_1322_1394_1443_1505_1521_1547_1553
***Set***
declstmt -> type ID ( params ) { statements · }, $
declstmt -> type ID ( params ) { statements · }, namespace
declstmt -> type ID ( params ) { statements · }, {
declstmt -> type ID ( params ) { statements · }, ID
declstmt -> type ID ( params ) { statements · }, void
declstmt -> type ID ( params ) { statements · }, bool
declstmt -> type ID ( params ) { statements · }, int
declstmt -> type ID ( params ) { statements · }, float
declstmt -> type ID ( params ) { statements · }, double
declstmt -> type ID ( params ) { statements · }, char
declstmt -> type ID ( params ) { statements · }, string
declstmt -> type ID ( params ) { statements · }, const
declstmt -> type ID ( params ) { statements · }, extern
declstmt -> type ID ( params ) { statements · }, class
declstmt -> type ID ( params ) { statements · }, (
declstmt -> type ID ( params ) { statements · }, this
declstmt -> type ID ( params ) { statements · }, new
declstmt -> type ID ( params ) { statements · }, LITBOOL
declstmt -> type ID ( params ) { statements · }, LITINT
declstmt -> type ID ( params ) { statements · }, LITFLOAT
declstmt -> type ID ( params ) { statements · }, LITDOUBLE
declstmt -> type ID ( params ) { statements · }, LITCHAR
declstmt -> type ID ( params ) { statements · }, LITSTRING
declstmt -> type ID ( params ) { statements · }, null
declstmt -> type ID ( params ) { statements · }, ++
declstmt -> type ID ( params ) { statements · }, --
declstmt -> type ID ( params ) { statements · }, break
declstmt -> type ID ( params ) { statements · }, return
declstmt -> type ID ( params ) { statements · }, delete
declstmt -> type ID ( params ) { statements · }, while
declstmt -> type ID ( params ) { statements · }, for
declstmt -> type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, const
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { statements · }, }
declstmt -> type ID ( params ) { statements · }, &&
declstmt -> type ID ( params ) { statements · }, ||
declstmt -> type ID ( params ) { statements · }, +
declstmt -> type ID ( params ) { statements · }, -
declstmt -> type ID ( params ) { statements · }, *
declstmt -> type ID ( params ) { statements · }, /
declstmt -> type ID ( params ) { statements · }, %
declstmt -> type ID ( params ) { statements · }, !
declstmt -> type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
232
I_1361_1454_1474_1537_1555_1560
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, $
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, {
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ID
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, void
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bool
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, int
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, float
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, double
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, char
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, string
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, const
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, extern
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, class
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, (
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, this
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, new
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, null
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ++
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, --
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, break
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, return
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, delete
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, while
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, for
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, if
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, }
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, &&
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ||
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, +
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, -
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, *
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, /
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, %
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, !
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, else
***EndSet***
***EndState***
***State***
233
I_1371_1462_1482_1538_1556_1561
***Set***
elifclause -> else if · ( expr ) stmt, else
elifclause -> else if · ( expr ) stmt, $
elifclause -> else if · ( expr ) stmt, namespace
elifclause -> else if · ( expr ) stmt, {
elifclause -> else if · ( expr ) stmt, ID
elifclause -> else if · ( expr ) stmt, void
elifclause -> else if · ( expr ) stmt, bool
elifclause -> else if · ( expr ) stmt, int
elifclause -> else if · ( expr ) stmt, float
elifclause -> else if · ( expr ) stmt, double
elifclause -> else if · ( expr ) stmt, char
elifclause -> else if · ( expr ) stmt, string
elifclause -> else if · ( expr ) stmt, const
elifclause -> else if · ( expr ) stmt, extern
elifclause -> else if · ( expr ) stmt, class
elifclause -> else if · ( expr ) stmt, (
elifclause -> else if · ( expr ) stmt, this
elifclause -> else if · ( expr ) stmt, new
elifclause -> else if · ( expr ) stmt, LITBOOL
elifclause -> else if · ( expr ) stmt, LITINT
elifclause -> else if · ( expr ) stmt, LITFLOAT
elifclause -> else if · ( expr ) stmt, LITDOUBLE
elifclause -> else if · ( expr ) stmt, LITCHAR
elifclause -> else if · ( expr ) stmt, LITSTRING
elifclause -> else if · ( expr ) stmt, null
elifclause -> else if · ( expr ) stmt, ++
elifclause -> else if · ( expr ) stmt, --
elifclause -> else if · ( expr ) stmt, break
elifclause -> else if · ( expr ) stmt, return
elifclause -> else if · ( expr ) stmt, delete
elifclause -> else if · ( expr ) stmt, while
elifclause -> else if · ( expr ) stmt, for
elifclause -> else if · ( expr ) stmt, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, const
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
elifclause -> else if · ( expr ) stmt, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
elifclause -> else if · ( expr ) stmt, &&
elifclause -> else if · ( expr ) stmt, ||
elifclause -> else if · ( expr ) stmt, +
elifclause -> else if · ( expr ) stmt, -
elifclause -> else if · ( expr ) stmt, *
elifclause -> else if · ( expr ) stmt, /
elifclause -> else if · ( expr ) stmt, %
elifclause -> else if · ( expr ) stmt, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, %
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
234
I_1372_1463_1483_1539_1557_1562
***Set***
elseclause -> else stmt ·, $
elseclause -> else stmt ·, namespace
elseclause -> else stmt ·, {
elseclause -> else stmt ·, ID
elseclause -> else stmt ·, void
elseclause -> else stmt ·, bool
elseclause -> else stmt ·, int
elseclause -> else stmt ·, float
elseclause -> else stmt ·, double
elseclause -> else stmt ·, char
elseclause -> else stmt ·, string
elseclause -> else stmt ·, const
elseclause -> else stmt ·, extern
elseclause -> else stmt ·, class
elseclause -> else stmt ·, (
elseclause -> else stmt ·, this
elseclause -> else stmt ·, new
elseclause -> else stmt ·, LITBOOL
elseclause -> else stmt ·, LITINT
elseclause -> else stmt ·, LITFLOAT
elseclause -> else stmt ·, LITDOUBLE
elseclause -> else stmt ·, LITCHAR
elseclause -> else stmt ·, LITSTRING
elseclause -> else stmt ·, null
elseclause -> else stmt ·, ++
elseclause -> else stmt ·, --
elseclause -> else stmt ·, break
elseclause -> else stmt ·, return
elseclause -> else stmt ·, delete
elseclause -> else stmt ·, while
elseclause -> else stmt ·, for
elseclause -> else stmt ·, if
elseclause -> else stmt ·, }
elseclause -> else stmt ·, &&
elseclause -> else stmt ·, ||
elseclause -> else stmt ·, +
elseclause -> else stmt ·, -
elseclause -> else stmt ·, *
elseclause -> else stmt ·, /
elseclause -> else stmt ·, %
elseclause -> else stmt ·, !
elseclause -> else stmt ·, else
***EndSet***
***EndState***
***State***
235
I_1409_1466_1486_1529_1541_1559_1564
***Set***
declstmt -> type ID ( params ) { statements } ·, $
declstmt -> type ID ( params ) { statements } ·, namespace
declstmt -> type ID ( params ) { statements } ·, {
declstmt -> type ID ( params ) { statements } ·, ID
declstmt -> type ID ( params ) { statements } ·, void
declstmt -> type ID ( params ) { statements } ·, bool
declstmt -> type ID ( params ) { statements } ·, int
declstmt -> type ID ( params ) { statements } ·, float
declstmt -> type ID ( params ) { statements } ·, double
declstmt -> type ID ( params ) { statements } ·, char
declstmt -> type ID ( params ) { statements } ·, string
declstmt -> type ID ( params ) { statements } ·, const
declstmt -> type ID ( params ) { statements } ·, extern
declstmt -> type ID ( params ) { statements } ·, class
declstmt -> type ID ( params ) { statements } ·, (
declstmt -> type ID ( params ) { statements } ·, this
declstmt -> type ID ( params ) { statements } ·, new
declstmt -> type ID ( params ) { statements } ·, LITBOOL
declstmt -> type ID ( params ) { statements } ·, LITINT
declstmt -> type ID ( params ) { statements } ·, LITFLOAT
declstmt -> type ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type ID ( params ) { statements } ·, LITCHAR
declstmt -> type ID ( params ) { statements } ·, LITSTRING
declstmt -> type ID ( params ) { statements } ·, null
declstmt -> type ID ( params ) { statements } ·, ++
declstmt -> type ID ( params ) { statements } ·, --
declstmt -> type ID ( params ) { statements } ·, break
declstmt -> type ID ( params ) { statements } ·, return
declstmt -> type ID ( params ) { statements } ·, delete
declstmt -> type ID ( params ) { statements } ·, while
declstmt -> type ID ( params ) { statements } ·, for
declstmt -> type ID ( params ) { statements } ·, if
declstmt -> type ID ( params ) { statements } ·, }
declstmt -> type ID ( params ) { statements } ·, &&
declstmt -> type ID ( params ) { statements } ·, ||
declstmt -> type ID ( params ) { statements } ·, +
declstmt -> type ID ( params ) { statements } ·, -
declstmt -> type ID ( params ) { statements } ·, *
declstmt -> type ID ( params ) { statements } ·, /
declstmt -> type ID ( params ) { statements } ·, %
declstmt -> type ID ( params ) { statements } ·, !
declstmt -> type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
236
I_1451_1501_1513_1554_1566_1567
***Set***
elifclause -> else if ( · expr ) stmt, else
elifclause -> else if ( · expr ) stmt, $
elifclause -> else if ( · expr ) stmt, namespace
elifclause -> else if ( · expr ) stmt, {
elifclause -> else if ( · expr ) stmt, ID
elifclause -> else if ( · expr ) stmt, void
elifclause -> else if ( · expr ) stmt, bool
elifclause -> else if ( · expr ) stmt, int
elifclause -> else if ( · expr ) stmt, float
elifclause -> else if ( · expr ) stmt, double
elifclause -> else if ( · expr ) stmt, char
elifclause -> else if ( · expr ) stmt, string
elifclause -> else if ( · expr ) stmt, const
elifclause -> else if ( · expr ) stmt, extern
elifclause -> else if ( · expr ) stmt, class
elifclause -> else if ( · expr ) stmt, (
elifclause -> else if ( · expr ) stmt, this
elifclause -> else if ( · expr ) stmt, new
elifclause -> else if ( · expr ) stmt, LITBOOL
elifclause -> else if ( · expr ) stmt, LITINT
elifclause -> else if ( · expr ) stmt, LITFLOAT
elifclause -> else if ( · expr ) stmt, LITDOUBLE
elifclause -> else if ( · expr ) stmt, LITCHAR
elifclause -> else if ( · expr ) stmt, LITSTRING
elifclause -> else if ( · expr ) stmt, null
elifclause -> else if ( · expr ) stmt, ++
elifclause -> else if ( · expr ) stmt, --
elifclause -> else if ( · expr ) stmt, break
elifclause -> else if ( · expr ) stmt, return
elifclause -> else if ( · expr ) stmt, delete
elifclause -> else if ( · expr ) stmt, while
elifclause -> else if ( · expr ) stmt, for
elifclause -> else if ( · expr ) stmt, if
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, const
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · term % factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · term % factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · term % factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · term % factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · term % factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · term % factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · term % factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · term % factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · term % factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · term % factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · term % factor, /
term -> · factor, /
term -> · term * factor, %
term -> · term / factor, %
term -> · term % factor, %
term -> · factor, %
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
factor -> · incdec, %
factor -> · ! factor, %
factor -> · - factor, %
factor -> · cast, %
factor -> · primary, %
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
incdec -> · ++ ID, %
incdec -> · -- ID, %
incdec -> · ID ++, %
incdec -> · ID --, %
cast -> · ( type ) factor, %
primary -> · ( expr ), %
primary -> · ID, %
primary -> · this, %
primary -> · memberaccess, %
primary -> · indexaccess, %
primary -> · call, %
primary -> · newobj, %
primary -> · newarr, %
primary -> · lit, %
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
memberaccess -> · primary . ID, %
indexaccess -> · idBracket, %
indexaccess -> · memberaccess [ aexpr ], %
call -> · ID ( args ), %
call -> · memberaccess ( args ), %
newobj -> · new ID ( ), %
newarr -> · new stypeBracket, %
lit -> · LITBOOL, %
lit -> · LITINT, %
lit -> · LITFLOAT, %
lit -> · LITDOUBLE, %
lit -> · LITCHAR, %
lit -> · LITSTRING, %
lit -> · null, %
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
idBracket -> · ID [ optidx ], %
elifclause -> else if ( · expr ) stmt, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
elifclause -> else if ( · expr ) stmt, &&
elifclause -> else if ( · expr ) stmt, ||
elifclause -> else if ( · expr ) stmt, +
elifclause -> else if ( · expr ) stmt, -
elifclause -> else if ( · expr ) stmt, *
elifclause -> else if ( · expr ) stmt, /
elifclause -> else if ( · expr ) stmt, %
elifclause -> else if ( · expr ) stmt, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, %
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
237
I_1492_1527_1535_1565_1569_1570
***Set***
elifclause -> else if ( expr · ) stmt, else
elifclause -> else if ( expr · ) stmt, $
elifclause -> else if ( expr · ) stmt, namespace
elifclause -> else if ( expr · ) stmt, {
elifclause -> else if ( expr · ) stmt, ID
elifclause -> else if ( expr · ) stmt, void
elifclause -> else if ( expr · ) stmt, bool
elifclause -> else if ( expr · ) stmt, int
elifclause -> else if ( expr · ) stmt, float
elifclause -> else if ( expr · ) stmt, double
elifclause -> else if ( expr · ) stmt, char
elifclause -> else if ( expr · ) stmt, string
elifclause -> else if ( expr · ) stmt, const
elifclause -> else if ( expr · ) stmt, extern
elifclause -> else if ( expr · ) stmt, class
elifclause -> else if ( expr · ) stmt, (
elifclause -> else if ( expr · ) stmt, this
elifclause -> else if ( expr · ) stmt, new
elifclause -> else if ( expr · ) stmt, LITBOOL
elifclause -> else if ( expr · ) stmt, LITINT
elifclause -> else if ( expr · ) stmt, LITFLOAT
elifclause -> else if ( expr · ) stmt, LITDOUBLE
elifclause -> else if ( expr · ) stmt, LITCHAR
elifclause -> else if ( expr · ) stmt, LITSTRING
elifclause -> else if ( expr · ) stmt, null
elifclause -> else if ( expr · ) stmt, ++
elifclause -> else if ( expr · ) stmt, --
elifclause -> else if ( expr · ) stmt, break
elifclause -> else if ( expr · ) stmt, return
elifclause -> else if ( expr · ) stmt, delete
elifclause -> else if ( expr · ) stmt, while
elifclause -> else if ( expr · ) stmt, for
elifclause -> else if ( expr · ) stmt, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, const
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
elifclause -> else if ( expr · ) stmt, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
elifclause -> else if ( expr · ) stmt, &&
elifclause -> else if ( expr · ) stmt, ||
elifclause -> else if ( expr · ) stmt, +
elifclause -> else if ( expr · ) stmt, -
elifclause -> else if ( expr · ) stmt, *
elifclause -> else if ( expr · ) stmt, /
elifclause -> else if ( expr · ) stmt, %
elifclause -> else if ( expr · ) stmt, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, %
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
238
I_1520_1546_1552_1568_1572_1573
***Set***
elifclause -> else if ( expr ) · stmt, else
elifclause -> else if ( expr ) · stmt, $
elifclause -> else if ( expr ) · stmt, namespace
elifclause -> else if ( expr ) · stmt, {
elifclause -> else if ( expr ) · stmt, ID
elifclause -> else if ( expr ) · stmt, void
elifclause -> else if ( expr ) · stmt, bool
elifclause -> else if ( expr ) · stmt, int
elifclause -> else if ( expr ) · stmt, float
elifclause -> else if ( expr ) · stmt, double
elifclause -> else if ( expr ) · stmt, char
elifclause -> else if ( expr ) · stmt, string
elifclause -> else if ( expr ) · stmt, const
elifclause -> else if ( expr ) · stmt, extern
elifclause -> else if ( expr ) · stmt, class
elifclause -> else if ( expr ) · stmt, (
elifclause -> else if ( expr ) · stmt, this
elifclause -> else if ( expr ) · stmt, new
elifclause -> else if ( expr ) · stmt, LITBOOL
elifclause -> else if ( expr ) · stmt, LITINT
elifclause -> else if ( expr ) · stmt, LITFLOAT
elifclause -> else if ( expr ) · stmt, LITDOUBLE
elifclause -> else if ( expr ) · stmt, LITCHAR
elifclause -> else if ( expr ) · stmt, LITSTRING
elifclause -> else if ( expr ) · stmt, null
elifclause -> else if ( expr ) · stmt, ++
elifclause -> else if ( expr ) · stmt, --
elifclause -> else if ( expr ) · stmt, break
elifclause -> else if ( expr ) · stmt, return
elifclause -> else if ( expr ) · stmt, delete
elifclause -> else if ( expr ) · stmt, while
elifclause -> else if ( expr ) · stmt, for
elifclause -> else if ( expr ) · stmt, if
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, const
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, const
stmt -> · statementblock, const
stmt -> · declstmt, const
stmt -> · stmtexpr ;, const
stmt -> · break ;, const
stmt -> · return expr ;, const
stmt -> · return ;, const
stmt -> · delete expr ;, const
stmt -> · while ( expr ) stmt, const
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, const
stmt -> · if ( expr ) stmt elifclauselist elseclause, const
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · const type ID = lit ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · const type ID = lit ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · const type ID = lit ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · const type ID = lit ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · const type ID = lit ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · const type ID = lit ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · const type ID = lit ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · const type ID = lit ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · const type ID = lit ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · const type ID = lit ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · const type ID = lit ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · const type ID = lit ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, const
statementblock -> · { statements }, const
declstmt -> · type ID = expr ;, const
declstmt -> · const type ID = lit ;, const
declstmt -> · type ID ( params ) { statements }, const
declstmt -> · extern type ID ( params ) ;, const
declstmt -> · class ID inherit { declstatements }, const
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · const type ID = lit ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · const type ID = lit ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · const type ID = lit ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · const type ID = lit ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · const type ID = lit ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · const type ID = lit ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · const type ID = lit ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · const type ID = lit ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · const type ID = lit ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · const type ID = lit ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · const type ID = lit ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · const type ID = lit ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · const type ID = lit ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · const type ID = lit ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · const type ID = lit ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · const type ID = lit ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · const type ID = lit ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · const type ID = lit ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · const type ID = lit ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · const type ID = lit ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elifclause -> else if ( expr ) · stmt, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · const type ID = lit ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elifclause -> else if ( expr ) · stmt, &&
elifclause -> else if ( expr ) · stmt, ||
elifclause -> else if ( expr ) · stmt, +
elifclause -> else if ( expr ) · stmt, -
elifclause -> else if ( expr ) · stmt, *
elifclause -> else if ( expr ) · stmt, /
elifclause -> else if ( expr ) · stmt, %
elifclause -> else if ( expr ) · stmt, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, %
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, %
stmt -> · statementblock, %
stmt -> · declstmt, %
stmt -> · stmtexpr ;, %
stmt -> · break ;, %
stmt -> · return expr ;, %
stmt -> · return ;, %
stmt -> · delete expr ;, %
stmt -> · while ( expr ) stmt, %
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, %
stmt -> · if ( expr ) stmt elifclauselist elseclause, %
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · const type ID = lit ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · const type ID = lit ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · const type ID = lit ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · const type ID = lit ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · const type ID = lit ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · const type ID = lit ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, %
statementblock -> · { statements }, %
declstmt -> · type ID = expr ;, %
declstmt -> · const type ID = lit ;, %
declstmt -> · type ID ( params ) { statements }, %
declstmt -> · extern type ID ( params ) ;, %
declstmt -> · class ID inherit { declstatements }, %
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · const type ID = lit ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
239
I_1540_1558_1563_1571_1574_1575
***Set***
elifclause -> else if ( expr ) stmt ·, else
elifclause -> else if ( expr ) stmt ·, $
elifclause -> else if ( expr ) stmt ·, namespace
elifclause -> else if ( expr ) stmt ·, {
elifclause -> else if ( expr ) stmt ·, ID
elifclause -> else if ( expr ) stmt ·, void
elifclause -> else if ( expr ) stmt ·, bool
elifclause -> else if ( expr ) stmt ·, int
elifclause -> else if ( expr ) stmt ·, float
elifclause -> else if ( expr ) stmt ·, double
elifclause -> else if ( expr ) stmt ·, char
elifclause -> else if ( expr ) stmt ·, string
elifclause -> else if ( expr ) stmt ·, const
elifclause -> else if ( expr ) stmt ·, extern
elifclause -> else if ( expr ) stmt ·, class
elifclause -> else if ( expr ) stmt ·, (
elifclause -> else if ( expr ) stmt ·, this
elifclause -> else if ( expr ) stmt ·, new
elifclause -> else if ( expr ) stmt ·, LITBOOL
elifclause -> else if ( expr ) stmt ·, LITINT
elifclause -> else if ( expr ) stmt ·, LITFLOAT
elifclause -> else if ( expr ) stmt ·, LITDOUBLE
elifclause -> else if ( expr ) stmt ·, LITCHAR
elifclause -> else if ( expr ) stmt ·, LITSTRING
elifclause -> else if ( expr ) stmt ·, null
elifclause -> else if ( expr ) stmt ·, ++
elifclause -> else if ( expr ) stmt ·, --
elifclause -> else if ( expr ) stmt ·, break
elifclause -> else if ( expr ) stmt ·, return
elifclause -> else if ( expr ) stmt ·, delete
elifclause -> else if ( expr ) stmt ·, while
elifclause -> else if ( expr ) stmt ·, for
elifclause -> else if ( expr ) stmt ·, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, const
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, const
elifclauselist -> · elifclauselist elifclause, const
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
elifclause -> else if ( expr ) stmt ·, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
elifclause -> else if ( expr ) stmt ·, &&
elifclause -> else if ( expr ) stmt ·, ||
elifclause -> else if ( expr ) stmt ·, +
elifclause -> else if ( expr ) stmt ·, -
elifclause -> else if ( expr ) stmt ·, *
elifclause -> else if ( expr ) stmt ·, /
elifclause -> else if ( expr ) stmt ·, %
elifclause -> else if ( expr ) stmt ·, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, %
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, %
elifclauselist -> · elifclauselist elifclause, %
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***Table***
ACTION_TABLE
0
r4,r4,r4,r4,r4,,r4,r4,r4,r4,r4,r4,r4,r4,r4,,,r4,r4,r4,r4,r4,,r4,r4,r4,r4,,,,r4,,,,,,,,r4,r4,,,,,,,,,,,,,,,,,,r4,r4,r4,r4,r4,r4,r4,r4
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s5,,,,,,,,,,,,,,,,,,,
2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,acc
3
s1,r8,r8,r8,r8,,r8,r8,r8,r8,r8,r8,r8,r8,r8,,,r8,r8,r8,r8,r8,,r8,r8,r8,r8,,,,r8,,,,,,,,r8,r8,,,,,,,,,,,,,,,,,,r8,r8,r8,r8,r8,r8,r8,r8
4
r3,r3,r3,r3,r3,,r3,r3,r3,r3,r3,r3,r3,r3,r3,,,r3,r3,r3,r3,r3,,r3,r3,r3,r3,,,,r3,,,,,,,,r3,r3,,,,,,,,,,,,,,,,,,r3,r3,r3,r3,r3,r3,r3,r3
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s10,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s11,
7
r2,r2,r2,r2,r2,,r2,r2,r2,r2,r2,r2,r2,r2,r2,,,r2,r2,r2,r2,r2,,r2,r2,r2,r2,,,,r2,,,,,,,,r2,r2,,,,,,,,,,,,,,,,,,r2,r2,r2,r2,r2,r2,r2,r2
8
,s6,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12
9
,r7,r7,r7,r7,,r7,r7,r7,r7,r7,r7,r7,r7,r7,,,r7,r7,r7,r7,r7,,r7,r7,r7,r7,,,,r7,,,,,,,,r7,r7,,,,,,,,,,,,,,,,,,r7,r7,r7,r7,r7,r7,r7,r7
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s67,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,s68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
13
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
14
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
15
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s74,
16
,,,,,,,,,,,,,,,,,,,,,,,,,,,r53,r53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r53,
17
,,,,,,,,,,,,,,,,,,,,,,,,,,,r54,r54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r54,
18
,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,r55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,
19
,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,r56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,
20
,,,,,,,,,,,,,,,,,,,,,,,,,,,r57,r57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r57,
21
,,,,,,,,,,,,,,,,,,,,,,,,,,,r58,r58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r58,
22
,,,,,,,,,,,,,,,,,,,,,,,,,,,r59,r59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r59,
23
,,,,,,,,,,,,,,,r116,r116,,,,,,,,,,,r116,,r116,,,,,,,,,,,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,r116,,,,r116,,,,,,,,
24
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s75,
25
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
26
,,,,,,,,,,,,,,,,,,,,,,,,,,s95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,,,,,,,,,,,,,,,,s96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,,,,,,,,,,,,,,,,,s97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
29
,,,,,,,,,,,,,,,,s98,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
30
,,,,,,,,,,,,,,s23,,s99,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
31
,,,,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,r91,,,,,,,,,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,,,r91,,,,,,,,
32
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
33
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
34
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s103,
35
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s104,
36
,,,,,,,,,,,,,,,r110,r110,,,,,,,,,,,r110,,r110,,,,,,,,,,,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,,,,r110,,,,,,,,
37
,,,,,,,,,,,,,,,r111,r111,,,,,,,,,,,r111,,r111,,,,,,,,,,,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,,,,r111,,,,,,,,
38
,,,,,,,,,,,,,,,r112,r112,,,,,,,,,,,r112,,r112,,,,,,,,,,,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,,,,r112,,,,,,,,
39
,,,,,,,,,,,,,,,r113,r113,,,,,,,,,,,r113,,r113,,,,,,,,,,,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,,,,r113,,,,,,,,
40
,,,,,,,,,,,,,,,r114,r114,,,,,,,,,,,r114,,r114,,,,,,,,,,,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,,,,r114,,,,,,,,
41
,,,,,,,,,,,,,,,r115,r115,,,,,,,,,,,r115,,r115,,,,,,,,,,,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,r115,,,,r115,,,,,,,,
42
,,,,,,,,,,,,,,,,,,,,,,,,,,s105,r52,s106,,,,r45,r45,r45,r45,r45,r45,s107,s108,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,,,r90,,,,,,,r52,
43
,r6,r6,r6,r6,,r6,r6,r6,r6,r6,r6,r6,r6,r6,,,r6,r6,r6,r6,r6,,r6,r6,r6,r6,,,,r6,,,,,,,,r6,r6,,,,,,,,,,,,,,,,,,r6,r6,r6,r6,r6,r6,r6,r6
44
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,r1
45
,,r18,r18,r18,,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,,,,,,,r18,r18,,,,,,,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,r18,r18,r18,r18,r18,r18
46
,,r19,r19,r19,,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,,,,,,,r19,r19,,,,,,,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,r19,r19,r19,r19,r19,r19
47
,,r11,r11,r11,,r11,r11,r11,r11,r11,r11,r11,r11,r11,,,r11,r11,r11,r11,r11,,r11,r11,r11,r11,,,,r11,r11,,,,,,,r11,r11,,,,,,,,,,,,,,,,,,r11,r11,r11,r11,r11,r11,r11,r11
48
,,r20,r20,r20,,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,,,,,,,r20,r20,,,,,,,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,r20,r20,r20,r20,r20,r20
49
,,,,,,,,,,,,,,,,s110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
50
,,,,,,,,,,,,,,,,r62,,,,,,,,,,,r62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51
,,,,,,,,,,,,,,,,r63,,,,,,,,,,,r63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r94,,,,,,,,
52
,,,,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,,,,r47,r47,r47,r47,r47,r47,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,,,r93,,,,,,,,
53
,,,,,,,,,,,,,,,,r65,,,,,,,,,,,r65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r95,,,,,,,,
54
,,,,,,,,,,,,,,,r96,r96,,,,,,,,,,,r96,,r96,,,,,,,,,,,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,,,,r96,,,,,,,,
55
,,,,,,,,,,,,,,,,r64,,,,,,,,,,,r64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
56
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s111,
57
,,,,,,,,,,,,,,,,,,,,,,,,,,,r49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r49,
58
,,,,,,,,,,,,,,,,,,,,,,,,,,,r48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r48,
59
,,,,,,,,,,,,,,,,,,,,,,,,,,,r51,s112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r51,
60
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s113,,,,,,,,
61
,,,,,,,,,,,,,,,r97,r97,,,,,,,,,,,r97,,r97,,,,,,,,,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,,,r97,,,,,,,,
62
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s114,s115,s116,s117,s118,s119,,,,,,,,,,,,,,,,,,,,,,,,,,,
63
,,,,,,,,,,,,,,,r92,r92,,,,,,,,,,s120,r92,s121,,,,r46,r46,r46,r46,r46,r46,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,,,r92,,,,,,,,
64
,,,,,,,,,,,,,,,,,,,,,,,,,,,r50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r50,
65
,,,,,,,,,,,,,,,,,,,,,,,,,,,r123,,,,,r104,r104,r104,r104,r104,r104,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,,,r104,,,,,,,r123,
66
,,,,,,,,,,,,,,,r124,r124,,,,,,,,,,,r124,,r124,,,,,,,,,,,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,,,,r124,,,,,,,r124,
67
r5,r5,r5,r5,r5,,r5,r5,r5,r5,r5,r5,r5,r5,r5,,,r5,r5,r5,r5,r5,,r5,r5,r5,r5,,,,r5,,,,,,,,r5,r5,,,,,,,,,,,,,,,,,,r5,r5,r5,r5,r5,r5,r5,r5
68
,r9,r9,r9,r9,,r9,r9,r9,r9,r9,r9,r9,r9,r9,,,r9,r9,r9,r9,r9,,r9,r9,r9,r9,,,,r9,,,,,,,,r9,r9,,,,,,,,,,,,,,,,,,r9,r9,r9,r9,r9,r9,r9,r9
69
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
70
,,,,,,,,,,,,,,,,,,,,,,,,,,,,s106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r52,
71
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s123,
72
,,,,,,,,,,,,,,,r123,r123,,,,,,,,,,,r123,,r123,,,,,,,,,,,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,,,,r123,,,,,,,r123,
73
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s124,
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r130,,,,,,,,,,,,,,,,,,,,,,,,s125,,,,,,,,,,
75
,,,,,,,,,,,,,,,,,,,,,,,,,,s127,,s106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,,,,,,,,,,,,,,,,,,,,,,,,s112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
77
,,,,,,,,,,,,,,,r107,r107,,,,,,,,,,,r107,,r107,,,,,,,,,,,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,,,,r107,,,,,,,,
78
,,,,,,,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s42,
79
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
80
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
81
,,,,,,,,,,,,,,,r90,r90,,,,,,,,,,s105,r90,s106,,,,r45,r45,r45,r45,r45,r45,s107,s108,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,,,r90,,,,,,,,
82
,,,,,,,,,,,,,,,r60,r60,,,,,,,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,r94,r94,,,,,,,,,,,r94,,r94,,,,,,,,,,,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,,,,r94,,,,,,,,
84
,,,,,,,,,,,,,,,r95,r95,,,,,,,,,,,r95,,r95,,,,,,,,,,,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,,,r95,,,,,,,,
85
,,,,,,,,,,,,,,,r84,r84,,,,,,,,,,,r84,,r84,,,,,,,,,,,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,,,,,,,,,,,,
86
,,,,,,,,,,,,,,,,s134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
87
,,,,,,,,,,,,,,,r61,r61,,,,,,,,,,,r61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
88
,,,,,,,,,,,,,,,r66,r66,,,,,,,,,,,r66,,,,,,,,,,,,,,,,,,,,,,,,s135,s136,,,,,,,,,,,,
89
,,,,,,,,,,,,,,,r67,r67,,,,,,,,,,,r67,,,,,,,,,,,,,s137,s138,s139,s140,s141,s142,s143,s144,,,,,,,,,,,,,,,,,
90
,,,,,,,,,,,,,,,r79,r79,,,,,,,,,,,r79,,r79,,,,,,,,,,,r79,r79,r79,r79,r79,r79,r79,r79,s145,s146,s147,r79,r79,,,,,,,,,,,,
91
,,,,,,,,,,,,,,,r76,r76,,,,,,,,,,,r76,,,,,,,,,,,,,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,r76,r76,,,,,,,,,,,,
92
,,,,,,,,,,,,,,,r88,r88,,,,,,,,,,,r88,,r88,,,,,,,,,,,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,,,s113,,,,,,,,
93
,,,,,,,,,,,,,,,r87,r87,,,,,,,,,,,r87,,r87,,,,,,,,,,,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,,,,,,,,,,,,
94
,,,,,,,,,,,,,,,r104,r104,,,,,,,,,,,r104,,r104,,,r104,r104,r104,r104,r104,r104,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,,,r104,,,,,,,,
95
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
96
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
97
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
98
,,r22,r22,r22,,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,,,,,,,r22,r22,,,,,,,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,r22,r22,r22,r22,r22,r22
99
,,r24,r24,r24,,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,,,,,,,r24,r24,,,,,,,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,r24,r24,r24,r24,r24,r24
100
,,,,,,,,,,,,,,,,s151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
101
,,,,,,,,,,,,,,,,,,,,,,,,,,,s152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
102
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,s153,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
103
,,,,,,,,,,,,,,,r99,r99,,,,,,,,,,,r99,,r99,,,,,,,,,,,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,,,,,,,,,,,
104
,,,,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,r98,,,,,,,,,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,,,,,,,,,,,
105
,,,,,,,,,,,,,,s23,r120,,s24,,,,,,,,s31,s78,r120,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
106
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,r128,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
107
,,,,,,,,,,,,,,,r101,r101,,,,,,,,,,,r101,,r101,,,,,,,,,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,,,,,,,,,,,
108
,,,,,,,,,,,,,,,r100,r100,,,,,,,,,,,r100,,r100,,,,,,,,,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,,,,,,,,,,,
109
,,r10,r10,r10,,r10,r10,r10,r10,r10,r10,r10,r10,r10,,,r10,r10,r10,r10,r10,,r10,r10,r10,r10,,,,r10,r10,,,,,,,r10,r10,,,,,,,,,,,,,,,,,,r10,r10,r10,r10,r10,r10,r10,r10
110
,,r21,r21,r21,,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,,,,,,,r21,r21,,,,,,,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,r21,r21,r21,r21,r21,r21
111
,,,,,,,,,,,,,,,,,,,,,,,,,,s159,,,,,,s160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
112
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,r128,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
113
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s162,
114
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
115
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
116
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
117
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
118
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
119
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
120
,,,,,,,,,,,,,,s23,r120,,s24,,,,,,,,s31,s78,r120,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
121
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
122
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
123
,,,,,,,,,,,,,,,,,,,,,,,,,,s172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
124
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
125
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s174,
126
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
127
,,,,,,,,,,,,,,,,,,,,,,,,,,,s176,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
128
,,,,,,,,,,,,,,,,,,,,,,,,,,,s177,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
129
,,,,,,,,,,,,,,,r90,r90,,,,,,,,,,s105,r90,s106,r90,,,,,,,,,s107,s108,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,,,r90,,,,,,,,
130
,,,,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,r93,,,,,,,,,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,,,r93,,,,,,,,
131
,,,,,,,,,,,,,,,r86,r86,,,,,,,,,,,r86,,r86,,,,,,,,,,,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,,,,,,,,,,,
132
,,,,,,,,,,,,,,,r92,r92,,,,,,,,,,s120,r92,s121,r92,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,,,r92,,,,,,,,
133
,,,,,,,,,,,,,,,r85,r85,,,,,,,,,,,r85,,r85,,,,,,,,,,,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,,,,,,,,,,,,
134
,,r25,r25,r25,,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,,,,,,,r25,r25,,,,,,,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,r25,r25,r25,r25,r25,r25
135
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
136
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
137
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
138
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
139
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
140
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
141
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
142
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
143
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
144
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
145
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
146
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
147
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
148
,,,,,,,,,,,,,,,,,,,,,,,,,,,s192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
149
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
150
,,,,,,,,,,,,,,,,,,,,,,,,,,,s194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
151
,,r23,r23,r23,,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,,,,,,,r23,r23,,,,,,,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,r23,r23,r23,r23,r23,r23
152
,,,,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,r89,,,,,,,,,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,,,r89,,,,,,,,
153
,,r14,r14,r14,,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,,,,,,,r14,r14,,,,,,,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,r14,r14,r14,r14,r14,r14
154
,,,,,,,,,,,,,,,r121,,,,,,,,,,,,r121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
155
,,,,,,,,,,,,,,,s195,,,,,,,,,,,,s196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
156
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,s143,s144,,,,,,,,,,,,,,,,,
157
,,,,,,,,,,,,,,,r83,r83,,,,,,,,,,,r83,,r83,,,,,,,,,,,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,,,,,,,,,,,,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,r117,,,,,,,,,,,,r117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
160
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
161
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s201,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
162
,,,,,,,,,,,,,,,r109,r109,,,,,,,,,,r109,r109,r109,r109,,,r109,r109,r109,r109,r109,r109,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,,,r109,,,,,,,,
163
,,,,,,,,,,,,,,,r39,r39,,,,,,,,,,,r39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
164
,,,,,,,,,,,,,,,r40,r40,,,,,,,,,,,r40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,,r41,r41,,,,,,,,,,,r41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,r42,r42,,,,,,,,,,,r42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
167
,,,,,,,,,,,,,,,r43,r43,,,,,,,,,,,r43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
168
,,,,,,,,,,,,,,,r44,r44,,,,,,,,,,,r44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,s195,,,,,,,,,,,,s202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s203,,,,,,,,,,,,,,,,,s143,s144,,,,,,,,,,,,,,,,,
171
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,s204,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
172
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,r117,,,,,,,,,,,,r117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
173
,,,,,,,,,,,,,,s23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
175
,,,r17,r17,,r17,r17,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
176
,,,,,,,,,,,,,,,r106,r106,,,,,,,,,,,r106,,r106,,,,,,,,,,,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,,,,r106,,,,,,,,
177
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s129,
178
,,,,,,,,,,,,,,,r69,r69,,,,,,,,,,,r69,,,,,,,,,,,,,,,,,,,,,,,,r69,r69,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s137,s138,s139,s140,s141,s142,s143,s144,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,r68,r68,,,,,,,,,,,r68,,,,,,,,,,,,,,,,,,,,,,,,r68,r68,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,r74,r74,,,,,,,,,,,r74,,,,,,,,,,,,,,,,,,,s143,s144,,,,r74,r74,,,,,,,,,,,,
182
,,,,,,,,,,,,,,,r75,r75,,,,,,,,,,,r75,,,,,,,,,,,,,,,,,,,s143,s144,,,,r75,r75,,,,,,,,,,,,
183
,,,,,,,,,,,,,,,r73,r73,,,,,,,,,,,r73,,,,,,,,,,,,,,,,,,,s143,s144,,,,r73,r73,,,,,,,,,,,,
184
,,,,,,,,,,,,,,,r72,r72,,,,,,,,,,,r72,,,,,,,,,,,,,,,,,,,s143,s144,,,,r72,r72,,,,,,,,,,,,
185
,,,,,,,,,,,,,,,r70,r70,,,,,,,,,,,r70,,,,,,,,,,,,,,,,,,,s143,s144,,,,r70,r70,,,,,,,,,,,,
186
,,,,,,,,,,,,,,,r71,r71,,,,,,,,,,,r71,,,,,,,,,,,,,,,,,,,s143,s144,,,,r71,r71,,,,,,,,,,,,
187
,,,,,,,,,,,,,,,r77,r77,,,,,,,,,,,r77,,r77,,,,,,,,,,,r77,r77,r77,r77,r77,r77,r77,r77,s145,s146,s147,r77,r77,,,,,,,,,,,,
188
,,,,,,,,,,,,,,,r78,r78,,,,,,,,,,,r78,,r78,,,,,,,,,,,r78,r78,r78,r78,r78,r78,r78,r78,s145,s146,s147,r78,r78,,,,,,,,,,,,
189
,,,,,,,,,,,,,,,r80,r80,,,,,,,,,,,r80,,r80,,,,,,,,,,,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,,,,,,,,,,,,
190
,,,,,,,,,,,,,,,r81,r81,,,,,,,,,,,r81,,r81,,,,,,,,,,,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,,,,,,,,,,,,
191
,,,,,,,,,,,,,,,r82,r82,,,,,,,,,,,r82,,r82,,,,,,,,,,,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,,,,,,,,,,,,
192
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
193
,,,,,,,,,,,,,,,,s211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s135,s136,,,,,,,,,,,,
194
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
195
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
196
,,,,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,r102,,,,,,,,,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,,,r102,,,,,,,,
197
,,,,,,,,,,,,,,,r125,r125,,,,,,,,,,,r125,,r125,,,r125,r125,r125,r125,r125,r125,,,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,r125,,,,r125,,,,,,,r125,
198
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s214,
199
,,,,,,,,,,,,,,,s215,,,,,,,,,,,,s216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,s217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
201
,,,,,,,,,,,,,,,r126,r126,,,,,,,,,,,r126,,r126,,,,,,,,,,,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,r126,,,,r126,,,,,,,r126,
202
,,,,,,,,,,,,,,,r103,r103,,,,,,,,,,,r103,,r103,,,,,,,,,,,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,,,,r103,,,,,,,,
203
,,,,,,,,,,,,,,,r105,r105,,,,,,,,,,,r105,,r105,,,r105,r105,r105,r105,r105,r105,,,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,,,,r105,,,,,,,,
204
,,r13,r13,r13,,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,,,,,,,r13,r13,,,,,,,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,r13,r13,r13,r13,r13,r13
205
,,,,,,,,,,,,,,,s215,,,,,,,,,,,,s218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
206
,,,,,,,,,,,,,,,,s219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
207
,,,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,,,,,,,,,,,,,,,,,,s220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
208
,,,r16,r16,,r16,r16,r16,r16,r16,r16,r16,r16,,,,,,,,,,,,,,,,,,r16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r16,
209
,,,,,,,,,,,,,,,r108,r108,,,,,,,,,,,r108,,r108,,,,,,,,,,,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,,,,,,,,,,,,
210
,,r26,r26,r26,,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,,,,,,,r26,r26,,,,,,,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,r26,r26,r26,r26,r26,r26
211
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s32,,,,,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s81,
212
,,r34,r34,r34,,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,,,,,,,r34,r34,,,,,,,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,r34,r34,r34,r34,r34,r34
213
,,,,,,,,,,,,,,,r122,,,,,,,,,,,,r122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
214
,,,,,,,,,,,,,,,r118,,,,,,,,,,,,r118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
215
,,,,,,,s16,s17,s18,s19,s20,s21,s22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s70,
216
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
217
,,r29,r29,r29,,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,,,,,,,r29,r29,,,,,,,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,r29,r29,r29,r29,r29,r29
218
,,,,,,,,,,,,,,,,s226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
219
,,r30,r30,r30,,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,,,,,,,r30,r30,,,,,,,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,r30,r30,r30,r30,r30,r30
220
,,r33,r33,r33,,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,,,,,,,r33,r33,,,,,,,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,r33,r33,r33,r33,r33,r33
221
,,,r15,r15,,r15,r15,r15,r15,r15,r15,r15,r15,,,,,,,,,,,,,,,,,,r15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r15,
222
,,,,,,,,,,,,,,,,,,,,,,,,,,,s227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
223
,,r37,r37,r37,,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,r37,r37,r37,r37,r37,s228,r37,r37,r37,r37,,,,r37,r37,,,,,,,r37,r37,,,,,,,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,r37,r37,r37,r37,r37,r37
224
,,,,,,,,,,,,,,,r119,,,,,,,,,,,,r119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s224,
225
,,r12,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
226
,,r32,r32,r32,,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,,,,,,,r32,r32,,,,,,,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,r32,r32,r32,r32,r32,r32
227
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
228
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s233,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
229
,,r35,r35,r35,,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,,,,,,,r35,r35,,,,,,,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,r35,r35,r35,r35,r35,r35
230
,,r28,r28,r28,,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,,,,,,,r28,r28,,,,,,,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,r28,r28,r28,r28,r28,r28
231
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,s235,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
232
,,r27,r27,r27,,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,,,,,,,r27,r27,,,,,,,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,r27,r27,r27,r27,r27,r27
233
,,,,,,,,,,,,,,,,,,,,,,,,,,s236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
234
,,r38,r38,r38,,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,r38,r38,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,,,,,,,r38,r38,,,,,,,r38,r38,r38,r38,r38,r38,r38,r38,,,,r38,r38,r38,r38,r38,r38,r38,r38
235
,,r31,r31,r31,,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,,,,,,,r31,r31,,,,,,,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,r31,r31,r31,r31,r31,r31
236
,,,,,,,,,,,,,,s23,,,s24,,,,,,,,s31,s78,,,,,,,,,,,,s34,s35,,,,,,,,s79,,,,,,s80,,,,s36,s37,s38,s39,s40,s41,s81,
237
,,,,,,,,,,,,,,,,,,,,,,,,,,,s238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
238
,,s12,s13,s14,,s15,s16,s17,s18,s19,s20,s21,s22,s23,,,s24,s25,s26,s27,s28,,s29,s30,s31,s32,,,,s33,,,,,,,,s34,s35,,,,,,,,,,,,,,,,,,s36,s37,s38,s39,s40,s41,s42,
239
,,r36,r36,r36,,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,r36,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,,,,,,,r36,r36,,,,,,,r36,r36,r36,r36,r36,r36,r36,r36,,,,r36,r36,r36,r36,r36,r36,r36,r36
GOTO_TABLE
0
1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3
1,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8
,6,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,43,44,45,46,,47,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,,,,,,,,,,71,57,58,59,,,,,,,,,,,,,,64,72,66,,,
14
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,,,,,,,,,,73,57,58,59,,,,,,,,,,,,,,64,72,66,,,
15
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
24
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,,,,,,,77,72,66,,,
25
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,86,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
26
,,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,,,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
29
,,,,,,,,,,,,,,,,98,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
30
,,,,,,,,,,,,,,23,,99,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,100,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
32
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,101,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
33
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,102,45,46,,47,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
34
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
35
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42
,,,,,,,,,,,,,,,,,,,,,,,,,,105,,106,,,,,,,,,,107,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,109,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
49
,,,,,,,,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
56
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59
,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
60
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
62
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,115,116,117,118,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
63
,,,,,,,,,,,,,,,,,,,,,,,,,,120,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
70
,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
73
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,126,
75
,,,,,,,,,,,,,,,,,,,,,,,,,,127,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
78
,,,,,,,16,17,18,19,20,21,22,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,42,,,,,,,,,,,,,,,,,82,83,52,84,54,85,128,57,58,59,101,87,88,89,90,91,92,61,93,62,63,,,64,65,66,,,
79
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,131,92,61,93,,132,,,,94,,,,
80
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,133,92,61,93,,132,,,,94,,,,
81
,,,,,,,,,,,,,,,,,,,,,,,,,,105,,106,,,,,,,,,,107,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
86
,,,,,,,,,,,,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
88
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
89
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,138,139,140,141,142,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
90
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
92
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,148,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
96
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,149,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
97
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,150,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
100
,,,,,,,,,,,,,,,,151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
101
,,,,,,,,,,,,,,,,,,,,,,,,,,,152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
102
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,153,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,109,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
105
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,154,87,88,89,90,91,92,61,93,62,63,,155,,94,,,,
106
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,156,90,157,92,61,93,,132,,,,94,,158,,
111
,,,,,,,,,,,,,,,,,,,,,,,,,,159,,,,,,160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
112
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,156,90,157,92,61,93,,132,,,,94,,161,,
113
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
114
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,163,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
115
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,164,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
116
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,165,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
117
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,166,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
118
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,167,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
119
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,168,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
120
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,154,87,88,89,90,91,92,61,93,62,63,,169,,94,,,,
121
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,170,90,157,92,61,93,,132,,,,94,,,,
122
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,171,45,46,,47,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
123
,,,,,,,,,,,,,,,,,,,,,,,,,,172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
124
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
125
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,174,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
126
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
127
,,,,,,,,,,,,,,,,,,,,,,,,,,,176,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
128
,,,,,,,,,,,,,,,,,,,,,,,,,,,177,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
129
,,,,,,,,,,,,,,,,,,,,,,,,,,105,,106,,,,,,,,,,107,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
132
,,,,,,,,,,,,,,,,,,,,,,,,,,120,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
135
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,178,179,90,91,92,61,93,,132,,,,94,,,,
136
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,180,179,90,91,92,61,93,,132,,,,94,,,,
137
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,181,90,157,92,61,93,,132,,,,94,,,,
138
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,182,90,157,92,61,93,,132,,,,94,,,,
139
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,183,90,157,92,61,93,,132,,,,94,,,,
140
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,184,90,157,92,61,93,,132,,,,94,,,,
141
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,185,90,157,92,61,93,,132,,,,94,,,,
142
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,186,90,157,92,61,93,,132,,,,94,,,,
143
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,187,157,92,61,93,,132,,,,94,,,,
144
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,188,157,92,61,93,,132,,,,94,,,,
145
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,189,92,61,93,,132,,,,94,,,,
146
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,190,92,61,93,,132,,,,94,,,,
147
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,191,92,61,93,,132,,,,94,,,,
148
,,,,,,,,,,,,,,,,,,,,,,,,,,,192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
149
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,193,179,90,91,92,61,93,,132,,,,94,,,,
150
,,,,,,,,,,,,,,,,,,,,,,,,,,,194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
155
,,,,,,,,,,,,,,,195,,,,,,,,,,,,196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
156
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
158
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,,,,,,,,,,198,57,58,59,,,,,,,,,,,,199,,64,72,66,,,
160
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,200,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
161
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,201,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
169
,,,,,,,,,,,,,,,195,,,,,,,,,,,,202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,203,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
171
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,204,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,109,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
172
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,,,,,,,,,,198,57,58,59,,,,,,,,,,,,205,,64,72,66,,,
173
,,,,,,,,,,,,,,23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,206,,,,,,,,,,,
175
,,,13,14,,15,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,207,,208,,,,,,,,,,,56,57,58,59,,,,,,,,,,,,,,64,72,66,,,
177
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,129,,,,,,,,,,,,,,,,,,83,130,84,54,85,,,,,,,,,,209,92,61,93,,132,,,,94,,,,
178
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,138,139,140,141,142,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
183
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
184
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
185
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
186
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,143,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
187
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
188
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,146,147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
192
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,210,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
193
,,,,,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
194
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,212,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
195
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,213,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
198
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,,215,,,,,,,,,,,,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,,,,,,,,,,,,,,217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
205
,,,,,,,,,,,,,,,215,,,,,,,,,,,,218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
206
,,,,,,,,,,,,,,,,219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
207
,,,13,14,,15,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,221,,,,,,,,,,,56,57,58,59,,,,,,,,,,,,,,64,72,66,,,
211
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,32,,,,,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,222,50,51,52,53,54,55,,,,,,,,,,,60,61,,62,63,,,,94,,,,
212
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
215
,,,,,,,16,17,18,19,20,21,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,,,,,,,,,,224,57,58,59,,,,,,,,,,,,,,64,72,66,,,
216
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
218
,,,,,,,,,,,,,,,,226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
222
,,,,,,,,,,,,,,,,,,,,,,,,,,,227,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
223
,,,,,,,,,,,,,,,,,,,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,229,230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
224
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
225
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,231,45,46,,47,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
227
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,232,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
228
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,233,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,234,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
231
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,235,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,109,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
233
,,,,,,,,,,,,,,,,,,,,,,,,,,236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
236
,,,,,,,,,,,,,,23,,,24,,,,,,,,31,78,,,,,,,,,,,,34,35,,,,,,,,79,,,,,,80,,,,36,37,38,39,40,41,81,,,,,,,,,,,,,,,,,82,83,52,84,54,85,,,,,237,87,88,89,90,91,92,61,93,62,63,,,,94,,,,
237
,,,,,,,,,,,,,,,,,,,,,,,,,,,238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
238
,,12,13,14,,15,16,17,18,19,20,21,22,23,,,24,25,26,27,28,,29,30,31,32,,,,33,,,,,,,,34,35,,,,,,,,,,,,,,,,,,36,37,38,39,40,41,42,,,,,,,,45,46,,239,48,,,,49,50,51,52,53,54,55,56,57,58,59,,,,,,,60,61,,62,63,,,64,65,66,,,
239
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENDTABLE
